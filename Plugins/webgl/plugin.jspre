"use strict";
  // node_modules/zod/lib/index.mjs
  var util;
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {
    }
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
      const filtered = {};
      for (const k2 of validKeys) {
        filtered[k2] = obj[k2];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e2) {
        return obj[e2];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_2, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return {
        ...first,
        ...second
        // second overwrites first
      };
    };
  })(objectUtil || (objectUtil = {}));
  var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  var getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data)) {
          return ZodParsedType.array;
        }
        if (data === null) {
          return ZodParsedType.null;
        }
        if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  };
  var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  var quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  var ZodError = class extends Error {
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    get errors() {
      return this.issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i = 0;
            while (i < issue.path.length) {
              const el = issue.path[i];
              const terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };
  var errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util.assertNever(issue);
    }
    return { message };
  };
  var overrideErrorMap = errorMap;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }
  var makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...issueData.path || []];
    const fullIssue = {
      ...issueData,
      path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
    for (const map of maps) {
      errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message || errorMessage
    };
  };
  var EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        ctx.schemaErrorMap,
        getErrorMap(),
        errorMap
        // then global default map
      ].filter((x2) => !!x2)
    });
    ctx.common.issues.push(issue);
  }
  var ParseStatus = class _ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s2 of results) {
        if (s2.status === "aborted")
          return INVALID;
        if (s2.status === "dirty")
          status.dirty();
        arrayValue.push(s2.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
      const syncPairs = [];
      for (const pair of pairs) {
        syncPairs.push({
          key: await pair.key,
          value: await pair.value
        });
      }
      return _ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
      const finalObject = {};
      for (const pair of pairs) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  };
  var INVALID = Object.freeze({
    status: "aborted"
  });
  var DIRTY = (value) => ({ status: "dirty", value });
  var OK = (value) => ({ status: "valid", value });
  var isAborted = (x2) => x2.status === "aborted";
  var isDirty = (x2) => x2.status === "dirty";
  var isValid = (x2) => x2.status === "valid";
  var isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  })(errorUtil || (errorUtil = {}));
  var ParseInputLazyPath = class {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  };
  var handleResult = (ctx, result) => {
    if (isValid(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error = new ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      if (typeof ctx.data === "undefined") {
        return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
      }
      return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  var ZodType = class {
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data, params) {
      const result = this.safeParse(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data, params) {
      var _a;
      const ctx = {
        common: {
          issues: [],
          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const result = this._parseSync({ data, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
      const result = await this.safeParseAsync(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
          async: true
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = (val) => {
        if (typeof message === "string" || typeof message === "undefined") {
          return { message };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data) => {
            if (!data) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this, this._def);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  var cuidRegex = /^c[^\s-]{8,}$/i;
  var cuid2Regex = /^[a-z][a-z0-9]*$/;
  var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
  var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  var emojiRegex;
  var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
  var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  var datetimeRegex = (args) => {
    if (args.precision) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
      }
    } else if (args.precision === 0) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
      }
    } else {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
      }
    }
  };
  function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  var ZodString = class _ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(
          ctx2,
          {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          }
          //
        );
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
      return this.refinement((data) => regex.test(data), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
    }
    _addCheck(check) {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      var _a;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options === null || options === void 0 ? void 0 : options.position,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
      return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
    }
    toLowerCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
    }
    toUpperCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodString.create = (params) => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  var ZodNumber = class _ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null, min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  };
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodBigInt = class _ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = BigInt(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  var ZodBoolean = class extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodDate = class _ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new _ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  };
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  var ZodSymbol = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  var ZodUndefined = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  var ZodNull = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  var ZodAny = class extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  var ZodUnknown = class extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  var ZodNever = class extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  var ZodVoid = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  var ZodArray = class _ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new _ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new _ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new _ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
      });
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  var ZodObject = class _ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      return this._cached = { shape, keys };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip")
          ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil.errToObj;
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== void 0 ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new _ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new _ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
      return new _ZodObject({
        ...this._def,
        catchall: index
      });
    }
    pick(mask) {
      const shape = {};
      util.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  var ZodUnion = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  var getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      return Object.keys(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [void 0];
    } else if (type instanceof ZodNull) {
      return [null];
    } else {
      return null;
    }
  };
  var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new _ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  };
  function mergeValues(a, b2) {
    const aType = getParsedType(a);
    const bType = getParsedType(b2);
    if (a === b2) {
      return { valid: true, data: a };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b2);
      const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a, ...b2 };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a[key], b2[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a.length !== b2.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index = 0; index < a.length; index++) {
        const itemA = a[index];
        const itemB = b2[index];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b2) {
      return { valid: true, data: a };
    } else {
      return { valid: false };
    }
  }
  var ZodIntersection = class extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  var ZodTuple = class _ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x2) => !!x2);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new _ZodTuple({
        ...this._def,
        rest
      });
    }
  };
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  var ZodRecord = class _ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new _ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new _ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  };
  var ZodMap = class extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  var ZodSet = class _ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new _ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new _ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  var ZodFunction = class _ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x2) => !!x2),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x2) => !!x2),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e2) => {
            error.addIssue(makeArgsIssue(args, e2));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e2) => {
            error.addIssue(makeReturnsIssue(result, e2));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new _ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new _ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new _ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  };
  var ZodLazy = class extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  var ZodLiteral = class extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  var ZodEnum = class _ZodEnum extends ZodType {
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (this._def.values.indexOf(input.data) === -1) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values) {
      return _ZodEnum.create(values);
    }
    exclude(values) {
      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
  };
  ZodEnum.create = createZodEnum;
  var ZodNativeEnum = class extends ZodType {
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (nativeEnumValues.indexOf(input.data) === -1) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  var ZodPromise = class extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  var ZodEffects = class extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.issues.length) {
          return {
            status: "dirty",
            value: ctx.data
          };
        }
        if (ctx.common.async) {
          return Promise.resolve(processed).then((processed2) => {
            return this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
          });
        } else {
          return this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  var ZodOptional = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  var ZodNullable = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  var ZodDefault = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  var ZodCatch = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  var ZodNaN = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  var BRAND = Symbol("zod_brand");
  var ZodBranded = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  var ZodPipeline = class _ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b2) {
      return new _ZodPipeline({
        in: a,
        out: b2,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  var ZodReadonly = class extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      if (isValid(result)) {
        result.value = Object.freeze(result.value);
      }
      return result;
    }
  };
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  var custom = (check, params = {}, fatal) => {
    if (check)
      return ZodAny.create().superRefine((data, ctx) => {
        var _a, _b;
        if (!check(data)) {
          const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
          const _fatal = (_b = (_a = p2.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
          const p22 = typeof p2 === "string" ? { message: p2 } : p2;
          ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
        }
      });
    return ZodAny.create();
  };
  var late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  var instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data) => data instanceof cls, params);
  var stringType = ZodString.create;
  var numberType = ZodNumber.create;
  var nanType = ZodNaN.create;
  var bigIntType = ZodBigInt.create;
  var booleanType = ZodBoolean.create;
  var dateType = ZodDate.create;
  var symbolType = ZodSymbol.create;
  var undefinedType = ZodUndefined.create;
  var nullType = ZodNull.create;
  var anyType = ZodAny.create;
  var unknownType = ZodUnknown.create;
  var neverType = ZodNever.create;
  var voidType = ZodVoid.create;
  var arrayType = ZodArray.create;
  var objectType = ZodObject.create;
  var strictObjectType = ZodObject.strictCreate;
  var unionType = ZodUnion.create;
  var discriminatedUnionType = ZodDiscriminatedUnion.create;
  var intersectionType = ZodIntersection.create;
  var tupleType = ZodTuple.create;
  var recordType = ZodRecord.create;
  var mapType = ZodMap.create;
  var setType = ZodSet.create;
  var functionType = ZodFunction.create;
  var lazyType = ZodLazy.create;
  var literalType = ZodLiteral.create;
  var enumType = ZodEnum.create;
  var nativeEnumType = ZodNativeEnum.create;
  var promiseType = ZodPromise.create;
  var effectsType = ZodEffects.create;
  var optionalType = ZodOptional.create;
  var nullableType = ZodNullable.create;
  var preprocessType = ZodEffects.createWithPreprocess;
  var pipelineType = ZodPipeline.create;
  var ostring = () => stringType().optional();
  var onumber = () => numberType().optional();
  var oboolean = () => booleanType().optional();
  var coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  var NEVER = INVALID;
  var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util() {
      return util;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });

  // node_modules/@4players/odin-common/lib/esm/schema/serialization.js
  var ByteArraySchema = z.custom((value) => value instanceof Uint8Array);
  var LiteralSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
  var JsonSchema = z.lazy(() => z.union([LiteralSchema, z.array(JsonSchema), z.record(JsonSchema)]));
  var MessagePackRpcSchema = z.union([
    // request with method call
    z.tuple([z.literal(0), z.number(), z.string(), z.unknown()]),
    // response
    z.tuple([z.literal(1), z.number(), z.nullable(z.string()), z.unknown()]),
    // notification
    z.tuple([z.literal(2), z.string(), z.unknown()])
  ]);

  // node_modules/@4players/odin-common/lib/esm/schema/token.js
  var TokenAudienceSchema = z.enum(["sfu", "gateway"]);
  var TokenSubjectSchema = z.enum([
    "connect",
    "roomclose",
    "roomupdate",
    "roombanclient",
    "roomsendmessage"
  ]);
  var TokenClaimsSchema = z.object({
    uid: z.string(),
    cid: z.optional(z.string()),
    rid: oneOrMany(z.string()),
    nsp: z.optional(z.string()),
    adr: z.optional(z.string()),
    aud: z.optional(oneOrMany(TokenAudienceSchema)),
    sub: z.optional(oneOrMany(TokenSubjectSchema)),
    exp: z.optional(z.number()),
    nbf: z.optional(z.number()),
    ups: z.optional(z.string()),
    internal: z.optional(z.object({
      server: z.optional(z.string())
    }))
  });
  function oneOrMany(type) {
    return z.union([type, z.array(type)]);
  }

  // node_modules/@4players/odin-common/lib/esm/schema/media.js
  var MediaIdSchema = numberType();
  var MediaAudioPropertiesSchema = objectType({
    kind: optionalType(literalType("audio")),
    uid: optionalType(stringType()),
    customType: optionalType(stringType())
  });
  var MediaVideoPropertiesSchema = objectType({
    kind: optionalType(literalType("video")),
    codec: optionalType(stringType()),
    uid: optionalType(stringType()),
    customType: optionalType(stringType())
  });
  var MediaPropertiesSchema = unionType([
    MediaAudioPropertiesSchema,
    MediaVideoPropertiesSchema
  ]);
  var MediaSchema = objectType({
    id: MediaIdSchema,
    properties: MediaPropertiesSchema,
    paused: booleanType()
  });

  // node_modules/@4players/odin-common/lib/esm/schema/peer.js
  var PeerIdSchema = numberType();
  var PeerPositionSchema = unionType([
    tupleType([numberType(), numberType(), numberType()]),
    tupleType([numberType(), numberType()])
  ]);
  var PeerSchema = objectType({
    id: PeerIdSchema,
    user_id: stringType(),
    user_data: ByteArraySchema,
    medias: arrayType(MediaSchema)
  });
  var PeerUpdateSchema = discriminatedUnionType("kind", [
    objectType({
      kind: literalType("UserDataChanged"),
      peer_id: PeerIdSchema,
      user_data: ByteArraySchema
    }),
    objectType({
      kind: literalType("MediaStarted"),
      peer_id: PeerIdSchema,
      media: MediaSchema
    }),
    objectType({
      kind: literalType("MediaStopped"),
      peer_id: PeerIdSchema,
      media_id: MediaIdSchema
    })
  ]);

  // node_modules/@4players/odin-common/lib/esm/schema/room.js
  var RoomIdSchema = stringType();
  var RoomSchema = objectType({
    id: RoomIdSchema,
    customer: stringType(),
    user_data: ByteArraySchema,
    peers: arrayType(PeerSchema)
  });
  var RoomUpdateSchema = discriminatedUnionType("kind", [
    objectType({
      kind: literalType("Joined"),
      room: RoomSchema,
      media_ids: arrayType(MediaIdSchema),
      own_peer_id: PeerIdSchema
    }),
    objectType({
      kind: literalType("Left"),
      reason: enumType(["RoomClosing", "ServerClosing", "PeerKicked"])
    }),
    objectType({
      kind: literalType("UserDataChanged"),
      user_data: optionalType(ByteArraySchema)
    }),
    objectType({
      kind: literalType("PeerJoined"),
      peer: PeerSchema
    }),
    objectType({
      kind: literalType("PeerLeft"),
      peer_id: PeerIdSchema
    })
  ]);
  var RoomUpdatesSchema = objectType({
    updates: arrayType(RoomUpdateSchema)
  });
  var RoomStatusSchema = enumType(["Joining", "Joined", "Closed"]);
  var RoomStatusChangedSchema = objectType({
    status: RoomStatusSchema,
    message: optionalType(stringType())
  });

  // node_modules/@4players/odin-common/lib/esm/schema/message.js
  var MessageReceivedSchema = z.object({
    sender_peer_id: PeerIdSchema,
    message: ByteArraySchema
  });

  // node_modules/@4players/odin-common/lib/esm/schema/webrtc.js
  var WebRtcUpdateSchema = discriminatedUnionType("kind", [
    objectType({
      kind: literalType("Sdp"),
      type: enumType(["Answer", "Offer"]),
      sdp: stringType(),
      media_map: arrayType(tupleType([MediaIdSchema, stringType()]))
    }),
    objectType({
      kind: literalType("Trickle"),
      candidate: stringType(),
      spd_mid: optionalType(stringType()),
      spd_mline_index: optionalType(numberType()),
      username_fragment: optionalType(unionType([stringType(), nullType()]))
    }),
    objectType({
      kind: literalType("TrickleFinished")
    })
  ]);

  // node_modules/@4players/odin-common/lib/esm/rpc/commands.js
  var MainCommandsRpc = {
    JoinRoom: {
      request: z.object({
        token: z.string(),
        room_id: RoomIdSchema,
        user_data: ByteArraySchema,
        position: PeerPositionSchema
      }),
      response: z.object({
        peer_id: PeerIdSchema,
        stream_id: z.optional(z.number()),
        token: z.optional(z.string())
      })
    },
    WebRtcUpdate: {
      request: WebRtcUpdateSchema,
      response: z.null()
    },
    RequestReconnectToken: {
      request: z.object({ peer_id: z.optional(PeerIdSchema) }),
      response: z.string()
    },
    Ping: {
      request: z.object({}),
      response: z.null()
    }
  };
  var RoomCommandsRpc = {
    UpdatePeer: {
      request: z.object({ user_data: ByteArraySchema }),
      response: z.null()
    },
    StartMedia: {
      request: z.object({
        media_id: MediaIdSchema,
        properties: MediaPropertiesSchema
      }),
      response: z.null()
    },
    StopMedia: {
      request: z.object({
        media_id: MediaIdSchema
      }),
      response: z.null()
    },
    PauseMedia: {
      request: z.object({
        media_id: MediaIdSchema
      }),
      response: z.null()
    },
    ResumeMedia: {
      request: z.object({
        media_id: MediaIdSchema
      }),
      response: z.null()
    },
    SetPeerPosition: {
      request: z.object({
        position: PeerPositionSchema
      }),
      response: z.null()
    },
    SendMessage: {
      request: z.object({
        target_peer_ids: z.optional(z.array(PeerIdSchema)),
        message: ByteArraySchema
      }),
      response: z.null()
    }
  };

  // node_modules/@4players/odin-common/lib/esm/rpc/notifications.js
  var MainNotificationSchema = objectType({
    name: literalType("WebRtcUpdate"),
    properties: WebRtcUpdateSchema
  });
  var MainNotificationsRpc = {
    WebRtcUpdate: WebRtcUpdateSchema
  };
  var RoomNotificationSchema = unionType([
    objectType({
      name: literalType("RoomStatusChanged"),
      properties: RoomStatusChangedSchema
    }),
    objectType({
      name: literalType("RoomUpdated"),
      properties: RoomUpdatesSchema
    }),
    objectType({
      name: literalType("PeerUpdated"),
      properties: PeerUpdateSchema
    }),
    objectType({
      name: literalType("MessageReceived"),
      properties: MessageReceivedSchema
    })
  ]);
  var RoomNotificationsRpc = {
    RoomStatusChanged: RoomStatusChangedSchema,
    RoomUpdated: RoomUpdatesSchema,
    PeerUpdated: PeerUpdateSchema,
    MessageReceived: MessageReceivedSchema
  };

  // node_modules/@4players/odin-common/lib/esm/utility/result.js
  function assert(condition, message) {
    if (!condition) {
      fail(message);
    }
  }
  function fail(message) {
    throw new Error(message);
  }
  function success(value) {
    return { type: "Success", value };
  }
  function failure(reason) {
    return { type: "Failure", reason };
  }
  function unwrap(result) {
    if (result.type === "Failure") {
      fail(result.reason);
    }
    return result.value;
  }

  // node_modules/@4players/odin-common/lib/esm/utility/base64.js
  function fromBase64Url(base64uri) {
    try {
      const binString = atob(base64uri.replace(/-/g, "+").replace(/_/g, "/"));
      const bytes = Uint8Array.from(binString, (m2) => m2.codePointAt(0));
      const decoder = new TextDecoder("utf8");
      return success(decoder.decode(bytes));
    } catch (error) {
      return failure(String(error));
    }
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/utils/utf8.mjs
  function utf8Count(str) {
    var strLength = str.length;
    var byteLength = 0;
    var pos = 0;
    while (pos < strLength) {
      var value = str.charCodeAt(pos++);
      if ((value & 4294967168) === 0) {
        byteLength++;
        continue;
      } else if ((value & 4294965248) === 0) {
        byteLength += 2;
      } else {
        if (value >= 55296 && value <= 56319) {
          if (pos < strLength) {
            var extra = str.charCodeAt(pos);
            if ((extra & 64512) === 56320) {
              ++pos;
              value = ((value & 1023) << 10) + (extra & 1023) + 65536;
            }
          }
        }
        if ((value & 4294901760) === 0) {
          byteLength += 3;
        } else {
          byteLength += 4;
        }
      }
    }
    return byteLength;
  }
  function utf8EncodeJs(str, output, outputOffset) {
    var strLength = str.length;
    var offset = outputOffset;
    var pos = 0;
    while (pos < strLength) {
      var value = str.charCodeAt(pos++);
      if ((value & 4294967168) === 0) {
        output[offset++] = value;
        continue;
      } else if ((value & 4294965248) === 0) {
        output[offset++] = value >> 6 & 31 | 192;
      } else {
        if (value >= 55296 && value <= 56319) {
          if (pos < strLength) {
            var extra = str.charCodeAt(pos);
            if ((extra & 64512) === 56320) {
              ++pos;
              value = ((value & 1023) << 10) + (extra & 1023) + 65536;
            }
          }
        }
        if ((value & 4294901760) === 0) {
          output[offset++] = value >> 12 & 15 | 224;
          output[offset++] = value >> 6 & 63 | 128;
        } else {
          output[offset++] = value >> 18 & 7 | 240;
          output[offset++] = value >> 12 & 63 | 128;
          output[offset++] = value >> 6 & 63 | 128;
        }
      }
      output[offset++] = value & 63 | 128;
    }
  }
  var sharedTextEncoder = new TextEncoder();
  var TEXT_ENCODER_THRESHOLD = 50;
  function utf8EncodeTE(str, output, outputOffset) {
    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
  }
  function utf8Encode(str, output, outputOffset) {
    if (str.length > TEXT_ENCODER_THRESHOLD) {
      utf8EncodeTE(str, output, outputOffset);
    } else {
      utf8EncodeJs(str, output, outputOffset);
    }
  }
  var CHUNK_SIZE = 4096;
  function utf8DecodeJs(bytes, inputOffset, byteLength) {
    var offset = inputOffset;
    var end = offset + byteLength;
    var units = [];
    var result = "";
    while (offset < end) {
      var byte1 = bytes[offset++];
      if ((byte1 & 128) === 0) {
        units.push(byte1);
      } else if ((byte1 & 224) === 192) {
        var byte2 = bytes[offset++] & 63;
        units.push((byte1 & 31) << 6 | byte2);
      } else if ((byte1 & 240) === 224) {
        var byte2 = bytes[offset++] & 63;
        var byte3 = bytes[offset++] & 63;
        units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
      } else if ((byte1 & 248) === 240) {
        var byte2 = bytes[offset++] & 63;
        var byte3 = bytes[offset++] & 63;
        var byte4 = bytes[offset++] & 63;
        var unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
        if (unit > 65535) {
          unit -= 65536;
          units.push(unit >>> 10 & 1023 | 55296);
          unit = 56320 | unit & 1023;
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }
      if (units.length >= CHUNK_SIZE) {
        result += String.fromCharCode.apply(String, units);
        units.length = 0;
      }
    }
    if (units.length > 0) {
      result += String.fromCharCode.apply(String, units);
    }
    return result;
  }
  var sharedTextDecoder = new TextDecoder();
  var TEXT_DECODER_THRESHOLD = 200;
  function utf8DecodeTD(bytes, inputOffset, byteLength) {
    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
    return sharedTextDecoder.decode(stringBytes);
  }
  function utf8Decode(bytes, inputOffset, byteLength) {
    if (byteLength > TEXT_DECODER_THRESHOLD) {
      return utf8DecodeTD(bytes, inputOffset, byteLength);
    } else {
      return utf8DecodeJs(bytes, inputOffset, byteLength);
    }
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/ExtData.mjs
  var ExtData = (
    /** @class */
    /* @__PURE__ */ function() {
      function ExtData2(type, data) {
        this.type = type;
        this.data = data;
      }
      return ExtData2;
    }()
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/DecodeError.mjs
  var __extends = /* @__PURE__ */ function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var DecodeError = (
    /** @class */
    function(_super) {
      __extends(DecodeError2, _super);
      function DecodeError2(message) {
        var _this = _super.call(this, message) || this;
        var proto = Object.create(DecodeError2.prototype);
        Object.setPrototypeOf(_this, proto);
        Object.defineProperty(_this, "name", {
          configurable: true,
          enumerable: false,
          value: DecodeError2.name
        });
        return _this;
      }
      return DecodeError2;
    }(Error)
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/utils/int.mjs
  var UINT32_MAX = 4294967295;
  function setUint64(view, offset, value) {
    var high = value / 4294967296;
    var low = value;
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
  }
  function setInt64(view, offset, value) {
    var high = Math.floor(value / 4294967296);
    var low = value;
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
  }
  function getInt64(view, offset) {
    var high = view.getInt32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
  }
  function getUint64(view, offset) {
    var high = view.getUint32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/timestamp.mjs
  var EXT_TIMESTAMP = -1;
  var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
  var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
  function encodeTimeSpecToTimestamp(_a) {
    var sec = _a.sec, nsec = _a.nsec;
    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
      if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
        var rv = new Uint8Array(4);
        var view = new DataView(rv.buffer);
        view.setUint32(0, sec);
        return rv;
      } else {
        var secHigh = sec / 4294967296;
        var secLow = sec & 4294967295;
        var rv = new Uint8Array(8);
        var view = new DataView(rv.buffer);
        view.setUint32(0, nsec << 2 | secHigh & 3);
        view.setUint32(4, secLow);
        return rv;
      }
    } else {
      var rv = new Uint8Array(12);
      var view = new DataView(rv.buffer);
      view.setUint32(0, nsec);
      setInt64(view, 4, sec);
      return rv;
    }
  }
  function encodeDateToTimeSpec(date) {
    var msec = date.getTime();
    var sec = Math.floor(msec / 1e3);
    var nsec = (msec - sec * 1e3) * 1e6;
    var nsecInSec = Math.floor(nsec / 1e9);
    return {
      sec: sec + nsecInSec,
      nsec: nsec - nsecInSec * 1e9
    };
  }
  function encodeTimestampExtension(object) {
    if (object instanceof Date) {
      var timeSpec = encodeDateToTimeSpec(object);
      return encodeTimeSpecToTimestamp(timeSpec);
    } else {
      return null;
    }
  }
  function decodeTimestampToTimeSpec(data) {
    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
    switch (data.byteLength) {
      case 4: {
        var sec = view.getUint32(0);
        var nsec = 0;
        return { sec, nsec };
      }
      case 8: {
        var nsec30AndSecHigh2 = view.getUint32(0);
        var secLow32 = view.getUint32(4);
        var sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
        var nsec = nsec30AndSecHigh2 >>> 2;
        return { sec, nsec };
      }
      case 12: {
        var sec = getInt64(view, 4);
        var nsec = view.getUint32(0);
        return { sec, nsec };
      }
      default:
        throw new DecodeError("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(data.length));
    }
  }
  function decodeTimestampExtension(data) {
    var timeSpec = decodeTimestampToTimeSpec(data);
    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
  }
  var timestampExtension = {
    type: EXT_TIMESTAMP,
    encode: encodeTimestampExtension,
    decode: decodeTimestampExtension
  };

  // node_modules/@msgpack/msgpack/dist.es5+esm/ExtensionCodec.mjs
  var ExtensionCodec = (
    /** @class */
    function() {
      function ExtensionCodec2() {
        this.builtInEncoders = [];
        this.builtInDecoders = [];
        this.encoders = [];
        this.decoders = [];
        this.register(timestampExtension);
      }
      ExtensionCodec2.prototype.register = function(_a) {
        var type = _a.type, encode2 = _a.encode, decode2 = _a.decode;
        if (type >= 0) {
          this.encoders[type] = encode2;
          this.decoders[type] = decode2;
        } else {
          var index = 1 + type;
          this.builtInEncoders[index] = encode2;
          this.builtInDecoders[index] = decode2;
        }
      };
      ExtensionCodec2.prototype.tryToEncode = function(object, context) {
        for (var i = 0; i < this.builtInEncoders.length; i++) {
          var encodeExt = this.builtInEncoders[i];
          if (encodeExt != null) {
            var data = encodeExt(object, context);
            if (data != null) {
              var type = -1 - i;
              return new ExtData(type, data);
            }
          }
        }
        for (var i = 0; i < this.encoders.length; i++) {
          var encodeExt = this.encoders[i];
          if (encodeExt != null) {
            var data = encodeExt(object, context);
            if (data != null) {
              var type = i;
              return new ExtData(type, data);
            }
          }
        }
        if (object instanceof ExtData) {
          return object;
        }
        return null;
      };
      ExtensionCodec2.prototype.decode = function(data, type, context) {
        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
        if (decodeExt) {
          return decodeExt(data, type, context);
        } else {
          return new ExtData(type, data);
        }
      };
      ExtensionCodec2.defaultCodec = new ExtensionCodec2();
      return ExtensionCodec2;
    }()
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/utils/typedArrays.mjs
  function ensureUint8Array(buffer) {
    if (buffer instanceof Uint8Array) {
      return buffer;
    } else if (ArrayBuffer.isView(buffer)) {
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    } else if (buffer instanceof ArrayBuffer) {
      return new Uint8Array(buffer);
    } else {
      return Uint8Array.from(buffer);
    }
  }
  function createDataView(buffer) {
    if (buffer instanceof ArrayBuffer) {
      return new DataView(buffer);
    }
    var bufferView = ensureUint8Array(buffer);
    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/Encoder.mjs
  var DEFAULT_MAX_DEPTH = 100;
  var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
  var Encoder = (
    /** @class */
    function() {
      function Encoder2(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;
        this.context = options === null || options === void 0 ? void 0 : options.context;
        this.useBigInt64 = (_b = options === null || options === void 0 ? void 0 : options.useBigInt64) !== null && _b !== void 0 ? _b : false;
        this.maxDepth = (_c = options === null || options === void 0 ? void 0 : options.maxDepth) !== null && _c !== void 0 ? _c : DEFAULT_MAX_DEPTH;
        this.initialBufferSize = (_d = options === null || options === void 0 ? void 0 : options.initialBufferSize) !== null && _d !== void 0 ? _d : DEFAULT_INITIAL_BUFFER_SIZE;
        this.sortKeys = (_e = options === null || options === void 0 ? void 0 : options.sortKeys) !== null && _e !== void 0 ? _e : false;
        this.forceFloat32 = (_f = options === null || options === void 0 ? void 0 : options.forceFloat32) !== null && _f !== void 0 ? _f : false;
        this.ignoreUndefined = (_g = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _g !== void 0 ? _g : false;
        this.forceIntegerToFloat = (_h = options === null || options === void 0 ? void 0 : options.forceIntegerToFloat) !== null && _h !== void 0 ? _h : false;
        this.pos = 0;
        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
        this.bytes = new Uint8Array(this.view.buffer);
      }
      Encoder2.prototype.reinitializeState = function() {
        this.pos = 0;
      };
      Encoder2.prototype.encodeSharedRef = function(object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.subarray(0, this.pos);
      };
      Encoder2.prototype.encode = function(object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.slice(0, this.pos);
      };
      Encoder2.prototype.doEncode = function(object, depth) {
        if (depth > this.maxDepth) {
          throw new Error("Too deep objects in depth ".concat(depth));
        }
        if (object == null) {
          this.encodeNil();
        } else if (typeof object === "boolean") {
          this.encodeBoolean(object);
        } else if (typeof object === "number") {
          if (!this.forceIntegerToFloat) {
            this.encodeNumber(object);
          } else {
            this.encodeNumberAsFloat(object);
          }
        } else if (typeof object === "string") {
          this.encodeString(object);
        } else if (this.useBigInt64 && typeof object === "bigint") {
          this.encodeBigInt64(object);
        } else {
          this.encodeObject(object, depth);
        }
      };
      Encoder2.prototype.ensureBufferSizeToWrite = function(sizeToWrite) {
        var requiredSize = this.pos + sizeToWrite;
        if (this.view.byteLength < requiredSize) {
          this.resizeBuffer(requiredSize * 2);
        }
      };
      Encoder2.prototype.resizeBuffer = function(newSize) {
        var newBuffer = new ArrayBuffer(newSize);
        var newBytes = new Uint8Array(newBuffer);
        var newView = new DataView(newBuffer);
        newBytes.set(this.bytes);
        this.view = newView;
        this.bytes = newBytes;
      };
      Encoder2.prototype.encodeNil = function() {
        this.writeU8(192);
      };
      Encoder2.prototype.encodeBoolean = function(object) {
        if (object === false) {
          this.writeU8(194);
        } else {
          this.writeU8(195);
        }
      };
      Encoder2.prototype.encodeNumber = function(object) {
        if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
          if (object >= 0) {
            if (object < 128) {
              this.writeU8(object);
            } else if (object < 256) {
              this.writeU8(204);
              this.writeU8(object);
            } else if (object < 65536) {
              this.writeU8(205);
              this.writeU16(object);
            } else if (object < 4294967296) {
              this.writeU8(206);
              this.writeU32(object);
            } else if (!this.useBigInt64) {
              this.writeU8(207);
              this.writeU64(object);
            } else {
              this.encodeNumberAsFloat(object);
            }
          } else {
            if (object >= -32) {
              this.writeU8(224 | object + 32);
            } else if (object >= -128) {
              this.writeU8(208);
              this.writeI8(object);
            } else if (object >= -32768) {
              this.writeU8(209);
              this.writeI16(object);
            } else if (object >= -2147483648) {
              this.writeU8(210);
              this.writeI32(object);
            } else if (!this.useBigInt64) {
              this.writeU8(211);
              this.writeI64(object);
            } else {
              this.encodeNumberAsFloat(object);
            }
          }
        } else {
          this.encodeNumberAsFloat(object);
        }
      };
      Encoder2.prototype.encodeNumberAsFloat = function(object) {
        if (this.forceFloat32) {
          this.writeU8(202);
          this.writeF32(object);
        } else {
          this.writeU8(203);
          this.writeF64(object);
        }
      };
      Encoder2.prototype.encodeBigInt64 = function(object) {
        if (object >= BigInt(0)) {
          this.writeU8(207);
          this.writeBigUint64(object);
        } else {
          this.writeU8(211);
          this.writeBigInt64(object);
        }
      };
      Encoder2.prototype.writeStringHeader = function(byteLength) {
        if (byteLength < 32) {
          this.writeU8(160 + byteLength);
        } else if (byteLength < 256) {
          this.writeU8(217);
          this.writeU8(byteLength);
        } else if (byteLength < 65536) {
          this.writeU8(218);
          this.writeU16(byteLength);
        } else if (byteLength < 4294967296) {
          this.writeU8(219);
          this.writeU32(byteLength);
        } else {
          throw new Error("Too long string: ".concat(byteLength, " bytes in UTF-8"));
        }
      };
      Encoder2.prototype.encodeString = function(object) {
        var maxHeaderSize = 1 + 4;
        var byteLength = utf8Count(object);
        this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
        this.writeStringHeader(byteLength);
        utf8Encode(object, this.bytes, this.pos);
        this.pos += byteLength;
      };
      Encoder2.prototype.encodeObject = function(object, depth) {
        var ext = this.extensionCodec.tryToEncode(object, this.context);
        if (ext != null) {
          this.encodeExtension(ext);
        } else if (Array.isArray(object)) {
          this.encodeArray(object, depth);
        } else if (ArrayBuffer.isView(object)) {
          this.encodeBinary(object);
        } else if (typeof object === "object") {
          this.encodeMap(object, depth);
        } else {
          throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(object)));
        }
      };
      Encoder2.prototype.encodeBinary = function(object) {
        var size = object.byteLength;
        if (size < 256) {
          this.writeU8(196);
          this.writeU8(size);
        } else if (size < 65536) {
          this.writeU8(197);
          this.writeU16(size);
        } else if (size < 4294967296) {
          this.writeU8(198);
          this.writeU32(size);
        } else {
          throw new Error("Too large binary: ".concat(size));
        }
        var bytes = ensureUint8Array(object);
        this.writeU8a(bytes);
      };
      Encoder2.prototype.encodeArray = function(object, depth) {
        var size = object.length;
        if (size < 16) {
          this.writeU8(144 + size);
        } else if (size < 65536) {
          this.writeU8(220);
          this.writeU16(size);
        } else if (size < 4294967296) {
          this.writeU8(221);
          this.writeU32(size);
        } else {
          throw new Error("Too large array: ".concat(size));
        }
        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
          var item = object_1[_i];
          this.doEncode(item, depth + 1);
        }
      };
      Encoder2.prototype.countWithoutUndefined = function(object, keys) {
        var count = 0;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (object[key] !== void 0) {
            count++;
          }
        }
        return count;
      };
      Encoder2.prototype.encodeMap = function(object, depth) {
        var keys = Object.keys(object);
        if (this.sortKeys) {
          keys.sort();
        }
        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
        if (size < 16) {
          this.writeU8(128 + size);
        } else if (size < 65536) {
          this.writeU8(222);
          this.writeU16(size);
        } else if (size < 4294967296) {
          this.writeU8(223);
          this.writeU32(size);
        } else {
          throw new Error("Too large map object: ".concat(size));
        }
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var key = keys_2[_i];
          var value = object[key];
          if (!(this.ignoreUndefined && value === void 0)) {
            this.encodeString(key);
            this.doEncode(value, depth + 1);
          }
        }
      };
      Encoder2.prototype.encodeExtension = function(ext) {
        var size = ext.data.length;
        if (size === 1) {
          this.writeU8(212);
        } else if (size === 2) {
          this.writeU8(213);
        } else if (size === 4) {
          this.writeU8(214);
        } else if (size === 8) {
          this.writeU8(215);
        } else if (size === 16) {
          this.writeU8(216);
        } else if (size < 256) {
          this.writeU8(199);
          this.writeU8(size);
        } else if (size < 65536) {
          this.writeU8(200);
          this.writeU16(size);
        } else if (size < 4294967296) {
          this.writeU8(201);
          this.writeU32(size);
        } else {
          throw new Error("Too large extension object: ".concat(size));
        }
        this.writeI8(ext.type);
        this.writeU8a(ext.data);
      };
      Encoder2.prototype.writeU8 = function(value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setUint8(this.pos, value);
        this.pos++;
      };
      Encoder2.prototype.writeU8a = function(values) {
        var size = values.length;
        this.ensureBufferSizeToWrite(size);
        this.bytes.set(values, this.pos);
        this.pos += size;
      };
      Encoder2.prototype.writeI8 = function(value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setInt8(this.pos, value);
        this.pos++;
      };
      Encoder2.prototype.writeU16 = function(value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setUint16(this.pos, value);
        this.pos += 2;
      };
      Encoder2.prototype.writeI16 = function(value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setInt16(this.pos, value);
        this.pos += 2;
      };
      Encoder2.prototype.writeU32 = function(value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setUint32(this.pos, value);
        this.pos += 4;
      };
      Encoder2.prototype.writeI32 = function(value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setInt32(this.pos, value);
        this.pos += 4;
      };
      Encoder2.prototype.writeF32 = function(value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setFloat32(this.pos, value);
        this.pos += 4;
      };
      Encoder2.prototype.writeF64 = function(value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setFloat64(this.pos, value);
        this.pos += 8;
      };
      Encoder2.prototype.writeU64 = function(value) {
        this.ensureBufferSizeToWrite(8);
        setUint64(this.view, this.pos, value);
        this.pos += 8;
      };
      Encoder2.prototype.writeI64 = function(value) {
        this.ensureBufferSizeToWrite(8);
        setInt64(this.view, this.pos, value);
        this.pos += 8;
      };
      Encoder2.prototype.writeBigUint64 = function(value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setBigUint64(this.pos, value);
        this.pos += 8;
      };
      Encoder2.prototype.writeBigInt64 = function(value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setBigInt64(this.pos, value);
        this.pos += 8;
      };
      return Encoder2;
    }()
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/encode.mjs
  function encode(value, options) {
    var encoder = new Encoder(options);
    return encoder.encodeSharedRef(value);
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/utils/prettyByte.mjs
  function prettyByte(byte) {
    return "".concat(byte < 0 ? "-" : "", "0x").concat(Math.abs(byte).toString(16).padStart(2, "0"));
  }

  // node_modules/@msgpack/msgpack/dist.es5+esm/CachedKeyDecoder.mjs
  var DEFAULT_MAX_KEY_LENGTH = 16;
  var DEFAULT_MAX_LENGTH_PER_KEY = 16;
  var CachedKeyDecoder = (
    /** @class */
    function() {
      function CachedKeyDecoder2(maxKeyLength, maxLengthPerKey) {
        if (maxKeyLength === void 0) {
          maxKeyLength = DEFAULT_MAX_KEY_LENGTH;
        }
        if (maxLengthPerKey === void 0) {
          maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY;
        }
        this.maxKeyLength = maxKeyLength;
        this.maxLengthPerKey = maxLengthPerKey;
        this.hit = 0;
        this.miss = 0;
        this.caches = [];
        for (var i = 0; i < this.maxKeyLength; i++) {
          this.caches.push([]);
        }
      }
      CachedKeyDecoder2.prototype.canBeCached = function(byteLength) {
        return byteLength > 0 && byteLength <= this.maxKeyLength;
      };
      CachedKeyDecoder2.prototype.find = function(bytes, inputOffset, byteLength) {
        var records = this.caches[byteLength - 1];
        FIND_CHUNK:
          for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {
            var record = records_1[_i];
            var recordBytes = record.bytes;
            for (var j2 = 0; j2 < byteLength; j2++) {
              if (recordBytes[j2] !== bytes[inputOffset + j2]) {
                continue FIND_CHUNK;
              }
            }
            return record.str;
          }
        return null;
      };
      CachedKeyDecoder2.prototype.store = function(bytes, value) {
        var records = this.caches[bytes.length - 1];
        var record = { bytes, str: value };
        if (records.length >= this.maxLengthPerKey) {
          records[Math.random() * records.length | 0] = record;
        } else {
          records.push(record);
        }
      };
      CachedKeyDecoder2.prototype.decode = function(bytes, inputOffset, byteLength) {
        var cachedValue = this.find(bytes, inputOffset, byteLength);
        if (cachedValue != null) {
          this.hit++;
          return cachedValue;
        }
        this.miss++;
        var str = utf8DecodeJs(bytes, inputOffset, byteLength);
        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
        this.store(slicedCopyOfBytes, str);
        return str;
      };
      return CachedKeyDecoder2;
    }()
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/Decoder.mjs
  var __awaiter = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __generator = function(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f2, y2, t, g15;
    return g15 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g15[Symbol.iterator] = function() {
      return this;
    }), g15;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (g15 && (g15 = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
            return t;
          if (y2 = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t[1]) {
                _2.label = t[1];
                t = op;
                break;
              }
              if (t && _2.label < t[2]) {
                _2.label = t[2];
                _2.ops.push(op);
                break;
              }
              if (t[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f2 = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __asyncValues = function(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n2) {
      i[n2] = o2[n2] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  };
  var __await = function(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  };
  var __asyncGenerator = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g15 = generator.apply(thisArg, _arguments || []), i, q2 = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n2) {
      if (g15[n2])
        i[n2] = function(v2) {
          return new Promise(function(a, b2) {
            q2.push([n2, v2, a, b2]) > 1 || resume(n2, v2);
          });
        };
    }
    function resume(n2, v2) {
      try {
        step(g15[n2](v2));
      } catch (e2) {
        settle(q2[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f2, v2) {
      if (f2(v2), q2.shift(), q2.length)
        resume(q2[0][0], q2[0][1]);
    }
  };
  var STATE_ARRAY = "array";
  var STATE_MAP_KEY = "map_key";
  var STATE_MAP_VALUE = "map_value";
  var isValidMapKeyType = function(key) {
    return typeof key === "string" || typeof key === "number";
  };
  var HEAD_BYTE_REQUIRED = -1;
  var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
  var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
  try {
    EMPTY_VIEW.getInt8(0);
  } catch (e2) {
    if (!(e2 instanceof RangeError)) {
      throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
    }
  }
  var DataViewIndexOutOfBoundsError = RangeError;
  var MORE_DATA = new DataViewIndexOutOfBoundsError("Insufficient data");
  var sharedCachedKeyDecoder = new CachedKeyDecoder();
  var Decoder = (
    /** @class */
    function() {
      function Decoder2(options) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.totalPos = 0;
        this.pos = 0;
        this.view = EMPTY_VIEW;
        this.bytes = EMPTY_BYTES;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.stack = [];
        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;
        this.context = options === null || options === void 0 ? void 0 : options.context;
        this.useBigInt64 = (_b = options === null || options === void 0 ? void 0 : options.useBigInt64) !== null && _b !== void 0 ? _b : false;
        this.maxStrLength = (_c = options === null || options === void 0 ? void 0 : options.maxStrLength) !== null && _c !== void 0 ? _c : UINT32_MAX;
        this.maxBinLength = (_d = options === null || options === void 0 ? void 0 : options.maxBinLength) !== null && _d !== void 0 ? _d : UINT32_MAX;
        this.maxArrayLength = (_e = options === null || options === void 0 ? void 0 : options.maxArrayLength) !== null && _e !== void 0 ? _e : UINT32_MAX;
        this.maxMapLength = (_f = options === null || options === void 0 ? void 0 : options.maxMapLength) !== null && _f !== void 0 ? _f : UINT32_MAX;
        this.maxExtLength = (_g = options === null || options === void 0 ? void 0 : options.maxExtLength) !== null && _g !== void 0 ? _g : UINT32_MAX;
        this.keyDecoder = (options === null || options === void 0 ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
      }
      Decoder2.prototype.reinitializeState = function() {
        this.totalPos = 0;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.stack.length = 0;
      };
      Decoder2.prototype.setBuffer = function(buffer) {
        this.bytes = ensureUint8Array(buffer);
        this.view = createDataView(this.bytes);
        this.pos = 0;
      };
      Decoder2.prototype.appendBuffer = function(buffer) {
        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
          this.setBuffer(buffer);
        } else {
          var remainingData = this.bytes.subarray(this.pos);
          var newData = ensureUint8Array(buffer);
          var newBuffer = new Uint8Array(remainingData.length + newData.length);
          newBuffer.set(remainingData);
          newBuffer.set(newData, remainingData.length);
          this.setBuffer(newBuffer);
        }
      };
      Decoder2.prototype.hasRemaining = function(size) {
        return this.view.byteLength - this.pos >= size;
      };
      Decoder2.prototype.createExtraByteError = function(posToShow) {
        var _a = this, view = _a.view, pos = _a.pos;
        return new RangeError("Extra ".concat(view.byteLength - pos, " of ").concat(view.byteLength, " byte(s) found at buffer[").concat(posToShow, "]"));
      };
      Decoder2.prototype.decode = function(buffer) {
        this.reinitializeState();
        this.setBuffer(buffer);
        var object = this.doDecodeSync();
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.pos);
        }
        return object;
      };
      Decoder2.prototype.decodeMulti = function(buffer) {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.reinitializeState();
              this.setBuffer(buffer);
              _a.label = 1;
            case 1:
              if (!this.hasRemaining(1))
                return [3, 3];
              return [4, this.doDecodeSync()];
            case 2:
              _a.sent();
              return [3, 1];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      };
      Decoder2.prototype.decodeAsync = function(stream) {
        var _a, stream_1, stream_1_1;
        var _b, e_1, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var decoded, object, buffer, e_1_1, _e, headByte, pos, totalPos;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                decoded = false;
                _f.label = 1;
              case 1:
                _f.trys.push([1, 6, 7, 12]);
                _a = true, stream_1 = __asyncValues(stream);
                _f.label = 2;
              case 2:
                return [4, stream_1.next()];
              case 3:
                if (!(stream_1_1 = _f.sent(), _b = stream_1_1.done, !_b))
                  return [3, 5];
                _d = stream_1_1.value;
                _a = false;
                try {
                  buffer = _d;
                  if (decoded) {
                    throw this.createExtraByteError(this.totalPos);
                  }
                  this.appendBuffer(buffer);
                  try {
                    object = this.doDecodeSync();
                    decoded = true;
                  } catch (e2) {
                    if (!(e2 instanceof DataViewIndexOutOfBoundsError)) {
                      throw e2;
                    }
                  }
                  this.totalPos += this.pos;
                } finally {
                  _a = true;
                }
                _f.label = 4;
              case 4:
                return [3, 2];
              case 5:
                return [3, 12];
              case 6:
                e_1_1 = _f.sent();
                e_1 = { error: e_1_1 };
                return [3, 12];
              case 7:
                _f.trys.push([7, , 10, 11]);
                if (!(!_a && !_b && (_c = stream_1.return)))
                  return [3, 9];
                return [4, _c.call(stream_1)];
              case 8:
                _f.sent();
                _f.label = 9;
              case 9:
                return [3, 11];
              case 10:
                if (e_1)
                  throw e_1.error;
                return [
                  7
                  /*endfinally*/
                ];
              case 11:
                return [
                  7
                  /*endfinally*/
                ];
              case 12:
                if (decoded) {
                  if (this.hasRemaining(1)) {
                    throw this.createExtraByteError(this.totalPos);
                  }
                  return [2, object];
                }
                _e = this, headByte = _e.headByte, pos = _e.pos, totalPos = _e.totalPos;
                throw new RangeError("Insufficient data in parsing ".concat(prettyByte(headByte), " at ").concat(totalPos, " (").concat(pos, " in the current buffer)"));
            }
          });
        });
      };
      Decoder2.prototype.decodeArrayStream = function(stream) {
        return this.decodeMultiAsync(stream, true);
      };
      Decoder2.prototype.decodeStream = function(stream) {
        return this.decodeMultiAsync(stream, false);
      };
      Decoder2.prototype.decodeMultiAsync = function(stream, isArray) {
        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {
          var isArrayHeaderRequired, arrayItemsLeft, _a, stream_2, stream_2_1, buffer, e_2, e_3_1;
          var _b, e_3, _c, _d;
          return __generator(this, function(_e) {
            switch (_e.label) {
              case 0:
                isArrayHeaderRequired = isArray;
                arrayItemsLeft = -1;
                _e.label = 1;
              case 1:
                _e.trys.push([1, 15, 16, 21]);
                _a = true, stream_2 = __asyncValues(stream);
                _e.label = 2;
              case 2:
                return [4, __await(stream_2.next())];
              case 3:
                if (!(stream_2_1 = _e.sent(), _b = stream_2_1.done, !_b))
                  return [3, 14];
                _d = stream_2_1.value;
                _a = false;
                _e.label = 4;
              case 4:
                _e.trys.push([4, , 12, 13]);
                buffer = _d;
                if (isArray && arrayItemsLeft === 0) {
                  throw this.createExtraByteError(this.totalPos);
                }
                this.appendBuffer(buffer);
                if (isArrayHeaderRequired) {
                  arrayItemsLeft = this.readArraySize();
                  isArrayHeaderRequired = false;
                  this.complete();
                }
                _e.label = 5;
              case 5:
                _e.trys.push([5, 10, , 11]);
                _e.label = 6;
              case 6:
                if (false)
                  return [3, 9];
                return [4, __await(this.doDecodeSync())];
              case 7:
                return [4, _e.sent()];
              case 8:
                _e.sent();
                if (--arrayItemsLeft === 0) {
                  return [3, 9];
                }
                return [3, 6];
              case 9:
                return [3, 11];
              case 10:
                e_2 = _e.sent();
                if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {
                  throw e_2;
                }
                return [3, 11];
              case 11:
                this.totalPos += this.pos;
                return [3, 13];
              case 12:
                _a = true;
                return [
                  7
                  /*endfinally*/
                ];
              case 13:
                return [3, 2];
              case 14:
                return [3, 21];
              case 15:
                e_3_1 = _e.sent();
                e_3 = { error: e_3_1 };
                return [3, 21];
              case 16:
                _e.trys.push([16, , 19, 20]);
                if (!(!_a && !_b && (_c = stream_2.return)))
                  return [3, 18];
                return [4, __await(_c.call(stream_2))];
              case 17:
                _e.sent();
                _e.label = 18;
              case 18:
                return [3, 20];
              case 19:
                if (e_3)
                  throw e_3.error;
                return [
                  7
                  /*endfinally*/
                ];
              case 20:
                return [
                  7
                  /*endfinally*/
                ];
              case 21:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Decoder2.prototype.doDecodeSync = function() {
        DECODE:
          while (true) {
            var headByte = this.readHeadByte();
            var object = void 0;
            if (headByte >= 224) {
              object = headByte - 256;
            } else if (headByte < 192) {
              if (headByte < 128) {
                object = headByte;
              } else if (headByte < 144) {
                var size = headByte - 128;
                if (size !== 0) {
                  this.pushMapState(size);
                  this.complete();
                  continue DECODE;
                } else {
                  object = {};
                }
              } else if (headByte < 160) {
                var size = headByte - 144;
                if (size !== 0) {
                  this.pushArrayState(size);
                  this.complete();
                  continue DECODE;
                } else {
                  object = [];
                }
              } else {
                var byteLength = headByte - 160;
                object = this.decodeUtf8String(byteLength, 0);
              }
            } else if (headByte === 192) {
              object = null;
            } else if (headByte === 194) {
              object = false;
            } else if (headByte === 195) {
              object = true;
            } else if (headByte === 202) {
              object = this.readF32();
            } else if (headByte === 203) {
              object = this.readF64();
            } else if (headByte === 204) {
              object = this.readU8();
            } else if (headByte === 205) {
              object = this.readU16();
            } else if (headByte === 206) {
              object = this.readU32();
            } else if (headByte === 207) {
              if (this.useBigInt64) {
                object = this.readU64AsBigInt();
              } else {
                object = this.readU64();
              }
            } else if (headByte === 208) {
              object = this.readI8();
            } else if (headByte === 209) {
              object = this.readI16();
            } else if (headByte === 210) {
              object = this.readI32();
            } else if (headByte === 211) {
              if (this.useBigInt64) {
                object = this.readI64AsBigInt();
              } else {
                object = this.readI64();
              }
            } else if (headByte === 217) {
              var byteLength = this.lookU8();
              object = this.decodeUtf8String(byteLength, 1);
            } else if (headByte === 218) {
              var byteLength = this.lookU16();
              object = this.decodeUtf8String(byteLength, 2);
            } else if (headByte === 219) {
              var byteLength = this.lookU32();
              object = this.decodeUtf8String(byteLength, 4);
            } else if (headByte === 220) {
              var size = this.readU16();
              if (size !== 0) {
                this.pushArrayState(size);
                this.complete();
                continue DECODE;
              } else {
                object = [];
              }
            } else if (headByte === 221) {
              var size = this.readU32();
              if (size !== 0) {
                this.pushArrayState(size);
                this.complete();
                continue DECODE;
              } else {
                object = [];
              }
            } else if (headByte === 222) {
              var size = this.readU16();
              if (size !== 0) {
                this.pushMapState(size);
                this.complete();
                continue DECODE;
              } else {
                object = {};
              }
            } else if (headByte === 223) {
              var size = this.readU32();
              if (size !== 0) {
                this.pushMapState(size);
                this.complete();
                continue DECODE;
              } else {
                object = {};
              }
            } else if (headByte === 196) {
              var size = this.lookU8();
              object = this.decodeBinary(size, 1);
            } else if (headByte === 197) {
              var size = this.lookU16();
              object = this.decodeBinary(size, 2);
            } else if (headByte === 198) {
              var size = this.lookU32();
              object = this.decodeBinary(size, 4);
            } else if (headByte === 212) {
              object = this.decodeExtension(1, 0);
            } else if (headByte === 213) {
              object = this.decodeExtension(2, 0);
            } else if (headByte === 214) {
              object = this.decodeExtension(4, 0);
            } else if (headByte === 215) {
              object = this.decodeExtension(8, 0);
            } else if (headByte === 216) {
              object = this.decodeExtension(16, 0);
            } else if (headByte === 199) {
              var size = this.lookU8();
              object = this.decodeExtension(size, 1);
            } else if (headByte === 200) {
              var size = this.lookU16();
              object = this.decodeExtension(size, 2);
            } else if (headByte === 201) {
              var size = this.lookU32();
              object = this.decodeExtension(size, 4);
            } else {
              throw new DecodeError("Unrecognized type byte: ".concat(prettyByte(headByte)));
            }
            this.complete();
            var stack = this.stack;
            while (stack.length > 0) {
              var state = stack[stack.length - 1];
              if (state.type === STATE_ARRAY) {
                state.array[state.position] = object;
                state.position++;
                if (state.position === state.size) {
                  stack.pop();
                  object = state.array;
                } else {
                  continue DECODE;
                }
              } else if (state.type === STATE_MAP_KEY) {
                if (!isValidMapKeyType(object)) {
                  throw new DecodeError("The type of key must be string or number but " + typeof object);
                }
                if (object === "__proto__") {
                  throw new DecodeError("The key __proto__ is not allowed");
                }
                state.key = object;
                state.type = STATE_MAP_VALUE;
                continue DECODE;
              } else {
                state.map[state.key] = object;
                state.readCount++;
                if (state.readCount === state.size) {
                  stack.pop();
                  object = state.map;
                } else {
                  state.key = null;
                  state.type = STATE_MAP_KEY;
                  continue DECODE;
                }
              }
            }
            return object;
          }
      };
      Decoder2.prototype.readHeadByte = function() {
        if (this.headByte === HEAD_BYTE_REQUIRED) {
          this.headByte = this.readU8();
        }
        return this.headByte;
      };
      Decoder2.prototype.complete = function() {
        this.headByte = HEAD_BYTE_REQUIRED;
      };
      Decoder2.prototype.readArraySize = function() {
        var headByte = this.readHeadByte();
        switch (headByte) {
          case 220:
            return this.readU16();
          case 221:
            return this.readU32();
          default: {
            if (headByte < 160) {
              return headByte - 144;
            } else {
              throw new DecodeError("Unrecognized array type byte: ".concat(prettyByte(headByte)));
            }
          }
        }
      };
      Decoder2.prototype.pushMapState = function(size) {
        if (size > this.maxMapLength) {
          throw new DecodeError("Max length exceeded: map length (".concat(size, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
        }
        this.stack.push({
          type: STATE_MAP_KEY,
          size,
          key: null,
          readCount: 0,
          map: {}
        });
      };
      Decoder2.prototype.pushArrayState = function(size) {
        if (size > this.maxArrayLength) {
          throw new DecodeError("Max length exceeded: array length (".concat(size, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
        }
        this.stack.push({
          type: STATE_ARRAY,
          size,
          array: new Array(size),
          position: 0
        });
      };
      Decoder2.prototype.decodeUtf8String = function(byteLength, headerOffset) {
        var _a;
        if (byteLength > this.maxStrLength) {
          throw new DecodeError("Max length exceeded: UTF-8 byte length (".concat(byteLength, ") > maxStrLength (").concat(this.maxStrLength, ")"));
        }
        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
          throw MORE_DATA;
        }
        var offset = this.pos + headerOffset;
        var object;
        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {
          object = this.keyDecoder.decode(this.bytes, offset, byteLength);
        } else {
          object = utf8Decode(this.bytes, offset, byteLength);
        }
        this.pos += headerOffset + byteLength;
        return object;
      };
      Decoder2.prototype.stateIsMapKey = function() {
        if (this.stack.length > 0) {
          var state = this.stack[this.stack.length - 1];
          return state.type === STATE_MAP_KEY;
        }
        return false;
      };
      Decoder2.prototype.decodeBinary = function(byteLength, headOffset) {
        if (byteLength > this.maxBinLength) {
          throw new DecodeError("Max length exceeded: bin length (".concat(byteLength, ") > maxBinLength (").concat(this.maxBinLength, ")"));
        }
        if (!this.hasRemaining(byteLength + headOffset)) {
          throw MORE_DATA;
        }
        var offset = this.pos + headOffset;
        var object = this.bytes.subarray(offset, offset + byteLength);
        this.pos += headOffset + byteLength;
        return object;
      };
      Decoder2.prototype.decodeExtension = function(size, headOffset) {
        if (size > this.maxExtLength) {
          throw new DecodeError("Max length exceeded: ext length (".concat(size, ") > maxExtLength (").concat(this.maxExtLength, ")"));
        }
        var extType = this.view.getInt8(this.pos + headOffset);
        var data = this.decodeBinary(
          size,
          headOffset + 1
          /* extType */
        );
        return this.extensionCodec.decode(data, extType, this.context);
      };
      Decoder2.prototype.lookU8 = function() {
        return this.view.getUint8(this.pos);
      };
      Decoder2.prototype.lookU16 = function() {
        return this.view.getUint16(this.pos);
      };
      Decoder2.prototype.lookU32 = function() {
        return this.view.getUint32(this.pos);
      };
      Decoder2.prototype.readU8 = function() {
        var value = this.view.getUint8(this.pos);
        this.pos++;
        return value;
      };
      Decoder2.prototype.readI8 = function() {
        var value = this.view.getInt8(this.pos);
        this.pos++;
        return value;
      };
      Decoder2.prototype.readU16 = function() {
        var value = this.view.getUint16(this.pos);
        this.pos += 2;
        return value;
      };
      Decoder2.prototype.readI16 = function() {
        var value = this.view.getInt16(this.pos);
        this.pos += 2;
        return value;
      };
      Decoder2.prototype.readU32 = function() {
        var value = this.view.getUint32(this.pos);
        this.pos += 4;
        return value;
      };
      Decoder2.prototype.readI32 = function() {
        var value = this.view.getInt32(this.pos);
        this.pos += 4;
        return value;
      };
      Decoder2.prototype.readU64 = function() {
        var value = getUint64(this.view, this.pos);
        this.pos += 8;
        return value;
      };
      Decoder2.prototype.readI64 = function() {
        var value = getInt64(this.view, this.pos);
        this.pos += 8;
        return value;
      };
      Decoder2.prototype.readU64AsBigInt = function() {
        var value = this.view.getBigUint64(this.pos);
        this.pos += 8;
        return value;
      };
      Decoder2.prototype.readI64AsBigInt = function() {
        var value = this.view.getBigInt64(this.pos);
        this.pos += 8;
        return value;
      };
      Decoder2.prototype.readF32 = function() {
        var value = this.view.getFloat32(this.pos);
        this.pos += 4;
        return value;
      };
      Decoder2.prototype.readF64 = function() {
        var value = this.view.getFloat64(this.pos);
        this.pos += 8;
        return value;
      };
      return Decoder2;
    }()
  );

  // node_modules/@msgpack/msgpack/dist.es5+esm/decode.mjs
  function decode(buffer, options) {
    var decoder = new Decoder(options);
    return decoder.decode(buffer);
  }

  // node_modules/@4players/odin-common/lib/esm/utility/msgpack.js
  function msgpackEncode(value) {
    return encode(value);
  }
  function msgpackDecode(buffer) {
    return decode(buffer);
  }

  // node_modules/@4players/odin-common/lib/esm/utility/selector.js
  var __awaiter2 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Selector = class _Selector {
    constructor(_Generators) {
      this._Generators = _Generators;
      this._Futures = _Generators.map(_Selector.addIndex);
    }
    next() {
      return __awaiter2(this, void 0, void 0, function* () {
        const [result, index] = yield Promise.race(this._Futures);
        this._Futures[index] = _Selector.addIndex(this._Generators[index], index);
        return result;
      });
    }
    static addIndex(generator, index) {
      return __awaiter2(this, void 0, void 0, function* () {
        return [yield generator(), index];
      });
    }
  };

  // node_modules/@4players/odin-common/lib/esm/utility/sleep.js
  function sleep(ms, value) {
    if (ms <= 0) {
      return Promise.resolve(value);
    }
    return new Promise((resolve) => setTimeout(() => resolve(value), ms));
  }
  function abortableSleep(ms, signal) {
    if (signal.aborted) {
      return Promise.resolve("aborted");
    }
    return new Promise((resolve) => {
      const onAbort = () => resolve("aborted");
      signal.addEventListener("abort", onAbort, { once: true });
      setTimeout(() => {
        signal.removeEventListener("abort", onAbort);
        resolve(void 0);
      }, ms);
    });
  }
  function nextTick() {
    return new Promise((resolve) => setTimeout(resolve, 0));
  }

  // node_modules/@4players/odin-common/lib/esm/utility/strand.js
  var __awaiter3 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Strand = class {
    constructor() {
      this._Tasks = [];
      this._Running = false;
    }
    enqueue(task) {
      return new Promise((resolve, reject) => {
        const wrapped = () => __awaiter3(this, void 0, void 0, function* () {
          try {
            const result = yield task();
            resolve(result);
          } catch (error) {
            reject(error);
          }
        });
        this._Tasks.push(wrapped);
        if (!this._Running) {
          this.execute();
        }
      });
    }
    execute() {
      return __awaiter3(this, void 0, void 0, function* () {
        this._Running = true;
        while (true) {
          const task = this._Tasks.shift();
          if (task === void 0)
            break;
          yield task();
        }
        this._Running = false;
      });
    }
  };

  // node_modules/@4players/odin-common/lib/esm/utility/url.js
  function extendUrl(base, path) {
    let pathname = base.pathname;
    if (pathname.endsWith("/") === false)
      pathname += "/";
    try {
      return success(new URL(pathname + path, base));
    } catch (error) {
      return failure(String(error));
    }
  }

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
  }

  // node_modules/uuid/dist/esm-browser/native.js
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var v4_default = v4;

  // node_modules/@4players/odin-common/lib/esm/utility/uuid.js
  function generateUUID() {
    return v4_default();
  }

  // lib/worker/index.js
  var CI = '"use strict";(()=>{var Bi=Object.create;var aE=Object.defineProperty;var Ci=Object.getOwnPropertyDescriptor;var Qi=Object.getOwnPropertyNames;var Ei=Object.getPrototypeOf,ii=Object.prototype.hasOwnProperty;var oi=(g,A)=>()=>(A||g((A={exports:{}}).exports,A),A.exports);var Di=(g,A,I,B)=>{if(A&&typeof A=="object"||typeof A=="function")for(let Q of Qi(A))!ii.call(g,Q)&&Q!==I&&aE(g,Q,{get:()=>A[Q],enumerable:!(B=Ci(A,Q))||B.enumerable});return g};var sE=(g,A,I)=>(I=g!=null?Bi(Ei(g)):{},Di(A||!g||!g.__esModule?aE(I,"default",{value:g,enumerable:!0}):I,g));var WQ=oi((xE,PQ)=>{"use strict";var Yo=(()=>{var g=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return function(A={}){var I=A,B,Q;I.ready=new Promise((C,E)=>{B=C,Q=E});var i=Object.assign({},I),w=[],e="./this.program",k=(C,E)=>{throw E},y=typeof window=="object",L=typeof importScripts=="function",T=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",p=I.ENVIRONMENT_IS_PTHREAD||!1,j="";function NA(C){return I.locateFile?I.locateFile(C,j):j+C}var _A,gA,yA;(y||L)&&(L?j=self.location.href:typeof document<"u"&&document.currentScript&&(j=document.currentScript.src),g&&(j=g),j.indexOf("blob:")!==0?j=j.substr(0,j.replace(/[?#].*/,"").lastIndexOf("/")+1):j="",_A=C=>{var E=new XMLHttpRequest;return E.open("GET",C,!1),E.send(null),E.responseText},L&&(yA=C=>{var E=new XMLHttpRequest;return E.open("GET",C,!1),E.responseType="arraybuffer",E.send(null),new Uint8Array(E.response)}),gA=(C,E,a)=>{var G=new XMLHttpRequest;G.open("GET",C,!0),G.responseType="arraybuffer",G.onload=()=>{if(G.status==200||G.status==0&&G.response){E(G.response);return}a()},G.onerror=a,G.send(null)});var HI=I.print||console.log.bind(console),KA=I.printErr||console.error.bind(console);Object.assign(I,i),i=null,I.arguments&&(w=I.arguments),I.thisProgram&&(e=I.thisProgram),I.quit&&(k=I.quit);var Zg;I.wasmBinary&&(Zg=I.wasmBinary),typeof WebAssembly!="object"&&$A("no native wasm support detected");function fC(C){for(var E=atob(C),a=new Uint8Array(E.length),G=0;G<E.length;++G)a[G]=E.charCodeAt(G);return a}function FB(C){if(NB(C))return fC(C.slice(rB.length))}var PA,RB,WA=!1,iA,LA,aA,lA,BA,vA,CA,SB,VI;function tB(){var C=PA.buffer;I.HEAP8=LA=new Int8Array(C),I.HEAP16=lA=new Int16Array(C),I.HEAPU8=aA=new Uint8Array(C),I.HEAPU16=BA=new Uint16Array(C),I.HEAP32=vA=new Int32Array(C),I.HEAPU32=CA=new Uint32Array(C),I.HEAPF32=SB=new Float32Array(C),I.HEAPF64=VI=new Float64Array(C)}var Fg=I.INITIAL_MEMORY||16777216;if(p)PA=I.wasmMemory;else if(I.wasmMemory)PA=I.wasmMemory;else if(PA=new WebAssembly.Memory({initial:Fg/65536,maximum:Fg/65536,shared:!0}),!(PA.buffer instanceof SharedArrayBuffer))throw KA("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),T&&KA("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");tB(),Fg=PA.buffer.byteLength;var kB=[],cB=[],JB=[],bC=!1;function pC(){if(I.preRun)for(typeof I.preRun=="function"&&(I.preRun=[I.preRun]);I.preRun.length;)iI(I.preRun.shift());YA(kB)}function UB(){bC=!0,!p&&YA(cB)}function uC(){if(!p){if(I.postRun)for(typeof I.postRun=="function"&&(I.postRun=[I.postRun]);I.postRun.length;)TI(I.postRun.shift());YA(JB)}}function iI(C){kB.unshift(C)}function Vg(C){cB.unshift(C)}function TI(C){JB.unshift(C)}var RI=0,Tg=null,oI=null;function Xg(C){RI++,I.monitorRunDependencies&&I.monitorRunDependencies(RI)}function Og(C){if(RI--,I.monitorRunDependencies&&I.monitorRunDependencies(RI),RI==0&&(Tg!==null&&(clearInterval(Tg),Tg=null),oI)){var E=oI;oI=null,E()}}function $A(C){I.onAbort&&I.onAbort(C),C="Aborted("+C+")",KA(C),WA=!0,iA=1,C+=". Build with -sASSERTIONS for more info.";var E=new WebAssembly.RuntimeError(C);throw Q(E),E}var rB="data:application/octet-stream;base64,",NB=C=>C.startsWith(rB),dI;dI="data:application/octet-stream;base64,",NB(dI)||(dI=NA(dI));function jg(C){if(C==dI&&Zg)return new Uint8Array(Zg);var E=FB(C);if(E)return E;if(yA)return yA(C);throw"sync fetching of the wasm failed: you can preload it to Module[\'wasmBinary\'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function zQ(C,E){var a,G=jg(C);a=new WebAssembly.Module(G);var F=new WebAssembly.Instance(a,E);return[F,a]}function nB(){var C={a:TE};function E(G,F){return IA=G.exports,lB(IA.K),cg=IA.H,Vg(IA.G),RB=F,Og("wasm-instantiate"),IA}if(Xg("wasm-instantiate"),I.instantiateWasm)try{return I.instantiateWasm(C,E)}catch(G){KA(`Module.instantiateWasm callback failed with error: ${G}`),Q(G)}var a=zQ(dI,C);return E(a[0],a[1])}function Rg(C){this.name="ExitStatus",this.message=`Program terminated with exit(${C})`,this.status=C}var SI=C=>{C.terminate(),C.onmessage=E=>{}},xC=C=>{var E=m.pthreads[C];delete m.pthreads[C],SI(E),BE(C),m.runningWorkers.splice(m.runningWorkers.indexOf(E),1),E.pthread_ptr=0},mC=C=>{var E=m.pthreads[C];E.postMessage({cmd:"cancel"})},zg=C=>{var E=m.pthreads[C];m.returnWorkerToPool(E)},PC=C=>{var E=m.getNewWorker();if(!E)return 6;m.runningWorkers.push(E),m.pthreads[C.pthread_ptr]=E,E.pthread_ptr=C.pthread_ptr;var a={cmd:"run",start_routine:C.startRoutine,arg:C.arg,pthread_ptr:C.pthread_ptr};return E.postMessage(a,C.transferList),0},HB=0,Sg=()=>LB||HB>0,dB=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,_g=(C,E,a)=>{for(var G=E+a,F=E;C[F]&&!(F>=G);)++F;if(F-E>16&&C.buffer&&dB)return dB.decode(C.buffer instanceof SharedArrayBuffer?C.slice(E,F):C.subarray(E,F));for(var J="";E<F;){var t=C[E++];if(!(t&128)){J+=String.fromCharCode(t);continue}var R=C[E++]&63;if((t&224)==192){J+=String.fromCharCode((t&31)<<6|R);continue}var M=C[E++]&63;if((t&240)==224?t=(t&15)<<12|R<<6|M:t=(t&7)<<18|R<<12|M<<6|C[E++]&63,t<65536)J+=String.fromCharCode(t);else{var d=t-65536;J+=String.fromCharCode(55296|d>>10,56320|d&1023)}}return J},oA=(C,E)=>C?_g(aA,C,E):"",DI={varargs:void 0,get(){var C=vA[+DI.varargs>>2];return DI.varargs+=4,C},getp(){return DI.get()},getStr(C){var E=oA(C);return E}},MI=C=>{var E=$E(),a=C();return QE(E),a},tg=(C,E)=>E+2097152>>>0<4194305-!!C?(C>>>0)+E*4294967296:NaN,ZA=function(C,E){var a=arguments.length-2,G=arguments;return MI(()=>{for(var F=a,J=Ai(F*8),t=J>>3,R=0;R<a;R++){var M=G[2+R];VI[t+R]=M}return jE(C,F,J,E)})};function v(C){if(p)return ZA(0,1,C);iA=C,Sg()||(m.terminateAllThreads(),I.onExit&&I.onExit(C),WA=!0),k(C,new Rg(C))}var MB=(C,E)=>{if(iA=C,p)throw qB(C),"unwind";v(C)},qI=MB,AI=C=>{if(C instanceof Rg||C=="unwind")return iA;k(1,C)},m={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init(){p?m.initWorker():m.initMainThread()},initMainThread(){iI(()=>{Xg("loading-workers"),m.loadWasmModuleToAllWorkers(()=>Og("loading-workers"))})},initWorker(){LB=!1},setExitStatus:C=>{iA=C},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:()=>{for(var C of m.runningWorkers)SI(C);for(var C of m.unusedWorkers)SI(C);m.unusedWorkers=[],m.runningWorkers=[],m.pthreads=[]},returnWorkerToPool:C=>{var E=C.pthread_ptr;delete m.pthreads[E],m.unusedWorkers.push(C),m.runningWorkers.splice(m.runningWorkers.indexOf(C),1),C.pthread_ptr=0,BE(E)},receiveObjectTransfer(C){},threadInitTLS(){m.tlsInitFunctions.forEach(C=>C())},loadWasmModuleToWorker:C=>new Promise(E=>{C.onmessage=J=>{var t=J.data,R=t.cmd;if(t.targetThread&&t.targetThread!=JQ()){var M=m.pthreads[t.targetThread];M?M.postMessage(t,t.transferList):KA(`Internal error! Worker sent a message "${R}" to target pthread ${t.targetThread}, but that thread no longer exists!`);return}R==="checkMailbox"?c():R==="spawnThread"?PC(t):R==="cleanupThread"?zg(t.thread):R==="killThread"?xC(t.thread):R==="cancelThread"?mC(t.thread):R==="loaded"?(C.loaded=!0,E(C)):R==="alert"?alert(`Thread ${t.threadId}: ${t.text}`):t.target==="setimmediate"?C.postMessage(t):R==="callHandler"?I[t.handler](...t.args):R&&KA(`worker sent an unknown command ${R}`)},C.onerror=J=>{var t="worker sent an error!";throw KA(`${t} ${J.filename}:${J.lineno}: ${J.message}`),J};var a=[],G=["onExit","onAbort","print","printErr"];for(var F of G)I.hasOwnProperty(F)&&a.push(F);C.postMessage({cmd:"load",handlers:a,urlOrBlob:I.mainScriptUrlOrBlob||g,wasmMemory:PA,wasmModule:RB})}),loadWasmModuleToAllWorkers(C){C()},allocateUnusedWorker(){var C,E=NA("index.worker.js");C=new Worker(E),m.unusedWorkers.push(C)},getNewWorker(){return m.unusedWorkers.length==0&&(m.allocateUnusedWorker(),m.loadWasmModuleToWorker(m.unusedWorkers[0])),m.unusedWorkers.pop()}};I.PThread=m;var YA=C=>{for(;C.length>0;)C.shift()(I)},aI=()=>{var C=JQ(),E=CA[C+52>>2],a=CA[C+56>>2],G=E-a;_E(E,G),QE(E)};I.establishStackSpace=aI;function qB(C){if(p)return ZA(1,0,C);qI(C)}var kg=[],cg,XI=C=>{var E=kg[C];return E||(C>=kg.length&&(kg.length=C+1),kg[C]=E=cg.get(C)),E},KB=(C,E)=>{var a=XI(C)(E);function G(F){Sg()?m.setExitStatus(F):CE(F)}G(a)};I.invokeEntryPoint=KB;var LB=I.noExitRuntime||!0,lB=C=>{m.tlsInitFunctions.push(C)},YB=(C,E,a,G)=>{$A(`Assertion failed: ${oA(C)}, at: `+[E?oA(E):"unknown filename",a,G?oA(G):"unknown function"])};function fB(C){this.excPtr=C,this.ptr=C-24,this.set_type=function(E){CA[this.ptr+4>>2]=E},this.get_type=function(){return CA[this.ptr+4>>2]},this.set_destructor=function(E){CA[this.ptr+8>>2]=E},this.get_destructor=function(){return CA[this.ptr+8>>2]},this.set_caught=function(E){E=E?1:0,LA[this.ptr+12>>0]=E},this.get_caught=function(){return LA[this.ptr+12>>0]!=0},this.set_rethrown=function(E){E=E?1:0,LA[this.ptr+13>>0]=E},this.get_rethrown=function(){return LA[this.ptr+13>>0]!=0},this.init=function(E,a){this.set_adjusted_ptr(0),this.set_type(E),this.set_destructor(a)},this.set_adjusted_ptr=function(E){CA[this.ptr+16>>2]=E},this.get_adjusted_ptr=function(){return CA[this.ptr+16>>2]},this.get_exception_ptr=function(){var E=Ii(this.get_type());if(E)return CA[this.excPtr>>2];var a=this.get_adjusted_ptr();return a!==0?a:this.excPtr}}var bB=0,WC=0,OI=(C,E,a)=>{var G=new fB(C);throw G.init(E,a),bB=C,WC++,bB},$g=C=>{OE(C,!L,1,!y,65536,!1),m.threadInitTLS()},jI=C=>{p?postMessage({cmd:"cleanupThread",thread:C}):zg(C)},vC=(C,E,a,G,F)=>{},ZC=()=>{for(var C=new Array(256),E=0;E<256;++E)C[E]=String.fromCharCode(E);KI=C},KI,FA=C=>{for(var E="",a=C;aA[a];)E+=KI[aA[a++]];return E},LI={},II={},Jg={},VA,Z=C=>{throw new VA(C)},zI,tI=C=>{throw new zI(C)},gI=(C,E,a)=>{C.forEach(function(R){Jg[R]=E});function G(R){var M=a(R);M.length!==C.length&&tI("Mismatched type converter count");for(var d=0;d<C.length;++d)BI(C[d],M[d])}var F=new Array(E.length),J=[],t=0;E.forEach((R,M)=>{II.hasOwnProperty(R)?F[M]=II[R]:(J.push(R),LI.hasOwnProperty(R)||(LI[R]=[]),LI[R].push(()=>{F[M]=II[R],++t,t===J.length&&G(F)}))}),J.length===0&&G(F)};function pB(C,E,a={}){var G=E.name;if(C||Z(`type "${G}" must have a positive integer typeid pointer`),II.hasOwnProperty(C)){if(a.ignoreDuplicateRegistrations)return;Z(`Cannot register type \'${G}\' twice`)}if(II[C]=E,delete Jg[C],LI.hasOwnProperty(C)){var F=LI[C];delete LI[C],F.forEach(J=>J())}}function BI(C,E,a={}){if(!("argPackAdvance"in E))throw new TypeError("registerType registeredInstance requires argPackAdvance");return pB(C,E,a)}var sI=8,VC=(C,E,a,G)=>{E=FA(E),BI(C,{name:E,fromWireType:function(F){return!!F},toWireType:function(F,J){return J?a:G},argPackAdvance:sI,readValueFromPointer:function(F){return this.fromWireType(aA[F])},destructorFunction:null})},TC=C=>({count:C.count,deleteScheduled:C.deleteScheduled,preservePointerOnDelete:C.preservePointerOnDelete,ptr:C.ptr,ptrType:C.ptrType,smartPtr:C.smartPtr,smartPtrType:C.smartPtrType}),lI=C=>{function E(a){return a.$$.ptrType.registeredClass.name}Z(E(C)+" instance already deleted")},AB=!1,uB=C=>{},XC=C=>{C.smartPtr?C.smartPtrType.rawDestructor(C.smartPtr):C.ptrType.registeredClass.rawDestructor(C.ptr)},IB=C=>{C.count.value-=1;var E=C.count.value===0;E&&XC(C)},xB=(C,E,a)=>{if(E===a)return C;if(a.baseClass===void 0)return null;var G=xB(C,E,a.baseClass);return G===null?null:a.downcast(G)},_I={},mB=()=>Object.keys(cA).length,OC=()=>{var C=[];for(var E in cA)cA.hasOwnProperty(E)&&C.push(cA[E]);return C},wI=[],Ug=()=>{for(;wI.length;){var C=wI.pop();C.$$.deleteScheduled=!1,C.delete()}},YI,jC=C=>{YI=C,wI.length&&YI&&YI(Ug)},zC=()=>{I.getInheritedInstanceCount=mB,I.getLiveInheritedInstances=OC,I.flushPendingDeletes=Ug,I.setDelayFunction=jC},cA={},_C=(C,E)=>{for(E===void 0&&Z("ptr should not be undefined");C.baseClass;)E=C.upcast(E),C=C.baseClass;return E},PB=(C,E)=>(E=_C(C,E),cA[E]),rg=(C,E)=>{(!E.ptrType||!E.ptr)&&tI("makeClassHandle requires ptr and ptrType");var a=!!E.smartPtrType,G=!!E.smartPtr;return a!==G&&tI("Both smartPtrType and smartPtr must be specified"),E.count={value:1},$I(Object.create(C,{$$:{value:E}}))};function fI(C){var E=this.getPointee(C);if(!E)return this.destructor(C),null;var a=PB(this.registeredClass,E);if(a!==void 0){if(a.$$.count.value===0)return a.$$.ptr=E,a.$$.smartPtr=C,a.clone();var G=a.clone();return this.destructor(C),G}function F(){return this.isSmartPointer?rg(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:E,smartPtrType:this,smartPtr:C}):rg(this.registeredClass.instancePrototype,{ptrType:this,ptr:C})}var J=this.registeredClass.getActualType(E),t=_I[J];if(!t)return F.call(this);var R;this.isConst?R=t.constPointerType:R=t.pointerType;var M=xB(E,this.registeredClass,R.registeredClass);return M===null?F.call(this):this.isSmartPointer?rg(R.registeredClass.instancePrototype,{ptrType:R,ptr:M,smartPtrType:this,smartPtr:C}):rg(R.registeredClass.instancePrototype,{ptrType:R,ptr:M})}var $I=C=>typeof FinalizationRegistry>"u"?($I=E=>E,C):(AB=new FinalizationRegistry(E=>{IB(E.$$)}),$I=E=>{var a=E.$$,G=!!a.smartPtr;if(G){var F={$$:a};AB.register(E,F,E)}return E},uB=E=>AB.unregister(E),$I(C)),gB=()=>{Object.assign(Ag.prototype,{isAliasOf(C){if(!(this instanceof Ag)||!(C instanceof Ag))return!1;var E=this.$$.ptrType.registeredClass,a=this.$$.ptr;C.$$=C.$$;for(var G=C.$$.ptrType.registeredClass,F=C.$$.ptr;E.baseClass;)a=E.upcast(a),E=E.baseClass;for(;G.baseClass;)F=G.upcast(F),G=G.baseClass;return E===G&&a===F},clone(){if(this.$$.ptr||lI(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var C=$I(Object.create(Object.getPrototypeOf(this),{$$:{value:TC(this.$$)}}));return C.$$.count.value+=1,C.$$.deleteScheduled=!1,C},delete(){this.$$.ptr||lI(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&Z("Object already scheduled for deletion"),uB(this),IB(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},isDeleted(){return!this.$$.ptr},deleteLater(){return this.$$.ptr||lI(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&Z("Object already scheduled for deletion"),wI.push(this),wI.length===1&&YI&&YI(Ug),this.$$.deleteScheduled=!0,this}})};function Ag(){}var Ng=(C,E)=>Object.defineProperty(E,"name",{value:C}),ng=(C,E,a)=>{if(C[E].overloadTable===void 0){var G=C[E];C[E]=function(){return C[E].overloadTable.hasOwnProperty(arguments.length)||Z(`Function \'${a}\' called with an invalid number of arguments (${arguments.length}) - expects one of (${C[E].overloadTable})!`),C[E].overloadTable[arguments.length].apply(this,arguments)},C[E].overloadTable=[],C[E].overloadTable[G.argCount]=G}},WB=(C,E,a)=>{I.hasOwnProperty(C)?((a===void 0||I[C].overloadTable!==void 0&&I[C].overloadTable[a]!==void 0)&&Z(`Cannot register public name \'${C}\' twice`),ng(I,C,C),I.hasOwnProperty(a)&&Z(`Cannot register multiple overloads of a function with the same number of arguments (${a})!`),I[C].overloadTable[a]=E):(I[C]=E,a!==void 0&&(I[C].numArguments=a))},vB=48,$C=57,ZB=C=>{if(C===void 0)return"_unknown";C=C.replace(/[^a-zA-Z0-9_]/g,"$");var E=C.charCodeAt(0);return E>=vB&&E<=$C?`_${C}`:C};function AQ(C,E,a,G,F,J,t,R){this.name=C,this.constructor=E,this.instancePrototype=a,this.rawDestructor=G,this.baseClass=F,this.getActualType=J,this.upcast=t,this.downcast=R,this.pureVirtualFunctions=[]}var Hg=(C,E,a)=>{for(;E!==a;)E.upcast||Z(`Expected null or instance of ${a.name}, got an instance of ${E.name}`),C=E.upcast(C),E=E.baseClass;return C};function VB(C,E){if(E===null)return this.isReference&&Z(`null is not a valid ${this.name}`),0;E.$$||Z(`Cannot pass "${iB(E)}" as a ${this.name}`),E.$$.ptr||Z(`Cannot pass deleted object as a pointer of type ${this.name}`);var a=E.$$.ptrType.registeredClass,G=Hg(E.$$.ptr,a,this.registeredClass);return G}function fA(C,E){var a;if(E===null)return this.isReference&&Z(`null is not a valid ${this.name}`),this.isSmartPointer?(a=this.rawConstructor(),C!==null&&C.push(this.rawDestructor,a),a):0;E.$$||Z(`Cannot pass "${iB(E)}" as a ${this.name}`),E.$$.ptr||Z(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&E.$$.ptrType.isConst&&Z(`Cannot convert argument of type ${E.$$.smartPtrType?E.$$.smartPtrType.name:E.$$.ptrType.name} to parameter type ${this.name}`);var G=E.$$.ptrType.registeredClass;if(a=Hg(E.$$.ptr,G,this.registeredClass),this.isSmartPointer)switch(E.$$.smartPtr===void 0&&Z("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:E.$$.smartPtrType===this?a=E.$$.smartPtr:Z(`Cannot convert argument of type ${E.$$.smartPtrType?E.$$.smartPtrType.name:E.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:a=E.$$.smartPtr;break;case 2:if(E.$$.smartPtrType===this)a=E.$$.smartPtr;else{var F=E.clone();a=this.rawShare(a,EB.toHandle(()=>F.delete())),C!==null&&C.push(this.rawDestructor,a)}break;default:Z("Unsupporting sharing policy")}return a}function IQ(C,E){if(E===null)return this.isReference&&Z(`null is not a valid ${this.name}`),0;E.$$||Z(`Cannot pass "${iB(E)}" as a ${this.name}`),E.$$.ptr||Z(`Cannot pass deleted object as a pointer of type ${this.name}`),E.$$.ptrType.isConst&&Z(`Cannot convert argument of type ${E.$$.ptrType.name} to parameter type ${this.name}`);var a=E.$$.ptrType.registeredClass,G=Hg(E.$$.ptr,a,this.registeredClass);return G}function TB(C){return this.fromWireType(CA[C>>2])}var gQ=()=>{Object.assign(bI.prototype,{getPointee(C){return this.rawGetPointee&&(C=this.rawGetPointee(C)),C},destructor(C){this.rawDestructor&&this.rawDestructor(C)},argPackAdvance:sI,readValueFromPointer:TB,deleteObject(C){C!==null&&C.delete()},fromWireType:fI})};function bI(C,E,a,G,F,J,t,R,M,d,b){this.name=C,this.registeredClass=E,this.isReference=a,this.isConst=G,this.isSmartPointer=F,this.pointeeType=J,this.sharingPolicy=t,this.rawGetPointee=R,this.rawConstructor=M,this.rawShare=d,this.rawDestructor=b,!F&&E.baseClass===void 0?G?(this.toWireType=VB,this.destructorFunction=null):(this.toWireType=IQ,this.destructorFunction=null):this.toWireType=fA}var BB=(C,E,a)=>{I.hasOwnProperty(C)||tI("Replacing nonexistant public symbol"),I[C].overloadTable!==void 0&&a!==void 0?I[C].overloadTable[a]=E:(I[C]=E,I[C].argCount=a)},BQ=(C,E,a)=>{var G=I["dynCall_"+C];return a&&a.length?G.apply(null,[E].concat(a)):G.call(null,E)},CB=(C,E,a)=>{if(C.includes("j"))return BQ(C,E,a);var G=XI(E).apply(null,a);return G},CQ=(C,E)=>{var a=[];return function(){return a.length=0,Object.assign(a,arguments),CB(C,E,a)}},CI=(C,E)=>{C=FA(C);function a(){return C.includes("j")?CQ(C,E):XI(E)}var G=a();return typeof G!="function"&&Z(`unknown function pointer with signature ${C}: ${E}`),G},QQ=(C,E)=>{var a=Ng(E,function(G){this.name=E,this.message=G;var F=new Error(G).stack;F!==void 0&&(this.stack=this.toString()+`\n`+F.replace(/^Error(:[^\\n]*)?\\n/,""))});return a.prototype=Object.create(C.prototype),a.prototype.constructor=a,a.prototype.toString=function(){return this.message===void 0?this.name:`${this.name}: ${this.message}`},a},XB,EQ=C=>{var E=XE(C),a=FA(E);return uI(E),a},pI=(C,E)=>{var a=[],G={};function F(J){if(!G[J]&&!II[J]){if(Jg[J]){Jg[J].forEach(F);return}a.push(J),G[J]=!0}}throw E.forEach(F),new XB(`${C}: `+a.map(EQ).join([", "]))},iQ=(C,E,a,G,F,J,t,R,M,d,b,X,QA)=>{b=FA(b),J=CI(F,J),R&&(R=CI(t,R)),d&&(d=CI(M,d)),QA=CI(X,QA);var _=ZB(b);WB(_,function(){pI(`Cannot construct ${b} due to unbound types`,[G])}),gI([C,E,a],G?[G]:[],function(eA){eA=eA[0];var UA,SA;G?(UA=eA.registeredClass,SA=UA.instancePrototype):SA=Ag.prototype;var TA=Ng(b,function(){if(Object.getPrototypeOf(this)!==Ig)throw new VA("Use \'new\' to construct "+b);if(HA.constructor_body===void 0)throw new VA(b+" has no accessible constructor");var DE=HA.constructor_body[arguments.length];if(DE===void 0)throw new VA(`Tried to invoke ctor of ${b} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(HA.constructor_body).toString()}) parameters instead!`);return DE.apply(this,arguments)}),Ig=Object.create(SA,{constructor:{value:TA}});TA.prototype=Ig;var HA=new AQ(b,TA,Ig,QA,UA,J,R,d);HA.baseClass&&(HA.baseClass.__derivedClasses===void 0&&(HA.baseClass.__derivedClasses=[]),HA.baseClass.__derivedClasses.push(HA));var gi=new bI(b,HA,!0,!1,!1),iE=new bI(b+"*",HA,!1,!1,!1),oE=new bI(b+" const*",HA,!1,!0,!1);return _I[C]={pointerType:iE,constPointerType:oE},BB(_,TA),[gi,iE,oE]})},QB=(C,E)=>{for(var a=[],G=0;G<C;G++)a.push(CA[E+G*4>>2]);return a},OB=C=>{for(;C.length;){var E=C.pop(),a=C.pop();a(E)}};function oQ(C,E){if(!(C instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof C} which is not a function`);var a=Ng(C.name||"unknownFunctionName",function(){});a.prototype=C.prototype;var G=new a,F=C.apply(G,E);return F instanceof Object?F:G}function dg(C,E,a,G,F,J){var t=E.length;t<2&&Z("argTypes array size mismatch! Must at least get return value and \'this\' types!");for(var R=E[1]!==null&&a!==null,M=!1,d=1;d<E.length;++d)if(E[d]!==null&&E[d].destructorFunction===void 0){M=!0;break}for(var b=E[0].name!=="void",X="",QA="",d=0;d<t-2;++d)X+=(d!==0?", ":"")+"arg"+d,QA+=(d!==0?", ":"")+"arg"+d+"Wired";var _=`\n        return function (${X}) {\n        if (arguments.length !== ${t-2}) {\n          throwBindingError(\'function ${C} called with \' + arguments.length + \' arguments, expected ${t-2}\');\n        }`;M&&(_+=`var destructors = [];\n`);var eA=M?"destructors":"null",UA=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],SA=[Z,G,F,OB,E[0],E[1]];R&&(_+="var thisWired = classParam.toWireType("+eA+`, this);\n`);for(var d=0;d<t-2;++d)_+="var arg"+d+"Wired = argType"+d+".toWireType("+eA+", arg"+d+"); // "+E[d+2].name+`\n`,UA.push("argType"+d),SA.push(E[d+2]);if(R&&(QA="thisWired"+(QA.length>0?", ":"")+QA),_+=(b||J?"var rv = ":"")+"invoker(fn"+(QA.length>0?", ":"")+QA+`);\n`,M)_+=`runDestructors(destructors);\n`;else for(var d=R?1:2;d<E.length;++d){var TA=d===1?"thisWired":"arg"+(d-2)+"Wired";E[d].destructorFunction!==null&&(_+=TA+"_dtor("+TA+"); // "+E[d].name+`\n`,UA.push(TA+"_dtor"),SA.push(E[d].destructorFunction))}b&&(_+=`var ret = retType.fromWireType(rv);\nreturn ret;\n`),_+=`}\n`,UA.push(_);var Ig=oQ(Function,UA).apply(null,SA);return Ng(C,Ig)}var DQ=(C,E,a,G,F,J)=>{var t=QB(E,a);F=CI(G,F),gI([],[C],function(R){R=R[0];var M=`constructor ${R.name}`;if(R.registeredClass.constructor_body===void 0&&(R.registeredClass.constructor_body=[]),R.registeredClass.constructor_body[E-1]!==void 0)throw new VA(`Cannot register multiple constructors with identical number of parameters (${E-1}) for class \'${R.name}\'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return R.registeredClass.constructor_body[E-1]=()=>{pI(`Cannot construct ${R.name} due to unbound types`,t)},gI([],t,d=>(d.splice(1,0,null),R.registeredClass.constructor_body[E-1]=dg(M,d,null,F,J),[])),[]})},jB=C=>{C=C.trim();let E=C.indexOf("(");return E!==-1?C.substr(0,E):C},aQ=(C,E,a,G,F,J,t,R,M)=>{var d=QB(a,G);E=FA(E),E=jB(E),J=CI(F,J),gI([],[C],function(b){b=b[0];var X=`${b.name}.${E}`;E.startsWith("@@")&&(E=Symbol[E.substring(2)]),R&&b.registeredClass.pureVirtualFunctions.push(E);function QA(){pI(`Cannot call ${X} due to unbound types`,d)}var _=b.registeredClass.instancePrototype,eA=_[E];return eA===void 0||eA.overloadTable===void 0&&eA.className!==b.name&&eA.argCount===a-2?(QA.argCount=a-2,QA.className=b.name,_[E]=QA):(ng(_,E,X),_[E].overloadTable[a-2]=QA),gI([],d,function(UA){var SA=dg(X,UA,b,J,t,M);return _[E].overloadTable===void 0?(SA.argCount=a-2,_[E]=SA):_[E].overloadTable[a-2]=SA,[]}),[]})},zB=(C,E,a)=>(C instanceof Object||Z(`${a} with invalid "this": ${C}`),C instanceof E.registeredClass.constructor||Z(`${a} incompatible with "this" of type ${C.constructor.name}`),C.$$.ptr||Z(`cannot call emscripten binding method ${a} on deleted object`),Hg(C.$$.ptr,C.$$.ptrType.registeredClass,E.registeredClass)),sQ=(C,E,a,G,F,J,t,R,M,d)=>{E=FA(E),F=CI(G,F),gI([],[C],function(b){b=b[0];var X=`${b.name}.${E}`,QA={get(){pI(`Cannot access ${X} due to unbound types`,[a,t])},enumerable:!0,configurable:!0};return M?QA.set=()=>pI(`Cannot access ${X} due to unbound types`,[a,t]):QA.set=_=>Z(X+" is a read-only property"),Object.defineProperty(b.registeredClass.instancePrototype,E,QA),gI([],M?[a,t]:[a],function(_){var eA=_[0],UA={get(){var TA=zB(this,b,X+" getter");return eA.fromWireType(F(J,TA))},enumerable:!0};if(M){M=CI(R,M);var SA=_[1];UA.set=function(TA){var Ig=zB(this,b,X+" setter"),HA=[];M(d,Ig,SA.toWireType(HA,TA)),OB(HA)}}return Object.defineProperty(b.registeredClass.instancePrototype,E,UA),[]}),[]})};function wQ(){Object.assign(_B.prototype,{get(C){return this.allocated[C]},has(C){return this.allocated[C]!==void 0},allocate(C){var E=this.freelist.pop()||this.allocated.length;return this.allocated[E]=C,E},free(C){this.allocated[C]=void 0,this.freelist.push(C)}})}function _B(){this.allocated=[void 0],this.freelist=[]}var bA=new _B,GQ=C=>{C>=bA.reserved&&--bA.get(C).refcount===0&&bA.free(C)},eQ=()=>{for(var C=0,E=bA.reserved;E<bA.allocated.length;++E)bA.allocated[E]!==void 0&&++C;return C},hQ=()=>{bA.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),bA.reserved=bA.allocated.length,I.count_emval_handles=eQ},EB={toValue:C=>(C||Z("Cannot use deleted val. handle = "+C),bA.get(C).value),toHandle:C=>{switch(C){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return bA.allocate({refcount:1,value:C})}}};function Mg(C){return this.fromWireType(vA[C>>2])}var yQ=(C,E)=>{E=FA(E),BI(C,{name:E,fromWireType:a=>{var G=EB.toValue(a);return GQ(a),G},toWireType:(a,G)=>EB.toHandle(G),argPackAdvance:sI,readValueFromPointer:Mg,destructorFunction:null})},iB=C=>{if(C===null)return"null";var E=typeof C;return E==="object"||E==="array"||E==="function"?C.toString():""+C},FQ=(C,E)=>{switch(E){case 4:return function(a){return this.fromWireType(SB[a>>2])};case 8:return function(a){return this.fromWireType(VI[a>>3])};default:throw new TypeError(`invalid float width (${E}): ${C}`)}},RQ=(C,E,a)=>{E=FA(E),BI(C,{name:E,fromWireType:G=>G,toWireType:(G,F)=>F,argPackAdvance:sI,readValueFromPointer:FQ(E,a),destructorFunction:null})},SQ=(C,E,a,G,F,J,t)=>{var R=QB(E,a);C=FA(C),C=jB(C),F=CI(G,F),WB(C,function(){pI(`Cannot call ${C} due to unbound types`,R)},E-1),gI([],R,function(M){var d=[M[0],null].concat(M.slice(1));return BB(C,dg(C,d,null,F,J,t),E-1),[]})},tQ=(C,E,a)=>{switch(E){case 1:return a?G=>LA[G>>0]:G=>aA[G>>0];case 2:return a?G=>lA[G>>1]:G=>BA[G>>1];case 4:return a?G=>vA[G>>2]:G=>CA[G>>2];default:throw new TypeError(`invalid integer width (${E}): ${C}`)}},kQ=(C,E,a,G,F)=>{E=FA(E),F===-1&&(F=4294967295);var J=b=>b;if(G===0){var t=32-8*a;J=b=>b<<t>>>t}var R=E.includes("unsigned"),M=(b,X)=>{},d;R?d=function(b,X){return M(X,this.name),X>>>0}:d=function(b,X){return M(X,this.name),X},BI(C,{name:E,fromWireType:J,toWireType:d,argPackAdvance:sI,readValueFromPointer:tQ(E,a,G!==0),destructorFunction:null})},nA=(C,E,a)=>{var G=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],F=G[E];function J(t){var R=CA[t>>2],M=CA[t+4>>2];return new F(LA.buffer,M,R)}a=FA(a),BI(C,{name:a,fromWireType:J,argPackAdvance:sI,readValueFromPointer:J},{ignoreDuplicateRegistrations:!0})},_Q=(C,E,a,G)=>{if(!(G>0))return 0;for(var F=a,J=a+G-1,t=0;t<C.length;++t){var R=C.charCodeAt(t);if(R>=55296&&R<=57343){var M=C.charCodeAt(++t);R=65536+((R&1023)<<10)|M&1023}if(R<=127){if(a>=J)break;E[a++]=R}else if(R<=2047){if(a+1>=J)break;E[a++]=192|R>>6,E[a++]=128|R&63}else if(R<=65535){if(a+2>=J)break;E[a++]=224|R>>12,E[a++]=128|R>>6&63,E[a++]=128|R&63}else{if(a+3>=J)break;E[a++]=240|R>>18,E[a++]=128|R>>12&63,E[a++]=128|R>>6&63,E[a++]=128|R&63}}return E[a]=0,a-F},$B=(C,E,a)=>_Q(C,aA,E,a),GI=C=>{for(var E=0,a=0;a<C.length;++a){var G=C.charCodeAt(a);G<=127?E++:G<=2047?E+=2:G>=55296&&G<=57343?(E+=4,++a):E+=3}return E},$Q=(C,E)=>{E=FA(E);var a=E==="std::string";BI(C,{name:E,fromWireType(G){var F=CA[G>>2],J=G+4,t;if(a)for(var R=J,M=0;M<=F;++M){var d=J+M;if(M==F||aA[d]==0){var b=d-R,X=oA(R,b);t===void 0?t=X:(t+="\\0",t+=X),R=d+1}}else{for(var QA=new Array(F),M=0;M<F;++M)QA[M]=String.fromCharCode(aA[J+M]);t=QA.join("")}return uI(G),t},toWireType(G,F){F instanceof ArrayBuffer&&(F=new Uint8Array(F));var J,t=typeof F=="string";t||F instanceof Uint8Array||F instanceof Uint8ClampedArray||F instanceof Int8Array||Z("Cannot pass non-string to std::string"),a&&t?J=GI(F):J=F.length;var R=gE(4+J+1),M=R+4;if(CA[R>>2]=J,a&&t)$B(F,M,J+1);else if(t)for(var d=0;d<J;++d){var b=F.charCodeAt(d);b>255&&(uI(M),Z("String has UTF-16 code units that do not fit in 8 bits")),aA[M+d]=b}else for(var d=0;d<J;++d)aA[M+d]=F[d];return G!==null&&G.push(uI,R),R},argPackAdvance:sI,readValueFromPointer:TB,destructorFunction(G){uI(G)}})},AC=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,cQ=(C,E)=>{for(var a=C,G=a>>1,F=G+E/2;!(G>=F)&&BA[G];)++G;if(a=G<<1,a-C>32&&AC)return AC.decode(aA.slice(C,a));for(var J="",t=0;!(t>=E/2);++t){var R=lA[C+t*2>>1];if(R==0)break;J+=String.fromCharCode(R)}return J},AE=(C,E,a)=>{if(a===void 0&&(a=2147483647),a<2)return 0;a-=2;for(var G=E,F=a<C.length*2?a/2:C.length,J=0;J<F;++J){var t=C.charCodeAt(J);lA[E>>1]=t,E+=2}return lA[E>>1]=0,E-G},qg=C=>C.length*2,IC=(C,E)=>{for(var a=0,G="";!(a>=E/4);){var F=vA[C+a*4>>2];if(F==0)break;if(++a,F>=65536){var J=F-65536;G+=String.fromCharCode(55296|J>>10,56320|J&1023)}else G+=String.fromCharCode(F)}return G},D=(C,E,a)=>{if(a===void 0&&(a=2147483647),a<4)return 0;for(var G=E,F=G+a-4,J=0;J<C.length;++J){var t=C.charCodeAt(J);if(t>=55296&&t<=57343){var R=C.charCodeAt(++J);t=65536+((t&1023)<<10)|R&1023}if(vA[E>>2]=t,E+=4,E+4>F)break}return vA[E>>2]=0,E-G},o=C=>{for(var E=0,a=0;a<C.length;++a){var G=C.charCodeAt(a);G>=55296&&G<=57343&&++a,E+=4}return E},s=(C,E,a)=>{a=FA(a);var G,F,J,t,R;E===2?(G=cQ,F=AE,t=qg,J=()=>BA,R=1):E===4&&(G=IC,F=D,t=o,J=()=>CA,R=2),BI(C,{name:a,fromWireType:M=>{for(var d=CA[M>>2],b=J(),X,QA=M+4,_=0;_<=d;++_){var eA=M+4+_*E;if(_==d||b[eA>>R]==0){var UA=eA-QA,SA=G(QA,UA);X===void 0?X=SA:(X+="\\0",X+=SA),QA=eA+E}}return uI(M),X},toWireType:(M,d)=>{typeof d!="string"&&Z(`Cannot pass non-string to C++ string type ${a}`);var b=t(d),X=gE(4+b+E);return CA[X>>2]=b>>R,F(d,X+4,b+E),M!==null&&M.push(uI,X),X},argPackAdvance:sI,readValueFromPointer:Mg,destructorFunction(M){uI(M)}})},h=(C,E)=>{E=FA(E),BI(C,{isVoid:!0,name:E,argPackAdvance:0,fromWireType:()=>{},toWireType:(a,G)=>{}})},S=()=>{if(!Sg())try{p?CE(iA):qI(iA)}catch(C){AI(C)}},U=C=>{if(!WA)try{C(),S()}catch(E){AI(E)}},r=C=>{if(typeof Atomics.waitAsync=="function"){var E=Atomics.waitAsync(vA,C>>2,C);E.value.then(c);var a=C+128;Atomics.store(vA,a>>2,1)}};I.__emscripten_thread_mailbox_await=r;var c=()=>{var C=JQ();C&&(r(C),U(zE))};I.checkMailbox=c;var q=(C,E,a)=>{if(C==E)setTimeout(()=>c());else if(p)postMessage({targetThread:C,cmd:"checkMailbox"});else{var G=m.pthreads[C];if(!G)return;G.postMessage({cmd:"checkMailbox"})}},H=[],Y=(C,E,a,G)=>{H.length=a;for(var F=G>>3,J=0;J<a;J++)H[J]=VI[F+J];var t=VE[C];m.currentProxiedOperationCallerThread=E;var R=t.apply(null,H);return m.currentProxiedOperationCallerThread=0,R},V=C=>{},AA=()=>{$A("")},O=C=>{O.shown||(O.shown={}),O.shown[C]||(O.shown[C]=1,KA(C))},sA=()=>{},GA=()=>{HB+=1},wA=()=>{throw GA(),"unwind"},JA;JA=()=>performance.timeOrigin+performance.now();var kI=C=>{$A("OOM")},RA=C=>{var E=aA.length;C>>>=0,kI(C)};function gC(C){return p?ZA(2,1,C):52}function oB(C,E,a,G,F){if(p)return ZA(3,1,C,E,a,G,F);var J=tg(E,a);return 70}var BC=[null,[],[]],CC=(C,E)=>{var a=BC[C];E===0||E===10?((C===1?HI:KA)(_g(a,0)),a.length=0):a.push(E)};function IE(C,E,a,G){if(p)return ZA(4,1,C,E,a,G);for(var F=0,J=0;J<a;J++){var t=CA[E>>2],R=CA[E+4>>2];E+=8;for(var M=0;M<R;M++)CC(C,aA[t+M]);F+=R}return CA[G>>2]=F,0}m.init(),ZC(),VA=I.BindingError=class extends Error{constructor(E){super(E),this.name="BindingError"}},zI=I.InternalError=class extends Error{constructor(E){super(E),this.name="InternalError"}},gB(),zC(),gQ(),XB=I.UnboundTypeError=QQ(Error,"UnboundTypeError"),wQ(),hQ();var VE=[v,qB,gC,oB,IE],TE={q:YB,i:OI,C:$g,v:jI,t:vC,o:VC,n:iQ,m:DQ,f:aQ,c:sQ,F:yQ,l:RQ,r:SQ,d:kQ,b:nA,k:$Q,h:s,p:h,x:q,A:Y,B:r,E:V,e:AA,z:sA,D:wA,g:JA,w:RA,u:qI,y:gC,s:oB,j:IE,a:PA||I.wasmMemory},IA=nB(),Po=IA.G,gE=I._malloc=IA.I,uI=I._free=IA.J,Wo=IA.__errno_location,vo=I.__emscripten_tls_init=IA.K,JQ=I._pthread_self=IA.L,XE=IA.M,Zo=I.__embind_initialize_bindings=IA.N,OE=I.__emscripten_thread_init=IA.O,Vo=I.__emscripten_thread_crashed=IA.P,To=IA.emscripten_main_thread_process_queued_calls,Xo=IA.emscripten_main_runtime_thread_id,jE=IA.Q,BE=IA.R,CE=I.__emscripten_thread_exit=IA.S,zE=IA.T,_E=IA.U,$E=IA.V,QE=IA.W,Ai=IA.X,Ii=IA.Y,Oo=I.dynCall_jiji=IA.Z;I.wasmMemory=PA,I.keepRuntimeAlive=Sg,I.ExitStatus=Rg,I.PThread=m;var QC;oI=function C(){QC||EE(),QC||(oI=C)};function EE(){if(RI>0)return;if(p){B(I),UB(),startWorker(I);return}if(pC(),RI>0)return;function C(){QC||(QC=!0,I.calledRun=!0,!WA&&(UB(),B(I),I.onRuntimeInitialized&&I.onRuntimeInitialized(),uC()))}I.setStatus?(I.setStatus("Running..."),setTimeout(function(){setTimeout(function(){I.setStatus("")},1),C()},1)):C()}if(I.preInit)for(typeof I.preInit=="function"&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();return EE(),A}})(),fo=(()=>{var g=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return function(A={}){var I=A,B,Q;I.ready=new Promise((D,o)=>{B=D,Q=o});var i=Object.assign({},I),w=[],e="./this.program",k=(D,o)=>{throw o},y=typeof window=="object",L=typeof importScripts=="function",T=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",p="";function j(D){return I.locateFile?I.locateFile(D,p):p+D}var NA,_A,gA;(y||L)&&(L?p=self.location.href:typeof document<"u"&&document.currentScript&&(p=document.currentScript.src),g&&(p=g),p.indexOf("blob:")!==0?p=p.substr(0,p.replace(/[?#].*/,"").lastIndexOf("/")+1):p="",NA=D=>{var o=new XMLHttpRequest;return o.open("GET",D,!1),o.send(null),o.responseText},L&&(gA=D=>{var o=new XMLHttpRequest;return o.open("GET",D,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),_A=(D,o,s)=>{var h=new XMLHttpRequest;h.open("GET",D,!0),h.responseType="arraybuffer",h.onload=()=>{if(h.status==200||h.status==0&&h.response){o(h.response);return}s()},h.onerror=s,h.send(null)});var yA=I.print||console.log.bind(console),HI=I.printErr||console.error.bind(console);Object.assign(I,i),i=null,I.arguments&&(w=I.arguments),I.thisProgram&&(e=I.thisProgram),I.quit&&(k=I.quit);var KA;I.wasmBinary&&(KA=I.wasmBinary),typeof WebAssembly!="object"&&oI("no native wasm support detected");function Zg(D){for(var o=atob(D),s=new Uint8Array(o.length),h=0;h<o.length;++h)s[h]=o.charCodeAt(h);return s}function fC(D){if(Og(D))return Zg(D.slice(Xg.length))}var FB,PA=!1,RB,WA,iA,LA,aA,lA,BA,vA,CA;function SB(){var D=FB.buffer;I.HEAP8=WA=new Int8Array(D),I.HEAP16=LA=new Int16Array(D),I.HEAPU8=iA=new Uint8Array(D),I.HEAPU16=aA=new Uint16Array(D),I.HEAP32=lA=new Int32Array(D),I.HEAPU32=BA=new Uint32Array(D),I.HEAPF32=vA=new Float32Array(D),I.HEAPF64=CA=new Float64Array(D)}var VI=[],tB=[],Fg=[],kB=!1;function cB(){if(I.preRun)for(typeof I.preRun=="function"&&(I.preRun=[I.preRun]);I.preRun.length;)pC(I.preRun.shift());jg(VI)}function JB(){kB=!0,jg(tB)}function bC(){if(I.postRun)for(typeof I.postRun=="function"&&(I.postRun=[I.postRun]);I.postRun.length;)uC(I.postRun.shift());jg(Fg)}function pC(D){VI.unshift(D)}function UB(D){tB.unshift(D)}function uC(D){Fg.unshift(D)}var iI=0,Vg=null,TI=null;function RI(D){iI++,I.monitorRunDependencies&&I.monitorRunDependencies(iI)}function Tg(D){if(iI--,I.monitorRunDependencies&&I.monitorRunDependencies(iI),iI==0&&(Vg!==null&&(clearInterval(Vg),Vg=null),TI)){var o=TI;TI=null,o()}}function oI(D){I.onAbort&&I.onAbort(D),D="Aborted("+D+")",HI(D),PA=!0,RB=1,D+=". Build with -sASSERTIONS for more info.";var o=new WebAssembly.RuntimeError(D);throw Q(o),o}var Xg="data:application/octet-stream;base64,",Og=D=>D.startsWith(Xg),$A;$A="data:application/octet-stream;base64,",Og($A)||($A=j($A));function rB(D){if(D==$A&&KA)return new Uint8Array(KA);var o=fC(D);if(o)return o;if(gA)return gA(D);throw"sync fetching of the wasm failed: you can preload it to Module[\'wasmBinary\'] manually, or emcc.py will do that for you when generating HTML (but not JS)"}function NB(D,o){var s,h=rB(D);s=new WebAssembly.Module(h);var S=new WebAssembly.Instance(s,o);return[S,s]}function dI(){var D={a:kQ};function o(h,S){return nA=h.exports,FB=nA.w,SB(),Ug=nA.y,UB(nA.x),Tg("wasm-instantiate"),nA}if(RI("wasm-instantiate"),I.instantiateWasm)try{return I.instantiateWasm(D,o)}catch(h){HI(`Module.instantiateWasm callback failed with error: ${h}`),Q(h)}var s=NB($A,D);return o(s[0])}var jg=D=>{for(;D.length>0;)D.shift()(I)},zQ=I.noExitRuntime||!0,nB=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Rg=(D,o,s)=>{for(var h=o+s,S=o;D[S]&&!(S>=h);)++S;if(S-o>16&&D.buffer&&nB)return nB.decode(D.subarray(o,S));for(var U="";o<S;){var r=D[o++];if(!(r&128)){U+=String.fromCharCode(r);continue}var c=D[o++]&63;if((r&224)==192){U+=String.fromCharCode((r&31)<<6|c);continue}var q=D[o++]&63;if((r&240)==224?r=(r&15)<<12|c<<6|q:r=(r&7)<<18|c<<12|q<<6|D[o++]&63,r<65536)U+=String.fromCharCode(r);else{var H=r-65536;U+=String.fromCharCode(55296|H>>10,56320|H&1023)}}return U},SI=(D,o)=>D?Rg(iA,D,o):"",xC=(D,o,s,h)=>{oI(`Assertion failed: ${SI(D)}, at: `+[o?SI(o):"unknown filename",s,h?SI(h):"unknown function"])};function mC(D){this.excPtr=D,this.ptr=D-24,this.set_type=function(o){BA[this.ptr+4>>2]=o},this.get_type=function(){return BA[this.ptr+4>>2]},this.set_destructor=function(o){BA[this.ptr+8>>2]=o},this.get_destructor=function(){return BA[this.ptr+8>>2]},this.set_caught=function(o){o=o?1:0,WA[this.ptr+12>>0]=o},this.get_caught=function(){return WA[this.ptr+12>>0]!=0},this.set_rethrown=function(o){o=o?1:0,WA[this.ptr+13>>0]=o},this.get_rethrown=function(){return WA[this.ptr+13>>0]!=0},this.init=function(o,s){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(s)},this.set_adjusted_ptr=function(o){BA[this.ptr+16>>2]=o},this.get_adjusted_ptr=function(){return BA[this.ptr+16>>2]},this.get_exception_ptr=function(){var o=cQ(this.get_type());if(o)return BA[this.excPtr>>2];var s=this.get_adjusted_ptr();return s!==0?s:this.excPtr}}var zg=0,PC=0,HB=(D,o,s)=>{var h=new mC(D);throw h.init(o,s),zg=D,PC++,zg},Sg=(D,o,s,h,S)=>{},dB=()=>{for(var D=new Array(256),o=0;o<256;++o)D[o]=String.fromCharCode(o);_g=D},_g,oA=D=>{for(var o="",s=D;iA[s];)o+=_g[iA[s++]];return o},DI={},MI={},tg={},ZA,v=D=>{throw new ZA(D)},MB,qI=D=>{throw new MB(D)},AI=(D,o,s)=>{D.forEach(function(c){tg[c]=o});function h(c){var q=s(c);q.length!==D.length&&qI("Mismatched type converter count");for(var H=0;H<D.length;++H)YA(D[H],q[H])}var S=new Array(o.length),U=[],r=0;o.forEach((c,q)=>{MI.hasOwnProperty(c)?S[q]=MI[c]:(U.push(c),DI.hasOwnProperty(c)||(DI[c]=[]),DI[c].push(()=>{S[q]=MI[c],++r,r===U.length&&h(S)}))}),U.length===0&&h(S)};function m(D,o,s={}){var h=o.name;if(D||v(`type "${h}" must have a positive integer typeid pointer`),MI.hasOwnProperty(D)){if(s.ignoreDuplicateRegistrations)return;v(`Cannot register type \'${h}\' twice`)}if(MI[D]=o,delete tg[D],DI.hasOwnProperty(D)){var S=DI[D];delete DI[D],S.forEach(U=>U())}}function YA(D,o,s={}){if(!("argPackAdvance"in o))throw new TypeError("registerType registeredInstance requires argPackAdvance");return m(D,o,s)}var aI=8,qB=(D,o,s,h)=>{o=oA(o),YA(D,{name:o,fromWireType:function(S){return!!S},toWireType:function(S,U){return U?s:h},argPackAdvance:aI,readValueFromPointer:function(S){return this.fromWireType(iA[S])},destructorFunction:null})},kg=D=>({count:D.count,deleteScheduled:D.deleteScheduled,preservePointerOnDelete:D.preservePointerOnDelete,ptr:D.ptr,ptrType:D.ptrType,smartPtr:D.smartPtr,smartPtrType:D.smartPtrType}),cg=D=>{function o(s){return s.$$.ptrType.registeredClass.name}v(o(D)+" instance already deleted")},XI=!1,KB=D=>{},LB=D=>{D.smartPtr?D.smartPtrType.rawDestructor(D.smartPtr):D.ptrType.registeredClass.rawDestructor(D.ptr)},lB=D=>{D.count.value-=1;var o=D.count.value===0;o&&LB(D)},YB=(D,o,s)=>{if(o===s)return D;if(s.baseClass===void 0)return null;var h=YB(D,o,s.baseClass);return h===null?null:s.downcast(h)},fB={},bB=()=>Object.keys(KI).length,WC=()=>{var D=[];for(var o in KI)KI.hasOwnProperty(o)&&D.push(KI[o]);return D},OI=[],$g=()=>{for(;OI.length;){var D=OI.pop();D.$$.deleteScheduled=!1,D.delete()}},jI,vC=D=>{jI=D,OI.length&&jI&&jI($g)},ZC=()=>{I.getInheritedInstanceCount=bB,I.getLiveInheritedInstances=WC,I.flushPendingDeletes=$g,I.setDelayFunction=vC},KI={},FA=(D,o)=>{for(o===void 0&&v("ptr should not be undefined");D.baseClass;)o=D.upcast(o),D=D.baseClass;return o},LI=(D,o)=>(o=FA(D,o),KI[o]),II=(D,o)=>{(!o.ptrType||!o.ptr)&&qI("makeClassHandle requires ptr and ptrType");var s=!!o.smartPtrType,h=!!o.smartPtr;return s!==h&&qI("Both smartPtrType and smartPtr must be specified"),o.count={value:1},VA(Object.create(D,{$$:{value:o}}))};function Jg(D){var o=this.getPointee(D);if(!o)return this.destructor(D),null;var s=LI(this.registeredClass,o);if(s!==void 0){if(s.$$.count.value===0)return s.$$.ptr=o,s.$$.smartPtr=D,s.clone();var h=s.clone();return this.destructor(D),h}function S(){return this.isSmartPointer?II(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:o,smartPtrType:this,smartPtr:D}):II(this.registeredClass.instancePrototype,{ptrType:this,ptr:D})}var U=this.registeredClass.getActualType(o),r=fB[U];if(!r)return S.call(this);var c;this.isConst?c=r.constPointerType:c=r.pointerType;var q=YB(o,this.registeredClass,c.registeredClass);return q===null?S.call(this):this.isSmartPointer?II(c.registeredClass.instancePrototype,{ptrType:c,ptr:q,smartPtrType:this,smartPtr:D}):II(c.registeredClass.instancePrototype,{ptrType:c,ptr:q})}var VA=D=>typeof FinalizationRegistry>"u"?(VA=o=>o,D):(XI=new FinalizationRegistry(o=>{lB(o.$$)}),VA=o=>{var s=o.$$,h=!!s.smartPtr;if(h){var S={$$:s};XI.register(o,S,o)}return o},KB=o=>XI.unregister(o),VA(D)),Z=()=>{Object.assign(zI.prototype,{isAliasOf(D){if(!(this instanceof zI)||!(D instanceof zI))return!1;var o=this.$$.ptrType.registeredClass,s=this.$$.ptr;D.$$=D.$$;for(var h=D.$$.ptrType.registeredClass,S=D.$$.ptr;o.baseClass;)s=o.upcast(s),o=o.baseClass;for(;h.baseClass;)S=h.upcast(S),h=h.baseClass;return o===h&&s===S},clone(){if(this.$$.ptr||cg(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var D=VA(Object.create(Object.getPrototypeOf(this),{$$:{value:kg(this.$$)}}));return D.$$.count.value+=1,D.$$.deleteScheduled=!1,D},delete(){this.$$.ptr||cg(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&v("Object already scheduled for deletion"),KB(this),lB(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},isDeleted(){return!this.$$.ptr},deleteLater(){return this.$$.ptr||cg(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&v("Object already scheduled for deletion"),OI.push(this),OI.length===1&&jI&&jI($g),this.$$.deleteScheduled=!0,this}})};function zI(){}var tI=(D,o)=>Object.defineProperty(o,"name",{value:D}),gI=(D,o,s)=>{if(D[o].overloadTable===void 0){var h=D[o];D[o]=function(){return D[o].overloadTable.hasOwnProperty(arguments.length)||v(`Function \'${s}\' called with an invalid number of arguments (${arguments.length}) - expects one of (${D[o].overloadTable})!`),D[o].overloadTable[arguments.length].apply(this,arguments)},D[o].overloadTable=[],D[o].overloadTable[h.argCount]=h}},pB=(D,o,s)=>{I.hasOwnProperty(D)?((s===void 0||I[D].overloadTable!==void 0&&I[D].overloadTable[s]!==void 0)&&v(`Cannot register public name \'${D}\' twice`),gI(I,D,D),I.hasOwnProperty(s)&&v(`Cannot register multiple overloads of a function with the same number of arguments (${s})!`),I[D].overloadTable[s]=o):(I[D]=o,s!==void 0&&(I[D].numArguments=s))},BI=48,sI=57,VC=D=>{if(D===void 0)return"_unknown";D=D.replace(/[^a-zA-Z0-9_]/g,"$");var o=D.charCodeAt(0);return o>=BI&&o<=sI?`_${D}`:D};function TC(D,o,s,h,S,U,r,c){this.name=D,this.constructor=o,this.instancePrototype=s,this.rawDestructor=h,this.baseClass=S,this.getActualType=U,this.upcast=r,this.downcast=c,this.pureVirtualFunctions=[]}var lI=(D,o,s)=>{for(;o!==s;)o.upcast||v(`Expected null or instance of ${s.name}, got an instance of ${o.name}`),D=o.upcast(D),o=o.baseClass;return D};function AB(D,o){if(o===null)return this.isReference&&v(`null is not a valid ${this.name}`),0;o.$$||v(`Cannot pass "${CB(o)}" as a ${this.name}`),o.$$.ptr||v(`Cannot pass deleted object as a pointer of type ${this.name}`);var s=o.$$.ptrType.registeredClass,h=lI(o.$$.ptr,s,this.registeredClass);return h}function uB(D,o){var s;if(o===null)return this.isReference&&v(`null is not a valid ${this.name}`),this.isSmartPointer?(s=this.rawConstructor(),D!==null&&D.push(this.rawDestructor,s),s):0;o.$$||v(`Cannot pass "${CB(o)}" as a ${this.name}`),o.$$.ptr||v(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&o.$$.ptrType.isConst&&v(`Cannot convert argument of type ${o.$$.smartPtrType?o.$$.smartPtrType.name:o.$$.ptrType.name} to parameter type ${this.name}`);var h=o.$$.ptrType.registeredClass;if(s=lI(o.$$.ptr,h,this.registeredClass),this.isSmartPointer)switch(o.$$.smartPtr===void 0&&v("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:o.$$.smartPtrType===this?s=o.$$.smartPtr:v(`Cannot convert argument of type ${o.$$.smartPtrType?o.$$.smartPtrType.name:o.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:s=o.$$.smartPtr;break;case 2:if(o.$$.smartPtrType===this)s=o.$$.smartPtr;else{var S=o.clone();s=this.rawShare(s,bI.toHandle(()=>S.delete())),D!==null&&D.push(this.rawDestructor,s)}break;default:v("Unsupporting sharing policy")}return s}function XC(D,o){if(o===null)return this.isReference&&v(`null is not a valid ${this.name}`),0;o.$$||v(`Cannot pass "${CB(o)}" as a ${this.name}`),o.$$.ptr||v(`Cannot pass deleted object as a pointer of type ${this.name}`),o.$$.ptrType.isConst&&v(`Cannot convert argument of type ${o.$$.ptrType.name} to parameter type ${this.name}`);var s=o.$$.ptrType.registeredClass,h=lI(o.$$.ptr,s,this.registeredClass);return h}function IB(D){return this.fromWireType(BA[D>>2])}var xB=()=>{Object.assign(_I.prototype,{getPointee(D){return this.rawGetPointee&&(D=this.rawGetPointee(D)),D},destructor(D){this.rawDestructor&&this.rawDestructor(D)},argPackAdvance:aI,readValueFromPointer:IB,deleteObject(D){D!==null&&D.delete()},fromWireType:Jg})};function _I(D,o,s,h,S,U,r,c,q,H,Y){this.name=D,this.registeredClass=o,this.isReference=s,this.isConst=h,this.isSmartPointer=S,this.pointeeType=U,this.sharingPolicy=r,this.rawGetPointee=c,this.rawConstructor=q,this.rawShare=H,this.rawDestructor=Y,!S&&o.baseClass===void 0?h?(this.toWireType=AB,this.destructorFunction=null):(this.toWireType=XC,this.destructorFunction=null):this.toWireType=uB}var mB=(D,o,s)=>{I.hasOwnProperty(D)||qI("Replacing nonexistant public symbol"),I[D].overloadTable!==void 0&&s!==void 0?I[D].overloadTable[s]=o:(I[D]=o,I[D].argCount=s)},OC=(D,o,s)=>{var h=I["dynCall_"+D];return s&&s.length?h.apply(null,[o].concat(s)):h.call(null,o)},wI=[],Ug,YI=D=>{var o=wI[D];return o||(D>=wI.length&&(wI.length=D+1),wI[D]=o=Ug.get(D)),o},jC=(D,o,s)=>{if(D.includes("j"))return OC(D,o,s);var h=YI(o).apply(null,s);return h},zC=(D,o)=>{var s=[];return function(){return s.length=0,Object.assign(s,arguments),jC(D,o,s)}},cA=(D,o)=>{D=oA(D);function s(){return D.includes("j")?zC(D,o):YI(o)}var h=s();return typeof h!="function"&&v(`unknown function pointer with signature ${D}: ${o}`),h},_C=(D,o)=>{var s=tI(o,function(h){this.name=o,this.message=h;var S=new Error(h).stack;S!==void 0&&(this.stack=this.toString()+`\n`+S.replace(/^Error(:[^\\n]*)?\\n/,""))});return s.prototype=Object.create(D.prototype),s.prototype.constructor=s,s.prototype.toString=function(){return this.message===void 0?this.name:`${this.name}: ${this.message}`},s},PB,rg=D=>{var o=AC(D),s=oA(o);return GI(o),s},fI=(D,o)=>{var s=[],h={};function S(U){if(!h[U]&&!MI[U]){if(tg[U]){tg[U].forEach(S);return}s.push(U),h[U]=!0}}throw o.forEach(S),new PB(`${D}: `+s.map(rg).join([", "]))},$I=(D,o,s,h,S,U,r,c,q,H,Y,V,AA)=>{Y=oA(Y),U=cA(S,U),c&&(c=cA(r,c)),H&&(H=cA(q,H)),AA=cA(V,AA);var O=VC(Y);pB(O,function(){fI(`Cannot construct ${Y} due to unbound types`,[h])}),AI([D,o,s],h?[h]:[],function(sA){sA=sA[0];var GA,wA;h?(GA=sA.registeredClass,wA=GA.instancePrototype):wA=zI.prototype;var JA=tI(Y,function(){if(Object.getPrototypeOf(this)!==kI)throw new ZA("Use \'new\' to construct "+Y);if(RA.constructor_body===void 0)throw new ZA(Y+" has no accessible constructor");var CC=RA.constructor_body[arguments.length];if(CC===void 0)throw new ZA(`Tried to invoke ctor of ${Y} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(RA.constructor_body).toString()}) parameters instead!`);return CC.apply(this,arguments)}),kI=Object.create(wA,{constructor:{value:JA}});JA.prototype=kI;var RA=new TC(Y,JA,kI,AA,GA,U,c,H);RA.baseClass&&(RA.baseClass.__derivedClasses===void 0&&(RA.baseClass.__derivedClasses=[]),RA.baseClass.__derivedClasses.push(RA));var gC=new _I(Y,RA,!0,!1,!1),oB=new _I(Y+"*",RA,!1,!1,!1),BC=new _I(Y+" const*",RA,!1,!0,!1);return fB[D]={pointerType:oB,constPointerType:BC},mB(O,JA),[gC,oB,BC]})},gB=(D,o)=>{for(var s=[],h=0;h<D;h++)s.push(BA[o+h*4>>2]);return s},Ag=D=>{for(;D.length;){var o=D.pop(),s=D.pop();s(o)}};function Ng(D,o){if(!(D instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof D} which is not a function`);var s=tI(D.name||"unknownFunctionName",function(){});s.prototype=D.prototype;var h=new s,S=D.apply(h,o);return S instanceof Object?S:h}function ng(D,o,s,h,S,U){var r=o.length;r<2&&v("argTypes array size mismatch! Must at least get return value and \'this\' types!");for(var c=o[1]!==null&&s!==null,q=!1,H=1;H<o.length;++H)if(o[H]!==null&&o[H].destructorFunction===void 0){q=!0;break}for(var Y=o[0].name!=="void",V="",AA="",H=0;H<r-2;++H)V+=(H!==0?", ":"")+"arg"+H,AA+=(H!==0?", ":"")+"arg"+H+"Wired";var O=`\n        return function (${V}) {\n        if (arguments.length !== ${r-2}) {\n          throwBindingError(\'function ${D} called with \' + arguments.length + \' arguments, expected ${r-2}\');\n        }`;q&&(O+=`var destructors = [];\n`);var sA=q?"destructors":"null",GA=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],wA=[v,h,S,Ag,o[0],o[1]];c&&(O+="var thisWired = classParam.toWireType("+sA+`, this);\n`);for(var H=0;H<r-2;++H)O+="var arg"+H+"Wired = argType"+H+".toWireType("+sA+", arg"+H+"); // "+o[H+2].name+`\n`,GA.push("argType"+H),wA.push(o[H+2]);if(c&&(AA="thisWired"+(AA.length>0?", ":"")+AA),O+=(Y||U?"var rv = ":"")+"invoker(fn"+(AA.length>0?", ":"")+AA+`);\n`,q)O+=`runDestructors(destructors);\n`;else for(var H=c?1:2;H<o.length;++H){var JA=H===1?"thisWired":"arg"+(H-2)+"Wired";o[H].destructorFunction!==null&&(O+=JA+"_dtor("+JA+"); // "+o[H].name+`\n`,GA.push(JA+"_dtor"),wA.push(o[H].destructorFunction))}Y&&(O+=`var ret = retType.fromWireType(rv);\nreturn ret;\n`),O+=`}\n`,GA.push(O);var kI=Ng(Function,GA).apply(null,wA);return tI(D,kI)}var WB=(D,o,s,h,S,U)=>{var r=gB(o,s);S=cA(h,S),AI([],[D],function(c){c=c[0];var q=`constructor ${c.name}`;if(c.registeredClass.constructor_body===void 0&&(c.registeredClass.constructor_body=[]),c.registeredClass.constructor_body[o-1]!==void 0)throw new ZA(`Cannot register multiple constructors with identical number of parameters (${o-1}) for class \'${c.name}\'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return c.registeredClass.constructor_body[o-1]=()=>{fI(`Cannot construct ${c.name} due to unbound types`,r)},AI([],r,H=>(H.splice(1,0,null),c.registeredClass.constructor_body[o-1]=ng(q,H,null,S,U),[])),[]})},vB=D=>{D=D.trim();let o=D.indexOf("(");return o!==-1?D.substr(0,o):D},$C=(D,o,s,h,S,U,r,c,q)=>{var H=gB(s,h);o=oA(o),o=vB(o),U=cA(S,U),AI([],[D],function(Y){Y=Y[0];var V=`${Y.name}.${o}`;o.startsWith("@@")&&(o=Symbol[o.substring(2)]),c&&Y.registeredClass.pureVirtualFunctions.push(o);function AA(){fI(`Cannot call ${V} due to unbound types`,H)}var O=Y.registeredClass.instancePrototype,sA=O[o];return sA===void 0||sA.overloadTable===void 0&&sA.className!==Y.name&&sA.argCount===s-2?(AA.argCount=s-2,AA.className=Y.name,O[o]=AA):(gI(O,o,V),O[o].overloadTable[s-2]=AA),AI([],H,function(GA){var wA=ng(V,GA,Y,U,r,q);return O[o].overloadTable===void 0?(wA.argCount=s-2,O[o]=wA):O[o].overloadTable[s-2]=wA,[]}),[]})},ZB=(D,o,s)=>(D instanceof Object||v(`${s} with invalid "this": ${D}`),D instanceof o.registeredClass.constructor||v(`${s} incompatible with "this" of type ${D.constructor.name}`),D.$$.ptr||v(`cannot call emscripten binding method ${s} on deleted object`),lI(D.$$.ptr,D.$$.ptrType.registeredClass,o.registeredClass)),AQ=(D,o,s,h,S,U,r,c,q,H)=>{o=oA(o),S=cA(h,S),AI([],[D],function(Y){Y=Y[0];var V=`${Y.name}.${o}`,AA={get(){fI(`Cannot access ${V} due to unbound types`,[s,r])},enumerable:!0,configurable:!0};return q?AA.set=()=>fI(`Cannot access ${V} due to unbound types`,[s,r]):AA.set=O=>v(V+" is a read-only property"),Object.defineProperty(Y.registeredClass.instancePrototype,o,AA),AI([],q?[s,r]:[s],function(O){var sA=O[0],GA={get(){var JA=ZB(this,Y,V+" getter");return sA.fromWireType(S(U,JA))},enumerable:!0};if(q){q=cA(c,q);var wA=O[1];GA.set=function(JA){var kI=ZB(this,Y,V+" setter"),RA=[];q(H,kI,wA.toWireType(RA,JA)),Ag(RA)}}return Object.defineProperty(Y.registeredClass.instancePrototype,o,GA),[]}),[]})};function Hg(){Object.assign(VB.prototype,{get(D){return this.allocated[D]},has(D){return this.allocated[D]!==void 0},allocate(D){var o=this.freelist.pop()||this.allocated.length;return this.allocated[o]=D,o},free(D){this.allocated[D]=void 0,this.freelist.push(D)}})}function VB(){this.allocated=[void 0],this.freelist=[]}var fA=new VB,IQ=D=>{D>=fA.reserved&&--fA.get(D).refcount===0&&fA.free(D)},TB=()=>{for(var D=0,o=fA.reserved;o<fA.allocated.length;++o)fA.allocated[o]!==void 0&&++D;return D},gQ=()=>{fA.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),fA.reserved=fA.allocated.length,I.count_emval_handles=TB},bI={toValue:D=>(D||v("Cannot use deleted val. handle = "+D),fA.get(D).value),toHandle:D=>{switch(D){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return fA.allocate({refcount:1,value:D})}}};function BB(D){return this.fromWireType(lA[D>>2])}var BQ=(D,o)=>{o=oA(o),YA(D,{name:o,fromWireType:s=>{var h=bI.toValue(s);return IQ(s),h},toWireType:(s,h)=>bI.toHandle(h),argPackAdvance:aI,readValueFromPointer:BB,destructorFunction:null})},CB=D=>{if(D===null)return"null";var o=typeof D;return o==="object"||o==="array"||o==="function"?D.toString():""+D},CQ=(D,o)=>{switch(o){case 4:return function(s){return this.fromWireType(vA[s>>2])};case 8:return function(s){return this.fromWireType(CA[s>>3])};default:throw new TypeError(`invalid float width (${o}): ${D}`)}},CI=(D,o,s)=>{o=oA(o),YA(D,{name:o,fromWireType:h=>h,toWireType:(h,S)=>S,argPackAdvance:aI,readValueFromPointer:CQ(o,s),destructorFunction:null})},QQ=(D,o,s,h,S,U,r)=>{var c=gB(o,s);D=oA(D),D=vB(D),S=cA(h,S),pB(D,function(){fI(`Cannot call ${D} due to unbound types`,c)},o-1),AI([],c,function(q){var H=[q[0],null].concat(q.slice(1));return mB(D,ng(D,H,null,S,U,r),o-1),[]})},XB=(D,o,s)=>{switch(o){case 1:return s?h=>WA[h>>0]:h=>iA[h>>0];case 2:return s?h=>LA[h>>1]:h=>aA[h>>1];case 4:return s?h=>lA[h>>2]:h=>BA[h>>2];default:throw new TypeError(`invalid integer width (${o}): ${D}`)}},EQ=(D,o,s,h,S)=>{o=oA(o),S===-1&&(S=4294967295);var U=Y=>Y;if(h===0){var r=32-8*s;U=Y=>Y<<r>>>r}var c=o.includes("unsigned"),q=(Y,V)=>{},H;c?H=function(Y,V){return q(V,this.name),V>>>0}:H=function(Y,V){return q(V,this.name),V},YA(D,{name:o,fromWireType:U,toWireType:H,argPackAdvance:aI,readValueFromPointer:XB(o,s,h!==0),destructorFunction:null})},pI=(D,o,s)=>{var h=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],S=h[o];function U(r){var c=BA[r>>2],q=BA[r+4>>2];return new S(WA.buffer,q,c)}s=oA(s),YA(D,{name:s,fromWireType:U,argPackAdvance:aI,readValueFromPointer:U},{ignoreDuplicateRegistrations:!0})},iQ=(D,o,s,h)=>{if(!(h>0))return 0;for(var S=s,U=s+h-1,r=0;r<D.length;++r){var c=D.charCodeAt(r);if(c>=55296&&c<=57343){var q=D.charCodeAt(++r);c=65536+((c&1023)<<10)|q&1023}if(c<=127){if(s>=U)break;o[s++]=c}else if(c<=2047){if(s+1>=U)break;o[s++]=192|c>>6,o[s++]=128|c&63}else if(c<=65535){if(s+2>=U)break;o[s++]=224|c>>12,o[s++]=128|c>>6&63,o[s++]=128|c&63}else{if(s+3>=U)break;o[s++]=240|c>>18,o[s++]=128|c>>12&63,o[s++]=128|c>>6&63,o[s++]=128|c&63}}return o[s]=0,s-S},QB=(D,o,s)=>iQ(D,iA,o,s),OB=D=>{for(var o=0,s=0;s<D.length;++s){var h=D.charCodeAt(s);h<=127?o++:h<=2047?o+=2:h>=55296&&h<=57343?(o+=4,++s):o+=3}return o},oQ=(D,o)=>{o=oA(o);var s=o==="std::string";YA(D,{name:o,fromWireType(h){var S=BA[h>>2],U=h+4,r;if(s)for(var c=U,q=0;q<=S;++q){var H=U+q;if(q==S||iA[H]==0){var Y=H-c,V=SI(c,Y);r===void 0?r=V:(r+="\\0",r+=V),c=H+1}}else{for(var AA=new Array(S),q=0;q<S;++q)AA[q]=String.fromCharCode(iA[U+q]);r=AA.join("")}return GI(h),r},toWireType(h,S){S instanceof ArrayBuffer&&(S=new Uint8Array(S));var U,r=typeof S=="string";r||S instanceof Uint8Array||S instanceof Uint8ClampedArray||S instanceof Int8Array||v("Cannot pass non-string to std::string"),s&&r?U=OB(S):U=S.length;var c=$B(4+U+1),q=c+4;if(BA[c>>2]=U,s&&r)QB(S,q,U+1);else if(r)for(var H=0;H<U;++H){var Y=S.charCodeAt(H);Y>255&&(GI(q),v("String has UTF-16 code units that do not fit in 8 bits")),iA[q+H]=Y}else for(var H=0;H<U;++H)iA[q+H]=S[H];return h!==null&&h.push(GI,c),c},argPackAdvance:aI,readValueFromPointer:IB,destructorFunction(h){GI(h)}})},dg=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,DQ=(D,o)=>{for(var s=D,h=s>>1,S=h+o/2;!(h>=S)&&aA[h];)++h;if(s=h<<1,s-D>32&&dg)return dg.decode(iA.subarray(D,s));for(var U="",r=0;!(r>=o/2);++r){var c=LA[D+r*2>>1];if(c==0)break;U+=String.fromCharCode(c)}return U},jB=(D,o,s)=>{if(s===void 0&&(s=2147483647),s<2)return 0;s-=2;for(var h=o,S=s<D.length*2?s/2:D.length,U=0;U<S;++U){var r=D.charCodeAt(U);LA[o>>1]=r,o+=2}return LA[o>>1]=0,o-h},aQ=D=>D.length*2,zB=(D,o)=>{for(var s=0,h="";!(s>=o/4);){var S=lA[D+s*4>>2];if(S==0)break;if(++s,S>=65536){var U=S-65536;h+=String.fromCharCode(55296|U>>10,56320|U&1023)}else h+=String.fromCharCode(S)}return h},sQ=(D,o,s)=>{if(s===void 0&&(s=2147483647),s<4)return 0;for(var h=o,S=h+s-4,U=0;U<D.length;++U){var r=D.charCodeAt(U);if(r>=55296&&r<=57343){var c=D.charCodeAt(++U);r=65536+((r&1023)<<10)|c&1023}if(lA[o>>2]=r,o+=4,o+4>S)break}return lA[o>>2]=0,o-h},wQ=D=>{for(var o=0,s=0;s<D.length;++s){var h=D.charCodeAt(s);h>=55296&&h<=57343&&++s,o+=4}return o},_B=(D,o,s)=>{s=oA(s);var h,S,U,r,c;o===2?(h=DQ,S=jB,r=aQ,U=()=>aA,c=1):o===4&&(h=zB,S=sQ,r=wQ,U=()=>BA,c=2),YA(D,{name:s,fromWireType:q=>{for(var H=BA[q>>2],Y=U(),V,AA=q+4,O=0;O<=H;++O){var sA=q+4+O*o;if(O==H||Y[sA>>c]==0){var GA=sA-AA,wA=h(AA,GA);V===void 0?V=wA:(V+="\\0",V+=wA),AA=sA+o}}return GI(q),V},toWireType:(q,H)=>{typeof H!="string"&&v(`Cannot pass non-string to C++ string type ${s}`);var Y=r(H),V=$B(4+Y+o);return BA[V>>2]=Y>>c,S(H,V+4,Y+o),q!==null&&q.push(GI,V),V},argPackAdvance:aI,readValueFromPointer:BB,destructorFunction(q){GI(q)}})},bA=(D,o)=>{o=oA(o),YA(D,{isVoid:!0,name:o,argPackAdvance:0,fromWireType:()=>{},toWireType:(s,h)=>{}})},GQ=()=>{oI("")},eQ=(D,o,s)=>iA.copyWithin(D,o,o+s),hQ=D=>{oI("OOM")},EB=D=>{var o=iA.length;D>>>=0,hQ(D)},Mg={varargs:void 0,get(){var D=lA[+Mg.varargs>>2];return Mg.varargs+=4,D},getp(){return Mg.get()},getStr(D){var o=SI(D);return o}},yQ=D=>52,iB=(D,o)=>o+2097152>>>0<4194305-!!D?(D>>>0)+o*4294967296:NaN;function FQ(D,o,s,h,S){var U=iB(o,s);return 70}var RQ=[null,[],[]],SQ=(D,o)=>{var s=RQ[D];o===0||o===10?((D===1?yA:HI)(Rg(s,0)),s.length=0):s.push(o)},tQ=(D,o,s,h)=>{for(var S=0,U=0;U<s;U++){var r=BA[o>>2],c=BA[o+4>>2];o+=8;for(var q=0;q<c;q++)SQ(D,iA[r+q]);S+=c}return BA[h>>2]=S,0};dB(),ZA=I.BindingError=class extends Error{constructor(o){super(o),this.name="BindingError"}},MB=I.InternalError=class extends Error{constructor(o){super(o),this.name="InternalError"}},Z(),ZC(),xB(),PB=I.UnboundTypeError=_C(Error,"UnboundTypeError"),Hg(),gQ();var kQ={o:xC,g:HB,r:Sg,m:qB,l:$I,k:WB,e:$C,b:AQ,v:BQ,j:CI,p:QQ,c:EQ,a:pI,i:oQ,f:_B,n:bA,d:GQ,u:eQ,s:EB,t:yQ,q:FQ,h:tQ},nA=dI(),_Q=nA.x,$B=I._malloc=nA.z,GI=I._free=nA.A,$Q=nA.__errno_location,AC=nA.B,cQ=nA.C,AE=I.dynCall_jiji=nA.D,qg;TI=function D(){qg||IC(),qg||(TI=D)};function IC(){if(iI>0||(cB(),iI>0))return;function D(){qg||(qg=!0,I.calledRun=!0,!PA&&(JB(),B(I),I.onRuntimeInitialized&&I.onRuntimeInitialized(),bC()))}I.setStatus?(I.setStatus("Running..."),setTimeout(function(){setTimeout(function(){I.setStatus("")},1),D()},1)):D()}if(I.preInit)for(typeof I.preInit=="function"&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();return IC(),A}})(),uE=self.crossOriginIsolated?Yo:fo;typeof xE=="object"&&typeof PQ=="object"?PQ.exports=uE:typeof define=="function"&&define.amd&&define([],()=>uE)});var z;(function(g){g.assertEqual=Q=>Q;function A(Q){}g.assertIs=A;function I(Q){throw new Error}g.assertNever=I,g.arrayToEnum=Q=>{let i={};for(let w of Q)i[w]=w;return i},g.getValidEnumValues=Q=>{let i=g.objectKeys(Q).filter(e=>typeof Q[Q[e]]!="number"),w={};for(let e of i)w[e]=Q[e];return g.objectValues(w)},g.objectValues=Q=>g.objectKeys(Q).map(function(i){return Q[i]}),g.objectKeys=typeof Object.keys=="function"?Q=>Object.keys(Q):Q=>{let i=[];for(let w in Q)Object.prototype.hasOwnProperty.call(Q,w)&&i.push(w);return i},g.find=(Q,i)=>{for(let w of Q)if(i(w))return w},g.isInteger=typeof Number.isInteger=="function"?Q=>Number.isInteger(Q):Q=>typeof Q=="number"&&isFinite(Q)&&Math.floor(Q)===Q;function B(Q,i=" | "){return Q.map(w=>typeof w=="string"?`\'${w}\'`:w).join(i)}g.joinValues=B,g.jsonStringifyReplacer=(Q,i)=>typeof i=="bigint"?i.toString():i})(z||(z={}));var rQ;(function(g){g.mergeShapes=(A,I)=>({...A,...I})})(rQ||(rQ={}));var K=z.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),xI=g=>{switch(typeof g){case"undefined":return K.undefined;case"string":return K.string;case"number":return isNaN(g)?K.nan:K.number;case"boolean":return K.boolean;case"function":return K.function;case"bigint":return K.bigint;case"symbol":return K.symbol;case"object":return Array.isArray(g)?K.array:g===null?K.null:g.then&&typeof g.then=="function"&&g.catch&&typeof g.catch=="function"?K.promise:typeof Map<"u"&&g instanceof Map?K.map:typeof Set<"u"&&g instanceof Set?K.set:typeof Date<"u"&&g instanceof Date?K.date:K.object;default:return K.unknown}},N=z.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),ai=g=>JSON.stringify(g,null,2).replace(/"([^"]+)":/g,"$1:"),pA=class extends Error{constructor(A){super(),this.issues=[],this.addIssue=B=>{this.issues=[...this.issues,B]},this.addIssues=(B=[])=>{this.issues=[...this.issues,...B]};let I=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,I):this.__proto__=I,this.name="ZodError",this.issues=A}get errors(){return this.issues}format(A){let I=A||function(i){return i.message},B={_errors:[]},Q=i=>{for(let w of i.issues)if(w.code==="invalid_union")w.unionErrors.map(Q);else if(w.code==="invalid_return_type")Q(w.returnTypeError);else if(w.code==="invalid_arguments")Q(w.argumentsError);else if(w.path.length===0)B._errors.push(I(w));else{let e=B,k=0;for(;k<w.path.length;){let y=w.path[k];k===w.path.length-1?(e[y]=e[y]||{_errors:[]},e[y]._errors.push(I(w))):e[y]=e[y]||{_errors:[]},e=e[y],k++}}};return Q(this),B}toString(){return this.message}get message(){return JSON.stringify(this.issues,z.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(A=I=>I.message){let I={},B=[];for(let Q of this.issues)Q.path.length>0?(I[Q.path[0]]=I[Q.path[0]]||[],I[Q.path[0]].push(A(Q))):B.push(A(Q));return{formErrors:B,fieldErrors:I}}get formErrors(){return this.flatten()}};pA.create=g=>new pA(g);var DB=(g,A)=>{let I;switch(g.code){case N.invalid_type:g.received===K.undefined?I="Required":I=`Expected ${g.expected}, received ${g.received}`;break;case N.invalid_literal:I=`Invalid literal value, expected ${JSON.stringify(g.expected,z.jsonStringifyReplacer)}`;break;case N.unrecognized_keys:I=`Unrecognized key(s) in object: ${z.joinValues(g.keys,", ")}`;break;case N.invalid_union:I="Invalid input";break;case N.invalid_union_discriminator:I=`Invalid discriminator value. Expected ${z.joinValues(g.options)}`;break;case N.invalid_enum_value:I=`Invalid enum value. Expected ${z.joinValues(g.options)}, received \'${g.received}\'`;break;case N.invalid_arguments:I="Invalid function arguments";break;case N.invalid_return_type:I="Invalid function return type";break;case N.invalid_date:I="Invalid date";break;case N.invalid_string:typeof g.validation=="object"?"includes"in g.validation?(I=`Invalid input: must include "${g.validation.includes}"`,typeof g.validation.position=="number"&&(I=`${I} at one or more positions greater than or equal to ${g.validation.position}`)):"startsWith"in g.validation?I=`Invalid input: must start with "${g.validation.startsWith}"`:"endsWith"in g.validation?I=`Invalid input: must end with "${g.validation.endsWith}"`:z.assertNever(g.validation):g.validation!=="regex"?I=`Invalid ${g.validation}`:I="Invalid";break;case N.too_small:g.type==="array"?I=`Array must contain ${g.exact?"exactly":g.inclusive?"at least":"more than"} ${g.minimum} element(s)`:g.type==="string"?I=`String must contain ${g.exact?"exactly":g.inclusive?"at least":"over"} ${g.minimum} character(s)`:g.type==="number"?I=`Number must be ${g.exact?"exactly equal to ":g.inclusive?"greater than or equal to ":"greater than "}${g.minimum}`:g.type==="date"?I=`Date must be ${g.exact?"exactly equal to ":g.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(g.minimum))}`:I="Invalid input";break;case N.too_big:g.type==="array"?I=`Array must contain ${g.exact?"exactly":g.inclusive?"at most":"less than"} ${g.maximum} element(s)`:g.type==="string"?I=`String must contain ${g.exact?"exactly":g.inclusive?"at most":"under"} ${g.maximum} character(s)`:g.type==="number"?I=`Number must be ${g.exact?"exactly":g.inclusive?"less than or equal to":"less than"} ${g.maximum}`:g.type==="bigint"?I=`BigInt must be ${g.exact?"exactly":g.inclusive?"less than or equal to":"less than"} ${g.maximum}`:g.type==="date"?I=`Date must be ${g.exact?"exactly":g.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(g.maximum))}`:I="Invalid input";break;case N.custom:I="Invalid input";break;case N.invalid_intersection_types:I="Intersection results could not be merged";break;case N.not_multiple_of:I=`Number must be a multiple of ${g.multipleOf}`;break;case N.not_finite:I="Number must be finite";break;default:I=A.defaultError,z.assertNever(g)}return{message:I}},eE=DB;function si(g){eE=g}function iC(){return eE}var oC=g=>{let{data:A,path:I,errorMaps:B,issueData:Q}=g,i=[...I,...Q.path||[]],w={...Q,path:i},e="",k=B.filter(y=>!!y).slice().reverse();for(let y of k)e=y(w,{data:A,defaultError:e}).message;return{...Q,path:i,message:Q.message||e}},wi=[];function l(g,A){let I=oC({issueData:A,data:g.data,path:g.path,errorMaps:[g.common.contextualErrorMap,g.schemaErrorMap,iC(),DB].filter(B=>!!B)});g.common.issues.push(I)}var tA=class g{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(A,I){let B=[];for(let Q of I){if(Q.status==="aborted")return x;Q.status==="dirty"&&A.dirty(),B.push(Q.value)}return{status:A.value,value:B}}static async mergeObjectAsync(A,I){let B=[];for(let Q of I)B.push({key:await Q.key,value:await Q.value});return g.mergeObjectSync(A,B)}static mergeObjectSync(A,I){let B={};for(let Q of I){let{key:i,value:w}=Q;if(i.status==="aborted"||w.status==="aborted")return x;i.status==="dirty"&&A.dirty(),w.status==="dirty"&&A.dirty(),i.value!=="__proto__"&&(typeof w.value<"u"||Q.alwaysSet)&&(B[i.value]=w.value)}return{status:A.value,value:B}}},x=Object.freeze({status:"aborted"}),hE=g=>({status:"dirty",value:g}),rA=g=>({status:"valid",value:g}),NQ=g=>g.status==="aborted",nQ=g=>g.status==="dirty",aB=g=>g.status==="valid",DC=g=>typeof Promise<"u"&&g instanceof Promise,f;(function(g){g.errToObj=A=>typeof A=="string"?{message:A}:A||{},g.toString=A=>typeof A=="string"?A:A?.message})(f||(f={}));var XA=class{constructor(A,I,B,Q){this._cachedPath=[],this.parent=A,this.data=I,this._path=B,this._key=Q}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}},wE=(g,A)=>{if(aB(A))return{success:!0,data:A.value};if(!g.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;let I=new pA(g.common.issues);return this._error=I,this._error}}};function P(g){if(!g)return{};let{errorMap:A,invalid_type_error:I,required_error:B,description:Q}=g;if(A&&(I||B))throw new Error(`Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return A?{errorMap:A,description:Q}:{errorMap:(w,e)=>w.code!=="invalid_type"?{message:e.defaultError}:typeof e.data>"u"?{message:B??e.defaultError}:{message:I??e.defaultError},description:Q}}var W=class{constructor(A){this.spa=this.safeParseAsync,this._def=A,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(A){return xI(A.data)}_getOrReturnCtx(A,I){return I||{common:A.parent.common,data:A.data,parsedType:xI(A.data),schemaErrorMap:this._def.errorMap,path:A.path,parent:A.parent}}_processInputParams(A){return{status:new tA,ctx:{common:A.parent.common,data:A.data,parsedType:xI(A.data),schemaErrorMap:this._def.errorMap,path:A.path,parent:A.parent}}}_parseSync(A){let I=this._parse(A);if(DC(I))throw new Error("Synchronous parse encountered promise.");return I}_parseAsync(A){let I=this._parse(A);return Promise.resolve(I)}parse(A,I){let B=this.safeParse(A,I);if(B.success)return B.data;throw B.error}safeParse(A,I){var B;let Q={common:{issues:[],async:(B=I?.async)!==null&&B!==void 0?B:!1,contextualErrorMap:I?.errorMap},path:I?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:A,parsedType:xI(A)},i=this._parseSync({data:A,path:Q.path,parent:Q});return wE(Q,i)}async parseAsync(A,I){let B=await this.safeParseAsync(A,I);if(B.success)return B.data;throw B.error}async safeParseAsync(A,I){let B={common:{issues:[],contextualErrorMap:I?.errorMap,async:!0},path:I?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:A,parsedType:xI(A)},Q=this._parse({data:A,path:B.path,parent:B}),i=await(DC(Q)?Q:Promise.resolve(Q));return wE(B,i)}refine(A,I){let B=Q=>typeof I=="string"||typeof I>"u"?{message:I}:typeof I=="function"?I(Q):I;return this._refinement((Q,i)=>{let w=A(Q),e=()=>i.addIssue({code:N.custom,...B(Q)});return typeof Promise<"u"&&w instanceof Promise?w.then(k=>k?!0:(e(),!1)):w?!0:(e(),!1)})}refinement(A,I){return this._refinement((B,Q)=>A(B)?!0:(Q.addIssue(typeof I=="function"?I(B,Q):I),!1))}_refinement(A){return new uA({schema:this,typeName:u.ZodEffects,effect:{type:"refinement",refinement:A}})}superRefine(A){return this._refinement(A)}optional(){return QI.create(this,this._def)}nullable(){return UI.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return JI.create(this,this._def)}promise(){return WI.create(this,this._def)}or(A){return og.create([this,A],this._def)}and(A){return Dg.create(this,A,this._def)}transform(A){return new uA({...P(this._def),schema:this,typeName:u.ZodEffects,effect:{type:"transform",transform:A}})}default(A){let I=typeof A=="function"?A:()=>A;return new eg({...P(this._def),innerType:this,defaultValue:I,typeName:u.ZodDefault})}brand(){return new GC({typeName:u.ZodBranded,type:this,...P(this._def)})}catch(A){let I=typeof A=="function"?A:()=>A;return new bg({...P(this._def),innerType:this,catchValue:I,typeName:u.ZodCatch})}describe(A){let I=this.constructor;return new I({...this._def,description:A})}pipe(A){return sB.create(this,A)}readonly(){return ug.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}},Gi=/^c[^\\s-]{8,}$/i,ei=/^[a-z][a-z0-9]*$/,hi=/^[0-9A-HJKMNP-TV-Z]{26}$/,yi=/^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i,Fi=/^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i,Ri="^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$",UQ,Si=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,ti=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,ki=g=>g.precision?g.offset?new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${g.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`):new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${g.precision}}Z$`):g.precision===0?g.offset?new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$"):new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$"):g.offset?new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$"):new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$");function ci(g,A){return!!((A==="v4"||!A)&&Si.test(g)||(A==="v6"||!A)&&ti.test(g))}var mI=class g extends W{_parse(A){if(this._def.coerce&&(A.data=String(A.data)),this._getType(A)!==K.string){let i=this._getOrReturnCtx(A);return l(i,{code:N.invalid_type,expected:K.string,received:i.parsedType}),x}let B=new tA,Q;for(let i of this._def.checks)if(i.kind==="min")A.data.length<i.value&&(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),B.dirty());else if(i.kind==="max")A.data.length>i.value&&(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),B.dirty());else if(i.kind==="length"){let w=A.data.length>i.value,e=A.data.length<i.value;(w||e)&&(Q=this._getOrReturnCtx(A,Q),w?l(Q,{code:N.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}):e&&l(Q,{code:N.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}),B.dirty())}else if(i.kind==="email")Fi.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"email",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="emoji")UQ||(UQ=new RegExp(Ri,"u")),UQ.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"emoji",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="uuid")yi.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"uuid",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="cuid")Gi.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"cuid",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="cuid2")ei.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"cuid2",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="ulid")hi.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"ulid",code:N.invalid_string,message:i.message}),B.dirty());else if(i.kind==="url")try{new URL(A.data)}catch{Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"url",code:N.invalid_string,message:i.message}),B.dirty()}else i.kind==="regex"?(i.regex.lastIndex=0,i.regex.test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"regex",code:N.invalid_string,message:i.message}),B.dirty())):i.kind==="trim"?A.data=A.data.trim():i.kind==="includes"?A.data.includes(i.value,i.position)||(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.invalid_string,validation:{includes:i.value,position:i.position},message:i.message}),B.dirty()):i.kind==="toLowerCase"?A.data=A.data.toLowerCase():i.kind==="toUpperCase"?A.data=A.data.toUpperCase():i.kind==="startsWith"?A.data.startsWith(i.value)||(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.invalid_string,validation:{startsWith:i.value},message:i.message}),B.dirty()):i.kind==="endsWith"?A.data.endsWith(i.value)||(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.invalid_string,validation:{endsWith:i.value},message:i.message}),B.dirty()):i.kind==="datetime"?ki(i).test(A.data)||(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.invalid_string,validation:"datetime",message:i.message}),B.dirty()):i.kind==="ip"?ci(A.data,i.version)||(Q=this._getOrReturnCtx(A,Q),l(Q,{validation:"ip",code:N.invalid_string,message:i.message}),B.dirty()):z.assertNever(i);return{status:B.value,value:A.data}}_regex(A,I,B){return this.refinement(Q=>A.test(Q),{validation:I,code:N.invalid_string,...f.errToObj(B)})}_addCheck(A){return new g({...this._def,checks:[...this._def.checks,A]})}email(A){return this._addCheck({kind:"email",...f.errToObj(A)})}url(A){return this._addCheck({kind:"url",...f.errToObj(A)})}emoji(A){return this._addCheck({kind:"emoji",...f.errToObj(A)})}uuid(A){return this._addCheck({kind:"uuid",...f.errToObj(A)})}cuid(A){return this._addCheck({kind:"cuid",...f.errToObj(A)})}cuid2(A){return this._addCheck({kind:"cuid2",...f.errToObj(A)})}ulid(A){return this._addCheck({kind:"ulid",...f.errToObj(A)})}ip(A){return this._addCheck({kind:"ip",...f.errToObj(A)})}datetime(A){var I;return typeof A=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,message:A}):this._addCheck({kind:"datetime",precision:typeof A?.precision>"u"?null:A?.precision,offset:(I=A?.offset)!==null&&I!==void 0?I:!1,...f.errToObj(A?.message)})}regex(A,I){return this._addCheck({kind:"regex",regex:A,...f.errToObj(I)})}includes(A,I){return this._addCheck({kind:"includes",value:A,position:I?.position,...f.errToObj(I?.message)})}startsWith(A,I){return this._addCheck({kind:"startsWith",value:A,...f.errToObj(I)})}endsWith(A,I){return this._addCheck({kind:"endsWith",value:A,...f.errToObj(I)})}min(A,I){return this._addCheck({kind:"min",value:A,...f.errToObj(I)})}max(A,I){return this._addCheck({kind:"max",value:A,...f.errToObj(I)})}length(A,I){return this._addCheck({kind:"length",value:A,...f.errToObj(I)})}nonempty(A){return this.min(1,f.errToObj(A))}trim(){return new g({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new g({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new g({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(A=>A.kind==="datetime")}get isEmail(){return!!this._def.checks.find(A=>A.kind==="email")}get isURL(){return!!this._def.checks.find(A=>A.kind==="url")}get isEmoji(){return!!this._def.checks.find(A=>A.kind==="emoji")}get isUUID(){return!!this._def.checks.find(A=>A.kind==="uuid")}get isCUID(){return!!this._def.checks.find(A=>A.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(A=>A.kind==="cuid2")}get isULID(){return!!this._def.checks.find(A=>A.kind==="ulid")}get isIP(){return!!this._def.checks.find(A=>A.kind==="ip")}get minLength(){let A=null;for(let I of this._def.checks)I.kind==="min"&&(A===null||I.value>A)&&(A=I.value);return A}get maxLength(){let A=null;for(let I of this._def.checks)I.kind==="max"&&(A===null||I.value<A)&&(A=I.value);return A}};mI.create=g=>{var A;return new mI({checks:[],typeName:u.ZodString,coerce:(A=g?.coerce)!==null&&A!==void 0?A:!1,...P(g)})};function Ji(g,A){let I=(g.toString().split(".")[1]||"").length,B=(A.toString().split(".")[1]||"").length,Q=I>B?I:B,i=parseInt(g.toFixed(Q).replace(".","")),w=parseInt(A.toFixed(Q).replace(".",""));return i%w/Math.pow(10,Q)}var gg=class g extends W{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(A){if(this._def.coerce&&(A.data=Number(A.data)),this._getType(A)!==K.number){let i=this._getOrReturnCtx(A);return l(i,{code:N.invalid_type,expected:K.number,received:i.parsedType}),x}let B,Q=new tA;for(let i of this._def.checks)i.kind==="int"?z.isInteger(A.data)||(B=this._getOrReturnCtx(A,B),l(B,{code:N.invalid_type,expected:"integer",received:"float",message:i.message}),Q.dirty()):i.kind==="min"?(i.inclusive?A.data<i.value:A.data<=i.value)&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.too_small,minimum:i.value,type:"number",inclusive:i.inclusive,exact:!1,message:i.message}),Q.dirty()):i.kind==="max"?(i.inclusive?A.data>i.value:A.data>=i.value)&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.too_big,maximum:i.value,type:"number",inclusive:i.inclusive,exact:!1,message:i.message}),Q.dirty()):i.kind==="multipleOf"?Ji(A.data,i.value)!==0&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.not_multiple_of,multipleOf:i.value,message:i.message}),Q.dirty()):i.kind==="finite"?Number.isFinite(A.data)||(B=this._getOrReturnCtx(A,B),l(B,{code:N.not_finite,message:i.message}),Q.dirty()):z.assertNever(i);return{status:Q.value,value:A.data}}gte(A,I){return this.setLimit("min",A,!0,f.toString(I))}gt(A,I){return this.setLimit("min",A,!1,f.toString(I))}lte(A,I){return this.setLimit("max",A,!0,f.toString(I))}lt(A,I){return this.setLimit("max",A,!1,f.toString(I))}setLimit(A,I,B,Q){return new g({...this._def,checks:[...this._def.checks,{kind:A,value:I,inclusive:B,message:f.toString(Q)}]})}_addCheck(A){return new g({...this._def,checks:[...this._def.checks,A]})}int(A){return this._addCheck({kind:"int",message:f.toString(A)})}positive(A){return this._addCheck({kind:"min",value:0,inclusive:!1,message:f.toString(A)})}negative(A){return this._addCheck({kind:"max",value:0,inclusive:!1,message:f.toString(A)})}nonpositive(A){return this._addCheck({kind:"max",value:0,inclusive:!0,message:f.toString(A)})}nonnegative(A){return this._addCheck({kind:"min",value:0,inclusive:!0,message:f.toString(A)})}multipleOf(A,I){return this._addCheck({kind:"multipleOf",value:A,message:f.toString(I)})}finite(A){return this._addCheck({kind:"finite",message:f.toString(A)})}safe(A){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:f.toString(A)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:f.toString(A)})}get minValue(){let A=null;for(let I of this._def.checks)I.kind==="min"&&(A===null||I.value>A)&&(A=I.value);return A}get maxValue(){let A=null;for(let I of this._def.checks)I.kind==="max"&&(A===null||I.value<A)&&(A=I.value);return A}get isInt(){return!!this._def.checks.find(A=>A.kind==="int"||A.kind==="multipleOf"&&z.isInteger(A.value))}get isFinite(){let A=null,I=null;for(let B of this._def.checks){if(B.kind==="finite"||B.kind==="int"||B.kind==="multipleOf")return!0;B.kind==="min"?(I===null||B.value>I)&&(I=B.value):B.kind==="max"&&(A===null||B.value<A)&&(A=B.value)}return Number.isFinite(I)&&Number.isFinite(A)}};gg.create=g=>new gg({checks:[],typeName:u.ZodNumber,coerce:g?.coerce||!1,...P(g)});var Bg=class g extends W{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(A){if(this._def.coerce&&(A.data=BigInt(A.data)),this._getType(A)!==K.bigint){let i=this._getOrReturnCtx(A);return l(i,{code:N.invalid_type,expected:K.bigint,received:i.parsedType}),x}let B,Q=new tA;for(let i of this._def.checks)i.kind==="min"?(i.inclusive?A.data<i.value:A.data<=i.value)&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.too_small,type:"bigint",minimum:i.value,inclusive:i.inclusive,message:i.message}),Q.dirty()):i.kind==="max"?(i.inclusive?A.data>i.value:A.data>=i.value)&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.too_big,type:"bigint",maximum:i.value,inclusive:i.inclusive,message:i.message}),Q.dirty()):i.kind==="multipleOf"?A.data%i.value!==BigInt(0)&&(B=this._getOrReturnCtx(A,B),l(B,{code:N.not_multiple_of,multipleOf:i.value,message:i.message}),Q.dirty()):z.assertNever(i);return{status:Q.value,value:A.data}}gte(A,I){return this.setLimit("min",A,!0,f.toString(I))}gt(A,I){return this.setLimit("min",A,!1,f.toString(I))}lte(A,I){return this.setLimit("max",A,!0,f.toString(I))}lt(A,I){return this.setLimit("max",A,!1,f.toString(I))}setLimit(A,I,B,Q){return new g({...this._def,checks:[...this._def.checks,{kind:A,value:I,inclusive:B,message:f.toString(Q)}]})}_addCheck(A){return new g({...this._def,checks:[...this._def.checks,A]})}positive(A){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:f.toString(A)})}negative(A){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:f.toString(A)})}nonpositive(A){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:f.toString(A)})}nonnegative(A){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:f.toString(A)})}multipleOf(A,I){return this._addCheck({kind:"multipleOf",value:A,message:f.toString(I)})}get minValue(){let A=null;for(let I of this._def.checks)I.kind==="min"&&(A===null||I.value>A)&&(A=I.value);return A}get maxValue(){let A=null;for(let I of this._def.checks)I.kind==="max"&&(A===null||I.value<A)&&(A=I.value);return A}};Bg.create=g=>{var A;return new Bg({checks:[],typeName:u.ZodBigInt,coerce:(A=g?.coerce)!==null&&A!==void 0?A:!1,...P(g)})};var Cg=class extends W{_parse(A){if(this._def.coerce&&(A.data=!!A.data),this._getType(A)!==K.boolean){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.boolean,received:B.parsedType}),x}return rA(A.data)}};Cg.create=g=>new Cg({typeName:u.ZodBoolean,coerce:g?.coerce||!1,...P(g)});var Qg=class g extends W{_parse(A){if(this._def.coerce&&(A.data=new Date(A.data)),this._getType(A)!==K.date){let i=this._getOrReturnCtx(A);return l(i,{code:N.invalid_type,expected:K.date,received:i.parsedType}),x}if(isNaN(A.data.getTime())){let i=this._getOrReturnCtx(A);return l(i,{code:N.invalid_date}),x}let B=new tA,Q;for(let i of this._def.checks)i.kind==="min"?A.data.getTime()<i.value&&(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.too_small,message:i.message,inclusive:!0,exact:!1,minimum:i.value,type:"date"}),B.dirty()):i.kind==="max"?A.data.getTime()>i.value&&(Q=this._getOrReturnCtx(A,Q),l(Q,{code:N.too_big,message:i.message,inclusive:!0,exact:!1,maximum:i.value,type:"date"}),B.dirty()):z.assertNever(i);return{status:B.value,value:new Date(A.data.getTime())}}_addCheck(A){return new g({...this._def,checks:[...this._def.checks,A]})}min(A,I){return this._addCheck({kind:"min",value:A.getTime(),message:f.toString(I)})}max(A,I){return this._addCheck({kind:"max",value:A.getTime(),message:f.toString(I)})}get minDate(){let A=null;for(let I of this._def.checks)I.kind==="min"&&(A===null||I.value>A)&&(A=I.value);return A!=null?new Date(A):null}get maxDate(){let A=null;for(let I of this._def.checks)I.kind==="max"&&(A===null||I.value<A)&&(A=I.value);return A!=null?new Date(A):null}};Qg.create=g=>new Qg({checks:[],coerce:g?.coerce||!1,typeName:u.ZodDate,...P(g)});var Lg=class extends W{_parse(A){if(this._getType(A)!==K.symbol){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.symbol,received:B.parsedType}),x}return rA(A.data)}};Lg.create=g=>new Lg({typeName:u.ZodSymbol,...P(g)});var Eg=class extends W{_parse(A){if(this._getType(A)!==K.undefined){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.undefined,received:B.parsedType}),x}return rA(A.data)}};Eg.create=g=>new Eg({typeName:u.ZodUndefined,...P(g)});var ig=class extends W{_parse(A){if(this._getType(A)!==K.null){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.null,received:B.parsedType}),x}return rA(A.data)}};ig.create=g=>new ig({typeName:u.ZodNull,...P(g)});var PI=class extends W{constructor(){super(...arguments),this._any=!0}_parse(A){return rA(A.data)}};PI.create=g=>new PI({typeName:u.ZodAny,...P(g)});var cI=class extends W{constructor(){super(...arguments),this._unknown=!0}_parse(A){return rA(A.data)}};cI.create=g=>new cI({typeName:u.ZodUnknown,...P(g)});var EI=class extends W{_parse(A){let I=this._getOrReturnCtx(A);return l(I,{code:N.invalid_type,expected:K.never,received:I.parsedType}),x}};EI.create=g=>new EI({typeName:u.ZodNever,...P(g)});var lg=class extends W{_parse(A){if(this._getType(A)!==K.undefined){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.void,received:B.parsedType}),x}return rA(A.data)}};lg.create=g=>new lg({typeName:u.ZodVoid,...P(g)});var JI=class g extends W{_parse(A){let{ctx:I,status:B}=this._processInputParams(A),Q=this._def;if(I.parsedType!==K.array)return l(I,{code:N.invalid_type,expected:K.array,received:I.parsedType}),x;if(Q.exactLength!==null){let w=I.data.length>Q.exactLength.value,e=I.data.length<Q.exactLength.value;(w||e)&&(l(I,{code:w?N.too_big:N.too_small,minimum:e?Q.exactLength.value:void 0,maximum:w?Q.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:Q.exactLength.message}),B.dirty())}if(Q.minLength!==null&&I.data.length<Q.minLength.value&&(l(I,{code:N.too_small,minimum:Q.minLength.value,type:"array",inclusive:!0,exact:!1,message:Q.minLength.message}),B.dirty()),Q.maxLength!==null&&I.data.length>Q.maxLength.value&&(l(I,{code:N.too_big,maximum:Q.maxLength.value,type:"array",inclusive:!0,exact:!1,message:Q.maxLength.message}),B.dirty()),I.common.async)return Promise.all([...I.data].map((w,e)=>Q.type._parseAsync(new XA(I,w,I.path,e)))).then(w=>tA.mergeArray(B,w));let i=[...I.data].map((w,e)=>Q.type._parseSync(new XA(I,w,I.path,e)));return tA.mergeArray(B,i)}get element(){return this._def.type}min(A,I){return new g({...this._def,minLength:{value:A,message:f.toString(I)}})}max(A,I){return new g({...this._def,maxLength:{value:A,message:f.toString(I)}})}length(A,I){return new g({...this._def,exactLength:{value:A,message:f.toString(I)}})}nonempty(A){return this.min(1,A)}};JI.create=(g,A)=>new JI({type:g,minLength:null,maxLength:null,exactLength:null,typeName:u.ZodArray,...P(A)});function Kg(g){if(g instanceof dA){let A={};for(let I in g.shape){let B=g.shape[I];A[I]=QI.create(Kg(B))}return new dA({...g._def,shape:()=>A})}else return g instanceof JI?new JI({...g._def,type:Kg(g.element)}):g instanceof QI?QI.create(Kg(g.unwrap())):g instanceof UI?UI.create(Kg(g.unwrap())):g instanceof eI?eI.create(g.items.map(A=>Kg(A))):g}var dA=class g extends W{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;let A=this._def.shape(),I=z.objectKeys(A);return this._cached={shape:A,keys:I}}_parse(A){if(this._getType(A)!==K.object){let y=this._getOrReturnCtx(A);return l(y,{code:N.invalid_type,expected:K.object,received:y.parsedType}),x}let{status:B,ctx:Q}=this._processInputParams(A),{shape:i,keys:w}=this._getCached(),e=[];if(!(this._def.catchall instanceof EI&&this._def.unknownKeys==="strip"))for(let y in Q.data)w.includes(y)||e.push(y);let k=[];for(let y of w){let L=i[y],T=Q.data[y];k.push({key:{status:"valid",value:y},value:L._parse(new XA(Q,T,Q.path,y)),alwaysSet:y in Q.data})}if(this._def.catchall instanceof EI){let y=this._def.unknownKeys;if(y==="passthrough")for(let L of e)k.push({key:{status:"valid",value:L},value:{status:"valid",value:Q.data[L]}});else if(y==="strict")e.length>0&&(l(Q,{code:N.unrecognized_keys,keys:e}),B.dirty());else if(y!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{let y=this._def.catchall;for(let L of e){let T=Q.data[L];k.push({key:{status:"valid",value:L},value:y._parse(new XA(Q,T,Q.path,L)),alwaysSet:L in Q.data})}}return Q.common.async?Promise.resolve().then(async()=>{let y=[];for(let L of k){let T=await L.key;y.push({key:T,value:await L.value,alwaysSet:L.alwaysSet})}return y}).then(y=>tA.mergeObjectSync(B,y)):tA.mergeObjectSync(B,k)}get shape(){return this._def.shape()}strict(A){return f.errToObj,new g({...this._def,unknownKeys:"strict",...A!==void 0?{errorMap:(I,B)=>{var Q,i,w,e;let k=(w=(i=(Q=this._def).errorMap)===null||i===void 0?void 0:i.call(Q,I,B).message)!==null&&w!==void 0?w:B.defaultError;return I.code==="unrecognized_keys"?{message:(e=f.errToObj(A).message)!==null&&e!==void 0?e:k}:{message:k}}}:{}})}strip(){return new g({...this._def,unknownKeys:"strip"})}passthrough(){return new g({...this._def,unknownKeys:"passthrough"})}extend(A){return new g({...this._def,shape:()=>({...this._def.shape(),...A})})}merge(A){return new g({unknownKeys:A._def.unknownKeys,catchall:A._def.catchall,shape:()=>({...this._def.shape(),...A._def.shape()}),typeName:u.ZodObject})}setKey(A,I){return this.augment({[A]:I})}catchall(A){return new g({...this._def,catchall:A})}pick(A){let I={};return z.objectKeys(A).forEach(B=>{A[B]&&this.shape[B]&&(I[B]=this.shape[B])}),new g({...this._def,shape:()=>I})}omit(A){let I={};return z.objectKeys(this.shape).forEach(B=>{A[B]||(I[B]=this.shape[B])}),new g({...this._def,shape:()=>I})}deepPartial(){return Kg(this)}partial(A){let I={};return z.objectKeys(this.shape).forEach(B=>{let Q=this.shape[B];A&&!A[B]?I[B]=Q:I[B]=Q.optional()}),new g({...this._def,shape:()=>I})}required(A){let I={};return z.objectKeys(this.shape).forEach(B=>{if(A&&!A[B])I[B]=this.shape[B];else{let i=this.shape[B];for(;i instanceof QI;)i=i._def.innerType;I[B]=i}}),new g({...this._def,shape:()=>I})}keyof(){return yE(z.objectKeys(this.shape))}};dA.create=(g,A)=>new dA({shape:()=>g,unknownKeys:"strip",catchall:EI.create(),typeName:u.ZodObject,...P(A)});dA.strictCreate=(g,A)=>new dA({shape:()=>g,unknownKeys:"strict",catchall:EI.create(),typeName:u.ZodObject,...P(A)});dA.lazycreate=(g,A)=>new dA({shape:g,unknownKeys:"strip",catchall:EI.create(),typeName:u.ZodObject,...P(A)});var og=class extends W{_parse(A){let{ctx:I}=this._processInputParams(A),B=this._def.options;function Q(i){for(let e of i)if(e.result.status==="valid")return e.result;for(let e of i)if(e.result.status==="dirty")return I.common.issues.push(...e.ctx.common.issues),e.result;let w=i.map(e=>new pA(e.ctx.common.issues));return l(I,{code:N.invalid_union,unionErrors:w}),x}if(I.common.async)return Promise.all(B.map(async i=>{let w={...I,common:{...I.common,issues:[]},parent:null};return{result:await i._parseAsync({data:I.data,path:I.path,parent:w}),ctx:w}})).then(Q);{let i,w=[];for(let k of B){let y={...I,common:{...I.common,issues:[]},parent:null},L=k._parseSync({data:I.data,path:I.path,parent:y});if(L.status==="valid")return L;L.status==="dirty"&&!i&&(i={result:L,ctx:y}),y.common.issues.length&&w.push(y.common.issues)}if(i)return I.common.issues.push(...i.ctx.common.issues),i.result;let e=w.map(k=>new pA(k));return l(I,{code:N.invalid_union,unionErrors:e}),x}}get options(){return this._def.options}};og.create=(g,A)=>new og({options:g,typeName:u.ZodUnion,...P(A)});var EC=g=>g instanceof ag?EC(g.schema):g instanceof uA?EC(g.innerType()):g instanceof sg?[g.value]:g instanceof wg?g.options:g instanceof Gg?Object.keys(g.enum):g instanceof eg?EC(g._def.innerType):g instanceof Eg?[void 0]:g instanceof ig?[null]:null,aC=class g extends W{_parse(A){let{ctx:I}=this._processInputParams(A);if(I.parsedType!==K.object)return l(I,{code:N.invalid_type,expected:K.object,received:I.parsedType}),x;let B=this.discriminator,Q=I.data[B],i=this.optionsMap.get(Q);return i?I.common.async?i._parseAsync({data:I.data,path:I.path,parent:I}):i._parseSync({data:I.data,path:I.path,parent:I}):(l(I,{code:N.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[B]}),x)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(A,I,B){let Q=new Map;for(let i of I){let w=EC(i.shape[A]);if(!w)throw new Error(`A discriminator value for key \\`${A}\\` could not be extracted from all schema options`);for(let e of w){if(Q.has(e))throw new Error(`Discriminator property ${String(A)} has duplicate value ${String(e)}`);Q.set(e,i)}}return new g({typeName:u.ZodDiscriminatedUnion,discriminator:A,options:I,optionsMap:Q,...P(B)})}};function HQ(g,A){let I=xI(g),B=xI(A);if(g===A)return{valid:!0,data:g};if(I===K.object&&B===K.object){let Q=z.objectKeys(A),i=z.objectKeys(g).filter(e=>Q.indexOf(e)!==-1),w={...g,...A};for(let e of i){let k=HQ(g[e],A[e]);if(!k.valid)return{valid:!1};w[e]=k.data}return{valid:!0,data:w}}else if(I===K.array&&B===K.array){if(g.length!==A.length)return{valid:!1};let Q=[];for(let i=0;i<g.length;i++){let w=g[i],e=A[i],k=HQ(w,e);if(!k.valid)return{valid:!1};Q.push(k.data)}return{valid:!0,data:Q}}else return I===K.date&&B===K.date&&+g==+A?{valid:!0,data:g}:{valid:!1}}var Dg=class extends W{_parse(A){let{status:I,ctx:B}=this._processInputParams(A),Q=(i,w)=>{if(NQ(i)||NQ(w))return x;let e=HQ(i.value,w.value);return e.valid?((nQ(i)||nQ(w))&&I.dirty(),{status:I.value,value:e.data}):(l(B,{code:N.invalid_intersection_types}),x)};return B.common.async?Promise.all([this._def.left._parseAsync({data:B.data,path:B.path,parent:B}),this._def.right._parseAsync({data:B.data,path:B.path,parent:B})]).then(([i,w])=>Q(i,w)):Q(this._def.left._parseSync({data:B.data,path:B.path,parent:B}),this._def.right._parseSync({data:B.data,path:B.path,parent:B}))}};Dg.create=(g,A,I)=>new Dg({left:g,right:A,typeName:u.ZodIntersection,...P(I)});var eI=class g extends W{_parse(A){let{status:I,ctx:B}=this._processInputParams(A);if(B.parsedType!==K.array)return l(B,{code:N.invalid_type,expected:K.array,received:B.parsedType}),x;if(B.data.length<this._def.items.length)return l(B,{code:N.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),x;!this._def.rest&&B.data.length>this._def.items.length&&(l(B,{code:N.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),I.dirty());let i=[...B.data].map((w,e)=>{let k=this._def.items[e]||this._def.rest;return k?k._parse(new XA(B,w,B.path,e)):null}).filter(w=>!!w);return B.common.async?Promise.all(i).then(w=>tA.mergeArray(I,w)):tA.mergeArray(I,i)}get items(){return this._def.items}rest(A){return new g({...this._def,rest:A})}};eI.create=(g,A)=>{if(!Array.isArray(g))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new eI({items:g,typeName:u.ZodTuple,rest:null,...P(A)})};var sC=class g extends W{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(A){let{status:I,ctx:B}=this._processInputParams(A);if(B.parsedType!==K.object)return l(B,{code:N.invalid_type,expected:K.object,received:B.parsedType}),x;let Q=[],i=this._def.keyType,w=this._def.valueType;for(let e in B.data)Q.push({key:i._parse(new XA(B,e,B.path,e)),value:w._parse(new XA(B,B.data[e],B.path,e))});return B.common.async?tA.mergeObjectAsync(I,Q):tA.mergeObjectSync(I,Q)}get element(){return this._def.valueType}static create(A,I,B){return I instanceof W?new g({keyType:A,valueType:I,typeName:u.ZodRecord,...P(B)}):new g({keyType:mI.create(),valueType:A,typeName:u.ZodRecord,...P(I)})}},Yg=class extends W{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(A){let{status:I,ctx:B}=this._processInputParams(A);if(B.parsedType!==K.map)return l(B,{code:N.invalid_type,expected:K.map,received:B.parsedType}),x;let Q=this._def.keyType,i=this._def.valueType,w=[...B.data.entries()].map(([e,k],y)=>({key:Q._parse(new XA(B,e,B.path,[y,"key"])),value:i._parse(new XA(B,k,B.path,[y,"value"]))}));if(B.common.async){let e=new Map;return Promise.resolve().then(async()=>{for(let k of w){let y=await k.key,L=await k.value;if(y.status==="aborted"||L.status==="aborted")return x;(y.status==="dirty"||L.status==="dirty")&&I.dirty(),e.set(y.value,L.value)}return{status:I.value,value:e}})}else{let e=new Map;for(let k of w){let y=k.key,L=k.value;if(y.status==="aborted"||L.status==="aborted")return x;(y.status==="dirty"||L.status==="dirty")&&I.dirty(),e.set(y.value,L.value)}return{status:I.value,value:e}}}};Yg.create=(g,A,I)=>new Yg({valueType:A,keyType:g,typeName:u.ZodMap,...P(I)});var fg=class g extends W{_parse(A){let{status:I,ctx:B}=this._processInputParams(A);if(B.parsedType!==K.set)return l(B,{code:N.invalid_type,expected:K.set,received:B.parsedType}),x;let Q=this._def;Q.minSize!==null&&B.data.size<Q.minSize.value&&(l(B,{code:N.too_small,minimum:Q.minSize.value,type:"set",inclusive:!0,exact:!1,message:Q.minSize.message}),I.dirty()),Q.maxSize!==null&&B.data.size>Q.maxSize.value&&(l(B,{code:N.too_big,maximum:Q.maxSize.value,type:"set",inclusive:!0,exact:!1,message:Q.maxSize.message}),I.dirty());let i=this._def.valueType;function w(k){let y=new Set;for(let L of k){if(L.status==="aborted")return x;L.status==="dirty"&&I.dirty(),y.add(L.value)}return{status:I.value,value:y}}let e=[...B.data.values()].map((k,y)=>i._parse(new XA(B,k,B.path,y)));return B.common.async?Promise.all(e).then(k=>w(k)):w(e)}min(A,I){return new g({...this._def,minSize:{value:A,message:f.toString(I)}})}max(A,I){return new g({...this._def,maxSize:{value:A,message:f.toString(I)}})}size(A,I){return this.min(A,I).max(A,I)}nonempty(A){return this.min(1,A)}};fg.create=(g,A)=>new fg({valueType:g,minSize:null,maxSize:null,typeName:u.ZodSet,...P(A)});var wC=class g extends W{constructor(){super(...arguments),this.validate=this.implement}_parse(A){let{ctx:I}=this._processInputParams(A);if(I.parsedType!==K.function)return l(I,{code:N.invalid_type,expected:K.function,received:I.parsedType}),x;function B(e,k){return oC({data:e,path:I.path,errorMaps:[I.common.contextualErrorMap,I.schemaErrorMap,iC(),DB].filter(y=>!!y),issueData:{code:N.invalid_arguments,argumentsError:k}})}function Q(e,k){return oC({data:e,path:I.path,errorMaps:[I.common.contextualErrorMap,I.schemaErrorMap,iC(),DB].filter(y=>!!y),issueData:{code:N.invalid_return_type,returnTypeError:k}})}let i={errorMap:I.common.contextualErrorMap},w=I.data;if(this._def.returns instanceof WI){let e=this;return rA(async function(...k){let y=new pA([]),L=await e._def.args.parseAsync(k,i).catch(j=>{throw y.addIssue(B(k,j)),y}),T=await Reflect.apply(w,this,L);return await e._def.returns._def.type.parseAsync(T,i).catch(j=>{throw y.addIssue(Q(T,j)),y})})}else{let e=this;return rA(function(...k){let y=e._def.args.safeParse(k,i);if(!y.success)throw new pA([B(k,y.error)]);let L=Reflect.apply(w,this,y.data),T=e._def.returns.safeParse(L,i);if(!T.success)throw new pA([Q(L,T.error)]);return T.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...A){return new g({...this._def,args:eI.create(A).rest(cI.create())})}returns(A){return new g({...this._def,returns:A})}implement(A){return this.parse(A)}strictImplement(A){return this.parse(A)}static create(A,I,B){return new g({args:A||eI.create([]).rest(cI.create()),returns:I||cI.create(),typeName:u.ZodFunction,...P(B)})}},ag=class extends W{get schema(){return this._def.getter()}_parse(A){let{ctx:I}=this._processInputParams(A);return this._def.getter()._parse({data:I.data,path:I.path,parent:I})}};ag.create=(g,A)=>new ag({getter:g,typeName:u.ZodLazy,...P(A)});var sg=class extends W{_parse(A){if(A.data!==this._def.value){let I=this._getOrReturnCtx(A);return l(I,{received:I.data,code:N.invalid_literal,expected:this._def.value}),x}return{status:"valid",value:A.data}}get value(){return this._def.value}};sg.create=(g,A)=>new sg({value:g,typeName:u.ZodLiteral,...P(A)});function yE(g,A){return new wg({values:g,typeName:u.ZodEnum,...P(A)})}var wg=class g extends W{_parse(A){if(typeof A.data!="string"){let I=this._getOrReturnCtx(A),B=this._def.values;return l(I,{expected:z.joinValues(B),received:I.parsedType,code:N.invalid_type}),x}if(this._def.values.indexOf(A.data)===-1){let I=this._getOrReturnCtx(A),B=this._def.values;return l(I,{received:I.data,code:N.invalid_enum_value,options:B}),x}return rA(A.data)}get options(){return this._def.values}get enum(){let A={};for(let I of this._def.values)A[I]=I;return A}get Values(){let A={};for(let I of this._def.values)A[I]=I;return A}get Enum(){let A={};for(let I of this._def.values)A[I]=I;return A}extract(A){return g.create(A)}exclude(A){return g.create(this.options.filter(I=>!A.includes(I)))}};wg.create=yE;var Gg=class extends W{_parse(A){let I=z.getValidEnumValues(this._def.values),B=this._getOrReturnCtx(A);if(B.parsedType!==K.string&&B.parsedType!==K.number){let Q=z.objectValues(I);return l(B,{expected:z.joinValues(Q),received:B.parsedType,code:N.invalid_type}),x}if(I.indexOf(A.data)===-1){let Q=z.objectValues(I);return l(B,{received:B.data,code:N.invalid_enum_value,options:Q}),x}return rA(A.data)}get enum(){return this._def.values}};Gg.create=(g,A)=>new Gg({values:g,typeName:u.ZodNativeEnum,...P(A)});var WI=class extends W{unwrap(){return this._def.type}_parse(A){let{ctx:I}=this._processInputParams(A);if(I.parsedType!==K.promise&&I.common.async===!1)return l(I,{code:N.invalid_type,expected:K.promise,received:I.parsedType}),x;let B=I.parsedType===K.promise?I.data:Promise.resolve(I.data);return rA(B.then(Q=>this._def.type.parseAsync(Q,{path:I.path,errorMap:I.common.contextualErrorMap})))}};WI.create=(g,A)=>new WI({type:g,typeName:u.ZodPromise,...P(A)});var uA=class extends W{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===u.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(A){let{status:I,ctx:B}=this._processInputParams(A),Q=this._def.effect||null,i={addIssue:w=>{l(B,w),w.fatal?I.abort():I.dirty()},get path(){return B.path}};if(i.addIssue=i.addIssue.bind(i),Q.type==="preprocess"){let w=Q.transform(B.data,i);return B.common.issues.length?{status:"dirty",value:B.data}:B.common.async?Promise.resolve(w).then(e=>this._def.schema._parseAsync({data:e,path:B.path,parent:B})):this._def.schema._parseSync({data:w,path:B.path,parent:B})}if(Q.type==="refinement"){let w=e=>{let k=Q.refinement(e,i);if(B.common.async)return Promise.resolve(k);if(k instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return e};if(B.common.async===!1){let e=this._def.schema._parseSync({data:B.data,path:B.path,parent:B});return e.status==="aborted"?x:(e.status==="dirty"&&I.dirty(),w(e.value),{status:I.value,value:e.value})}else return this._def.schema._parseAsync({data:B.data,path:B.path,parent:B}).then(e=>e.status==="aborted"?x:(e.status==="dirty"&&I.dirty(),w(e.value).then(()=>({status:I.value,value:e.value}))))}if(Q.type==="transform")if(B.common.async===!1){let w=this._def.schema._parseSync({data:B.data,path:B.path,parent:B});if(!aB(w))return w;let e=Q.transform(w.value,i);if(e instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:I.value,value:e}}else return this._def.schema._parseAsync({data:B.data,path:B.path,parent:B}).then(w=>aB(w)?Promise.resolve(Q.transform(w.value,i)).then(e=>({status:I.value,value:e})):w);z.assertNever(Q)}};uA.create=(g,A,I)=>new uA({schema:g,typeName:u.ZodEffects,effect:A,...P(I)});uA.createWithPreprocess=(g,A,I)=>new uA({schema:A,effect:{type:"preprocess",transform:g},typeName:u.ZodEffects,...P(I)});var QI=class extends W{_parse(A){return this._getType(A)===K.undefined?rA(void 0):this._def.innerType._parse(A)}unwrap(){return this._def.innerType}};QI.create=(g,A)=>new QI({innerType:g,typeName:u.ZodOptional,...P(A)});var UI=class extends W{_parse(A){return this._getType(A)===K.null?rA(null):this._def.innerType._parse(A)}unwrap(){return this._def.innerType}};UI.create=(g,A)=>new UI({innerType:g,typeName:u.ZodNullable,...P(A)});var eg=class extends W{_parse(A){let{ctx:I}=this._processInputParams(A),B=I.data;return I.parsedType===K.undefined&&(B=this._def.defaultValue()),this._def.innerType._parse({data:B,path:I.path,parent:I})}removeDefault(){return this._def.innerType}};eg.create=(g,A)=>new eg({innerType:g,typeName:u.ZodDefault,defaultValue:typeof A.default=="function"?A.default:()=>A.default,...P(A)});var bg=class extends W{_parse(A){let{ctx:I}=this._processInputParams(A),B={...I,common:{...I.common,issues:[]}},Q=this._def.innerType._parse({data:B.data,path:B.path,parent:{...B}});return DC(Q)?Q.then(i=>({status:"valid",value:i.status==="valid"?i.value:this._def.catchValue({get error(){return new pA(B.common.issues)},input:B.data})})):{status:"valid",value:Q.status==="valid"?Q.value:this._def.catchValue({get error(){return new pA(B.common.issues)},input:B.data})}}removeCatch(){return this._def.innerType}};bg.create=(g,A)=>new bg({innerType:g,typeName:u.ZodCatch,catchValue:typeof A.catch=="function"?A.catch:()=>A.catch,...P(A)});var pg=class extends W{_parse(A){if(this._getType(A)!==K.nan){let B=this._getOrReturnCtx(A);return l(B,{code:N.invalid_type,expected:K.nan,received:B.parsedType}),x}return{status:"valid",value:A.data}}};pg.create=g=>new pg({typeName:u.ZodNaN,...P(g)});var Ui=Symbol("zod_brand"),GC=class extends W{_parse(A){let{ctx:I}=this._processInputParams(A),B=I.data;return this._def.type._parse({data:B,path:I.path,parent:I})}unwrap(){return this._def.type}},sB=class g extends W{_parse(A){let{status:I,ctx:B}=this._processInputParams(A);if(B.common.async)return(async()=>{let i=await this._def.in._parseAsync({data:B.data,path:B.path,parent:B});return i.status==="aborted"?x:i.status==="dirty"?(I.dirty(),hE(i.value)):this._def.out._parseAsync({data:i.value,path:B.path,parent:B})})();{let Q=this._def.in._parseSync({data:B.data,path:B.path,parent:B});return Q.status==="aborted"?x:Q.status==="dirty"?(I.dirty(),{status:"dirty",value:Q.value}):this._def.out._parseSync({data:Q.value,path:B.path,parent:B})}}static create(A,I){return new g({in:A,out:I,typeName:u.ZodPipeline})}},ug=class extends W{_parse(A){let I=this._def.innerType._parse(A);return aB(I)&&(I.value=Object.freeze(I.value)),I}};ug.create=(g,A)=>new ug({innerType:g,typeName:u.ZodReadonly,...P(A)});var FE=(g,A={},I)=>g?PI.create().superRefine((B,Q)=>{var i,w;if(!g(B)){let e=typeof A=="function"?A(B):typeof A=="string"?{message:A}:A,k=(w=(i=e.fatal)!==null&&i!==void 0?i:I)!==null&&w!==void 0?w:!0,y=typeof e=="string"?{message:e}:e;Q.addIssue({code:"custom",...y,fatal:k})}}):PI.create(),ri={object:dA.lazycreate},u;(function(g){g.ZodString="ZodString",g.ZodNumber="ZodNumber",g.ZodNaN="ZodNaN",g.ZodBigInt="ZodBigInt",g.ZodBoolean="ZodBoolean",g.ZodDate="ZodDate",g.ZodSymbol="ZodSymbol",g.ZodUndefined="ZodUndefined",g.ZodNull="ZodNull",g.ZodAny="ZodAny",g.ZodUnknown="ZodUnknown",g.ZodNever="ZodNever",g.ZodVoid="ZodVoid",g.ZodArray="ZodArray",g.ZodObject="ZodObject",g.ZodUnion="ZodUnion",g.ZodDiscriminatedUnion="ZodDiscriminatedUnion",g.ZodIntersection="ZodIntersection",g.ZodTuple="ZodTuple",g.ZodRecord="ZodRecord",g.ZodMap="ZodMap",g.ZodSet="ZodSet",g.ZodFunction="ZodFunction",g.ZodLazy="ZodLazy",g.ZodLiteral="ZodLiteral",g.ZodEnum="ZodEnum",g.ZodEffects="ZodEffects",g.ZodNativeEnum="ZodNativeEnum",g.ZodOptional="ZodOptional",g.ZodNullable="ZodNullable",g.ZodDefault="ZodDefault",g.ZodCatch="ZodCatch",g.ZodPromise="ZodPromise",g.ZodBranded="ZodBranded",g.ZodPipeline="ZodPipeline",g.ZodReadonly="ZodReadonly"})(u||(u={}));var Ni=(g,A={message:`Input not instance of ${g.name}`})=>FE(I=>I instanceof g,A),DA=mI.create,xA=gg.create,ni=pg.create,Hi=Bg.create,eC=Cg.create,di=Qg.create,Mi=Lg.create,qi=Eg.create,dQ=ig.create,Ki=PI.create,Li=cI.create,li=EI.create,Yi=lg.create,rI=JI.create,$=dA.create,fi=dA.strictCreate,NI=og.create,hg=aC.create,bi=Dg.create,xg=eI.create,pi=sC.create,ui=Yg.create,xi=fg.create,mi=wC.create,Pi=ag.create,EA=sg.create,mg=wg.create,Wi=Gg.create,vi=WI.create,GE=uA.create,kA=QI.create,Zi=UI.create,Vi=uA.createWithPreprocess,Ti=sB.create,Xi=()=>DA().optional(),Oi=()=>xA().optional(),ji=()=>eC().optional(),zi={string:g=>mI.create({...g,coerce:!0}),number:g=>gg.create({...g,coerce:!0}),boolean:g=>Cg.create({...g,coerce:!0}),bigint:g=>Bg.create({...g,coerce:!0}),date:g=>Qg.create({...g,coerce:!0})},_i=x,n=Object.freeze({__proto__:null,defaultErrorMap:DB,setErrorMap:si,getErrorMap:iC,makeIssue:oC,EMPTY_PATH:wi,addIssueToContext:l,ParseStatus:tA,INVALID:x,DIRTY:hE,OK:rA,isAborted:NQ,isDirty:nQ,isValid:aB,isAsync:DC,get util(){return z},get objectUtil(){return rQ},ZodParsedType:K,getParsedType:xI,ZodType:W,ZodString:mI,ZodNumber:gg,ZodBigInt:Bg,ZodBoolean:Cg,ZodDate:Qg,ZodSymbol:Lg,ZodUndefined:Eg,ZodNull:ig,ZodAny:PI,ZodUnknown:cI,ZodNever:EI,ZodVoid:lg,ZodArray:JI,ZodObject:dA,ZodUnion:og,ZodDiscriminatedUnion:aC,ZodIntersection:Dg,ZodTuple:eI,ZodRecord:sC,ZodMap:Yg,ZodSet:fg,ZodFunction:wC,ZodLazy:ag,ZodLiteral:sg,ZodEnum:wg,ZodNativeEnum:Gg,ZodPromise:WI,ZodEffects:uA,ZodTransformer:uA,ZodOptional:QI,ZodNullable:UI,ZodDefault:eg,ZodCatch:bg,ZodNaN:pg,BRAND:Ui,ZodBranded:GC,ZodPipeline:sB,ZodReadonly:ug,custom:FE,Schema:W,ZodSchema:W,late:ri,get ZodFirstPartyTypeKind(){return u},coerce:zi,any:Ki,array:rI,bigint:Hi,boolean:eC,date:di,discriminatedUnion:hg,effect:GE,enum:mg,function:mi,instanceof:Ni,intersection:bi,lazy:Pi,literal:EA,map:ui,nan:ni,nativeEnum:Wi,never:li,null:dQ,nullable:Zi,number:xA,object:$,oboolean:ji,onumber:Oi,optional:kA,ostring:Xi,pipeline:Ti,preprocess:Vi,promise:vi,record:pi,set:xi,strictObject:fi,string:DA,symbol:Mi,transformer:GE,tuple:xg,undefined:qi,union:NI,unknown:Li,void:Yi,NEVER:_i,ZodIssueCode:N,quotelessJson:ai,ZodError:pA});var OA=n.custom(g=>g instanceof Uint8Array),$i=n.union([n.string(),n.number(),n.boolean(),n.null()]),RE=n.lazy(()=>n.union([$i,n.array(RE),n.record(RE)])),_o=n.union([n.tuple([n.literal(0),n.number(),n.string(),n.unknown()]),n.tuple([n.literal(1),n.number(),n.nullable(n.string()),n.unknown()]),n.tuple([n.literal(2),n.string(),n.unknown()])]);var Ao=n.enum(["sfu","gateway"]),Io=n.enum(["connect","roomclose","roomupdate","roombanclient","roomsendmessage"]),ID=n.object({uid:n.string(),cid:n.optional(n.string()),rid:MQ(n.string()),nsp:n.optional(n.string()),adr:n.optional(n.string()),aud:n.optional(MQ(Ao)),sub:n.optional(MQ(Io)),exp:n.optional(n.number()),nbf:n.optional(n.number()),ups:n.optional(n.string()),internal:n.optional(n.object({server:n.optional(n.string())}))});function MQ(g){return n.union([g,n.array(g)])}var jA=xA(),go=$({kind:kA(EA("audio")),uid:kA(DA()),customType:kA(DA())}),Bo=$({kind:kA(EA("video")),codec:kA(DA()),uid:kA(DA()),customType:kA(DA())}),qQ=NI([go,Bo]),KQ=$({id:jA,properties:qQ,paused:eC()});var mA=xA(),LQ=NI([xg([xA(),xA(),xA()]),xg([xA(),xA()])]),lQ=$({id:mA,user_id:DA(),user_data:OA,medias:rI(KQ)}),SE=hg("kind",[$({kind:EA("UserDataChanged"),peer_id:mA,user_data:OA}),$({kind:EA("MediaStarted"),peer_id:mA,media:KQ}),$({kind:EA("MediaStopped"),peer_id:mA,media_id:jA})]);var YQ=DA(),Co=$({id:YQ,customer:DA(),user_data:OA,peers:rI(lQ)}),Qo=hg("kind",[$({kind:EA("Joined"),room:Co,media_ids:rI(jA),own_peer_id:mA}),$({kind:EA("Left"),reason:mg(["RoomClosing","ServerClosing","PeerKicked"])}),$({kind:EA("UserDataChanged"),user_data:kA(OA)}),$({kind:EA("PeerJoined"),peer:lQ}),$({kind:EA("PeerLeft"),peer_id:mA})]),tE=$({updates:rI(Qo)}),Eo=mg(["Joining","Joined","Closed"]),kE=$({status:Eo,message:kA(DA())});var cE=n.object({sender_peer_id:mA,message:OA});var hC=hg("kind",[$({kind:EA("Sdp"),type:mg(["Answer","Offer"]),sdp:DA(),media_map:rI(xg([jA,DA()]))}),$({kind:EA("Trickle"),candidate:DA(),spd_mid:kA(DA()),spd_mline_index:kA(xA()),username_fragment:kA(NI([DA(),dQ()]))}),$({kind:EA("TrickleFinished")})]);var JD={JoinRoom:{request:n.object({token:n.string(),room_id:YQ,user_data:OA,position:LQ}),response:n.object({peer_id:mA,stream_id:n.optional(n.number()),token:n.optional(n.string())})},WebRtcUpdate:{request:hC,response:n.null()},RequestReconnectToken:{request:n.object({peer_id:n.optional(mA)}),response:n.string()},Ping:{request:n.object({}),response:n.null()}},UD={UpdatePeer:{request:n.object({user_data:OA}),response:n.null()},StartMedia:{request:n.object({media_id:jA,properties:qQ}),response:n.null()},StopMedia:{request:n.object({media_id:jA}),response:n.null()},PauseMedia:{request:n.object({media_id:jA}),response:n.null()},ResumeMedia:{request:n.object({media_id:jA}),response:n.null()},SetPeerPosition:{request:n.object({position:LQ}),response:n.null()},SendMessage:{request:n.object({target_peer_ids:n.optional(n.array(mA)),message:OA}),response:n.null()}};var MD=$({name:EA("WebRtcUpdate"),properties:hC});var qD=NI([$({name:EA("RoomStatusChanged"),properties:kE}),$({name:EA("RoomUpdated"),properties:tE}),$({name:EA("PeerUpdated"),properties:SE}),$({name:EA("MessageReceived"),properties:cE})]);function GB(g){return{type:"Success",value:g}}function MA(g){return{type:"Failure",reason:g}}function JE(){return typeof SharedArrayBuffer<"u"}function UE(g){for(var A=g.length,I=0,B=0;B<A;){var Q=g.charCodeAt(B++);if(Q&4294967168)if(!(Q&4294965248))I+=2;else{if(Q>=55296&&Q<=56319&&B<A){var i=g.charCodeAt(B);(i&64512)===56320&&(++B,Q=((Q&1023)<<10)+(i&1023)+65536)}Q&4294901760?I+=4:I+=3}else{I++;continue}}return I}function io(g,A,I){for(var B=g.length,Q=I,i=0;i<B;){var w=g.charCodeAt(i++);if(w&4294967168)if(!(w&4294965248))A[Q++]=w>>6&31|192;else{if(w>=55296&&w<=56319&&i<B){var e=g.charCodeAt(i);(e&64512)===56320&&(++i,w=((w&1023)<<10)+(e&1023)+65536)}w&4294901760?(A[Q++]=w>>18&7|240,A[Q++]=w>>12&63|128,A[Q++]=w>>6&63|128):(A[Q++]=w>>12&15|224,A[Q++]=w>>6&63|128)}else{A[Q++]=w;continue}A[Q++]=w&63|128}}var oo=new TextEncoder,Do=50;function ao(g,A,I){oo.encodeInto(g,A.subarray(I))}function rE(g,A,I){g.length>Do?ao(g,A,I):io(g,A,I)}var so=4096;function fQ(g,A,I){for(var B=A,Q=B+I,i=[],w="";B<Q;){var e=g[B++];if(!(e&128))i.push(e);else if((e&224)===192){var k=g[B++]&63;i.push((e&31)<<6|k)}else if((e&240)===224){var k=g[B++]&63,y=g[B++]&63;i.push((e&31)<<12|k<<6|y)}else if((e&248)===240){var k=g[B++]&63,y=g[B++]&63,L=g[B++]&63,T=(e&7)<<18|k<<12|y<<6|L;T>65535&&(T-=65536,i.push(T>>>10&1023|55296),T=56320|T&1023),i.push(T)}else i.push(e);i.length>=so&&(w+=String.fromCharCode.apply(String,i),i.length=0)}return i.length>0&&(w+=String.fromCharCode.apply(String,i)),w}var wo=new TextDecoder,Go=200;function eo(g,A,I){var B=g.subarray(A,A+I);return wo.decode(B)}function NE(g,A,I){return I>Go?eo(g,A,I):fQ(g,A,I)}var eB=function(){function g(A,I){this.type=A,this.data=I}return g}();var ho=function(){var g=function(A,I){return g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(B,Q){B.__proto__=Q}||function(B,Q){for(var i in Q)Object.prototype.hasOwnProperty.call(Q,i)&&(B[i]=Q[i])},g(A,I)};return function(A,I){if(typeof I!="function"&&I!==null)throw new TypeError("Class extends value "+String(I)+" is not a constructor or null");g(A,I);function B(){this.constructor=A}A.prototype=I===null?Object.create(I):(B.prototype=I.prototype,new B)}}(),zA=function(g){ho(A,g);function A(I){var B=g.call(this,I)||this,Q=Object.create(A.prototype);return Object.setPrototypeOf(B,Q),Object.defineProperty(B,"name",{configurable:!0,enumerable:!1,value:A.name}),B}return A}(Error);var Pg=4294967295;function nE(g,A,I){var B=I/4294967296,Q=I;g.setUint32(A,B),g.setUint32(A+4,Q)}function yC(g,A,I){var B=Math.floor(I/4294967296),Q=I;g.setUint32(A,B),g.setUint32(A+4,Q)}function FC(g,A){var I=g.getInt32(A),B=g.getUint32(A+4);return I*4294967296+B}function HE(g,A){var I=g.getUint32(A),B=g.getUint32(A+4);return I*4294967296+B}var yo=-1,Fo=4294967296-1,Ro=17179869184-1;function So(g){var A=g.sec,I=g.nsec;if(A>=0&&I>=0&&A<=Ro)if(I===0&&A<=Fo){var B=new Uint8Array(4),Q=new DataView(B.buffer);return Q.setUint32(0,A),B}else{var i=A/4294967296,w=A&4294967295,B=new Uint8Array(8),Q=new DataView(B.buffer);return Q.setUint32(0,I<<2|i&3),Q.setUint32(4,w),B}else{var B=new Uint8Array(12),Q=new DataView(B.buffer);return Q.setUint32(0,I),yC(Q,4,A),B}}function to(g){var A=g.getTime(),I=Math.floor(A/1e3),B=(A-I*1e3)*1e6,Q=Math.floor(B/1e9);return{sec:I+Q,nsec:B-Q*1e9}}function ko(g){if(g instanceof Date){var A=to(g);return So(A)}else return null}function co(g){var A=new DataView(g.buffer,g.byteOffset,g.byteLength);switch(g.byteLength){case 4:{var I=A.getUint32(0),B=0;return{sec:I,nsec:B}}case 8:{var Q=A.getUint32(0),i=A.getUint32(4),I=(Q&3)*4294967296+i,B=Q>>>2;return{sec:I,nsec:B}}case 12:{var I=FC(A,4),B=A.getUint32(0);return{sec:I,nsec:B}}default:throw new zA("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(g.length))}}function Jo(g){var A=co(g);return new Date(A.sec*1e3+A.nsec/1e6)}var dE={type:yo,encode:ko,decode:Jo};var RC=function(){function g(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(dE)}return g.prototype.register=function(A){var I=A.type,B=A.encode,Q=A.decode;if(I>=0)this.encoders[I]=B,this.decoders[I]=Q;else{var i=1+I;this.builtInEncoders[i]=B,this.builtInDecoders[i]=Q}},g.prototype.tryToEncode=function(A,I){for(var B=0;B<this.builtInEncoders.length;B++){var Q=this.builtInEncoders[B];if(Q!=null){var i=Q(A,I);if(i!=null){var w=-1-B;return new eB(w,i)}}}for(var B=0;B<this.encoders.length;B++){var Q=this.encoders[B];if(Q!=null){var i=Q(A,I);if(i!=null){var w=B;return new eB(w,i)}}}return A instanceof eB?A:null},g.prototype.decode=function(A,I,B){var Q=I<0?this.builtInDecoders[-1-I]:this.decoders[I];return Q?Q(A,I,B):new eB(I,A)},g.defaultCodec=new g,g}();function Wg(g){return g instanceof Uint8Array?g:ArrayBuffer.isView(g)?new Uint8Array(g.buffer,g.byteOffset,g.byteLength):g instanceof ArrayBuffer?new Uint8Array(g):Uint8Array.from(g)}function ME(g){if(g instanceof ArrayBuffer)return new DataView(g);var A=Wg(g);return new DataView(A.buffer,A.byteOffset,A.byteLength)}var Uo=100,ro=2048,qE=function(){function g(A){var I,B,Q,i,w,e,k,y;this.extensionCodec=(I=A?.extensionCodec)!==null&&I!==void 0?I:RC.defaultCodec,this.context=A?.context,this.useBigInt64=(B=A?.useBigInt64)!==null&&B!==void 0?B:!1,this.maxDepth=(Q=A?.maxDepth)!==null&&Q!==void 0?Q:Uo,this.initialBufferSize=(i=A?.initialBufferSize)!==null&&i!==void 0?i:ro,this.sortKeys=(w=A?.sortKeys)!==null&&w!==void 0?w:!1,this.forceFloat32=(e=A?.forceFloat32)!==null&&e!==void 0?e:!1,this.ignoreUndefined=(k=A?.ignoreUndefined)!==null&&k!==void 0?k:!1,this.forceIntegerToFloat=(y=A?.forceIntegerToFloat)!==null&&y!==void 0?y:!1,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return g.prototype.reinitializeState=function(){this.pos=0},g.prototype.encodeSharedRef=function(A){return this.reinitializeState(),this.doEncode(A,1),this.bytes.subarray(0,this.pos)},g.prototype.encode=function(A){return this.reinitializeState(),this.doEncode(A,1),this.bytes.slice(0,this.pos)},g.prototype.doEncode=function(A,I){if(I>this.maxDepth)throw new Error("Too deep objects in depth ".concat(I));A==null?this.encodeNil():typeof A=="boolean"?this.encodeBoolean(A):typeof A=="number"?this.forceIntegerToFloat?this.encodeNumberAsFloat(A):this.encodeNumber(A):typeof A=="string"?this.encodeString(A):this.useBigInt64&&typeof A=="bigint"?this.encodeBigInt64(A):this.encodeObject(A,I)},g.prototype.ensureBufferSizeToWrite=function(A){var I=this.pos+A;this.view.byteLength<I&&this.resizeBuffer(I*2)},g.prototype.resizeBuffer=function(A){var I=new ArrayBuffer(A),B=new Uint8Array(I),Q=new DataView(I);B.set(this.bytes),this.view=Q,this.bytes=B},g.prototype.encodeNil=function(){this.writeU8(192)},g.prototype.encodeBoolean=function(A){A===!1?this.writeU8(194):this.writeU8(195)},g.prototype.encodeNumber=function(A){!this.forceIntegerToFloat&&Number.isSafeInteger(A)?A>=0?A<128?this.writeU8(A):A<256?(this.writeU8(204),this.writeU8(A)):A<65536?(this.writeU8(205),this.writeU16(A)):A<4294967296?(this.writeU8(206),this.writeU32(A)):this.useBigInt64?this.encodeNumberAsFloat(A):(this.writeU8(207),this.writeU64(A)):A>=-32?this.writeU8(224|A+32):A>=-128?(this.writeU8(208),this.writeI8(A)):A>=-32768?(this.writeU8(209),this.writeI16(A)):A>=-2147483648?(this.writeU8(210),this.writeI32(A)):this.useBigInt64?this.encodeNumberAsFloat(A):(this.writeU8(211),this.writeI64(A)):this.encodeNumberAsFloat(A)},g.prototype.encodeNumberAsFloat=function(A){this.forceFloat32?(this.writeU8(202),this.writeF32(A)):(this.writeU8(203),this.writeF64(A))},g.prototype.encodeBigInt64=function(A){A>=BigInt(0)?(this.writeU8(207),this.writeBigUint64(A)):(this.writeU8(211),this.writeBigInt64(A))},g.prototype.writeStringHeader=function(A){if(A<32)this.writeU8(160+A);else if(A<256)this.writeU8(217),this.writeU8(A);else if(A<65536)this.writeU8(218),this.writeU16(A);else if(A<4294967296)this.writeU8(219),this.writeU32(A);else throw new Error("Too long string: ".concat(A," bytes in UTF-8"))},g.prototype.encodeString=function(A){var I=5,B=UE(A);this.ensureBufferSizeToWrite(I+B),this.writeStringHeader(B),rE(A,this.bytes,this.pos),this.pos+=B},g.prototype.encodeObject=function(A,I){var B=this.extensionCodec.tryToEncode(A,this.context);if(B!=null)this.encodeExtension(B);else if(Array.isArray(A))this.encodeArray(A,I);else if(ArrayBuffer.isView(A))this.encodeBinary(A);else if(typeof A=="object")this.encodeMap(A,I);else throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(A)))},g.prototype.encodeBinary=function(A){var I=A.byteLength;if(I<256)this.writeU8(196),this.writeU8(I);else if(I<65536)this.writeU8(197),this.writeU16(I);else if(I<4294967296)this.writeU8(198),this.writeU32(I);else throw new Error("Too large binary: ".concat(I));var B=Wg(A);this.writeU8a(B)},g.prototype.encodeArray=function(A,I){var B=A.length;if(B<16)this.writeU8(144+B);else if(B<65536)this.writeU8(220),this.writeU16(B);else if(B<4294967296)this.writeU8(221),this.writeU32(B);else throw new Error("Too large array: ".concat(B));for(var Q=0,i=A;Q<i.length;Q++){var w=i[Q];this.doEncode(w,I+1)}},g.prototype.countWithoutUndefined=function(A,I){for(var B=0,Q=0,i=I;Q<i.length;Q++){var w=i[Q];A[w]!==void 0&&B++}return B},g.prototype.encodeMap=function(A,I){var B=Object.keys(A);this.sortKeys&&B.sort();var Q=this.ignoreUndefined?this.countWithoutUndefined(A,B):B.length;if(Q<16)this.writeU8(128+Q);else if(Q<65536)this.writeU8(222),this.writeU16(Q);else if(Q<4294967296)this.writeU8(223),this.writeU32(Q);else throw new Error("Too large map object: ".concat(Q));for(var i=0,w=B;i<w.length;i++){var e=w[i],k=A[e];this.ignoreUndefined&&k===void 0||(this.encodeString(e),this.doEncode(k,I+1))}},g.prototype.encodeExtension=function(A){var I=A.data.length;if(I===1)this.writeU8(212);else if(I===2)this.writeU8(213);else if(I===4)this.writeU8(214);else if(I===8)this.writeU8(215);else if(I===16)this.writeU8(216);else if(I<256)this.writeU8(199),this.writeU8(I);else if(I<65536)this.writeU8(200),this.writeU16(I);else if(I<4294967296)this.writeU8(201),this.writeU32(I);else throw new Error("Too large extension object: ".concat(I));this.writeI8(A.type),this.writeU8a(A.data)},g.prototype.writeU8=function(A){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,A),this.pos++},g.prototype.writeU8a=function(A){var I=A.length;this.ensureBufferSizeToWrite(I),this.bytes.set(A,this.pos),this.pos+=I},g.prototype.writeI8=function(A){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,A),this.pos++},g.prototype.writeU16=function(A){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,A),this.pos+=2},g.prototype.writeI16=function(A){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,A),this.pos+=2},g.prototype.writeU32=function(A){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,A),this.pos+=4},g.prototype.writeI32=function(A){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,A),this.pos+=4},g.prototype.writeF32=function(A){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,A),this.pos+=4},g.prototype.writeF64=function(A){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,A),this.pos+=8},g.prototype.writeU64=function(A){this.ensureBufferSizeToWrite(8),nE(this.view,this.pos,A),this.pos+=8},g.prototype.writeI64=function(A){this.ensureBufferSizeToWrite(8),yC(this.view,this.pos,A),this.pos+=8},g.prototype.writeBigUint64=function(A){this.ensureBufferSizeToWrite(8),this.view.setBigUint64(this.pos,A),this.pos+=8},g.prototype.writeBigInt64=function(A){this.ensureBufferSizeToWrite(8),this.view.setBigInt64(this.pos,A),this.pos+=8},g}();function bQ(g,A){var I=new qE(A);return I.encodeSharedRef(g)}function SC(g){return"".concat(g<0?"-":"","0x").concat(Math.abs(g).toString(16).padStart(2,"0"))}var No=16,no=16,KE=function(){function g(A,I){A===void 0&&(A=No),I===void 0&&(I=no),this.maxKeyLength=A,this.maxLengthPerKey=I,this.hit=0,this.miss=0,this.caches=[];for(var B=0;B<this.maxKeyLength;B++)this.caches.push([])}return g.prototype.canBeCached=function(A){return A>0&&A<=this.maxKeyLength},g.prototype.find=function(A,I,B){var Q=this.caches[B-1];A:for(var i=0,w=Q;i<w.length;i++){for(var e=w[i],k=e.bytes,y=0;y<B;y++)if(k[y]!==A[I+y])continue A;return e.str}return null},g.prototype.store=function(A,I){var B=this.caches[A.length-1],Q={bytes:A,str:I};B.length>=this.maxLengthPerKey?B[Math.random()*B.length|0]=Q:B.push(Q)},g.prototype.decode=function(A,I,B){var Q=this.find(A,I,B);if(Q!=null)return this.hit++,Q;this.miss++;var i=fQ(A,I,B),w=Uint8Array.prototype.slice.call(A,I,I+B);return this.store(w,i),i},g}();var Ho=function(g,A,I,B){function Q(i){return i instanceof I?i:new I(function(w){w(i)})}return new(I||(I=Promise))(function(i,w){function e(L){try{y(B.next(L))}catch(T){w(T)}}function k(L){try{y(B.throw(L))}catch(T){w(T)}}function y(L){L.done?i(L.value):Q(L.value).then(e,k)}y((B=B.apply(g,A||[])).next())})},pQ=function(g,A){var I={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},B,Q,i,w;return w={next:e(0),throw:e(1),return:e(2)},typeof Symbol=="function"&&(w[Symbol.iterator]=function(){return this}),w;function e(y){return function(L){return k([y,L])}}function k(y){if(B)throw new TypeError("Generator is already executing.");for(;w&&(w=0,y[0]&&(I=0)),I;)try{if(B=1,Q&&(i=y[0]&2?Q.return:y[0]?Q.throw||((i=Q.return)&&i.call(Q),0):Q.next)&&!(i=i.call(Q,y[1])).done)return i;switch(Q=0,i&&(y=[y[0]&2,i.value]),y[0]){case 0:case 1:i=y;break;case 4:return I.label++,{value:y[1],done:!1};case 5:I.label++,Q=y[1],y=[0];continue;case 7:y=I.ops.pop(),I.trys.pop();continue;default:if(i=I.trys,!(i=i.length>0&&i[i.length-1])&&(y[0]===6||y[0]===2)){I=0;continue}if(y[0]===3&&(!i||y[1]>i[0]&&y[1]<i[3])){I.label=y[1];break}if(y[0]===6&&I.label<i[1]){I.label=i[1],i=y;break}if(i&&I.label<i[2]){I.label=i[2],I.ops.push(y);break}i[2]&&I.ops.pop(),I.trys.pop();continue}y=A.call(g,I)}catch(L){y=[6,L],Q=0}finally{B=i=0}if(y[0]&5)throw y[1];return{value:y[0]?y[1]:void 0,done:!0}}},LE=function(g){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var A=g[Symbol.asyncIterator],I;return A?A.call(g):(g=typeof __values=="function"?__values(g):g[Symbol.iterator](),I={},B("next"),B("throw"),B("return"),I[Symbol.asyncIterator]=function(){return this},I);function B(i){I[i]=g[i]&&function(w){return new Promise(function(e,k){w=g[i](w),Q(e,k,w.done,w.value)})}}function Q(i,w,e,k){Promise.resolve(k).then(function(y){i({value:y,done:e})},w)}},vg=function(g){return this instanceof vg?(this.v=g,this):new vg(g)},Mo=function(g,A,I){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var B=I.apply(g,A||[]),Q,i=[];return Q={},w("next"),w("throw"),w("return"),Q[Symbol.asyncIterator]=function(){return this},Q;function w(p){B[p]&&(Q[p]=function(j){return new Promise(function(NA,_A){i.push([p,j,NA,_A])>1||e(p,j)})})}function e(p,j){try{k(B[p](j))}catch(NA){T(i[0][3],NA)}}function k(p){p.value instanceof vg?Promise.resolve(p.value.v).then(y,L):T(i[0][2],p)}function y(p){e("next",p)}function L(p){e("throw",p)}function T(p,j){p(j),i.shift(),i.length&&e(i[0][0],i[0][1])}},lE="array",tC="map_key",qo="map_value",Ko=function(g){return typeof g=="string"||typeof g=="number"},hB=-1,xQ=new DataView(new ArrayBuffer(0)),Lo=new Uint8Array(xQ.buffer);try{xQ.getInt8(0)}catch(g){if(!(g instanceof RangeError))throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access")}var uQ=RangeError,YE=new uQ("Insufficient data"),lo=new KE,fE=function(){function g(A){var I,B,Q,i,w,e,k;this.totalPos=0,this.pos=0,this.view=xQ,this.bytes=Lo,this.headByte=hB,this.stack=[],this.extensionCodec=(I=A?.extensionCodec)!==null&&I!==void 0?I:RC.defaultCodec,this.context=A?.context,this.useBigInt64=(B=A?.useBigInt64)!==null&&B!==void 0?B:!1,this.maxStrLength=(Q=A?.maxStrLength)!==null&&Q!==void 0?Q:Pg,this.maxBinLength=(i=A?.maxBinLength)!==null&&i!==void 0?i:Pg,this.maxArrayLength=(w=A?.maxArrayLength)!==null&&w!==void 0?w:Pg,this.maxMapLength=(e=A?.maxMapLength)!==null&&e!==void 0?e:Pg,this.maxExtLength=(k=A?.maxExtLength)!==null&&k!==void 0?k:Pg,this.keyDecoder=A?.keyDecoder!==void 0?A.keyDecoder:lo}return g.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=hB,this.stack.length=0},g.prototype.setBuffer=function(A){this.bytes=Wg(A),this.view=ME(this.bytes),this.pos=0},g.prototype.appendBuffer=function(A){if(this.headByte===hB&&!this.hasRemaining(1))this.setBuffer(A);else{var I=this.bytes.subarray(this.pos),B=Wg(A),Q=new Uint8Array(I.length+B.length);Q.set(I),Q.set(B,I.length),this.setBuffer(Q)}},g.prototype.hasRemaining=function(A){return this.view.byteLength-this.pos>=A},g.prototype.createExtraByteError=function(A){var I=this,B=I.view,Q=I.pos;return new RangeError("Extra ".concat(B.byteLength-Q," of ").concat(B.byteLength," byte(s) found at buffer[").concat(A,"]"))},g.prototype.decode=function(A){this.reinitializeState(),this.setBuffer(A);var I=this.doDecodeSync();if(this.hasRemaining(1))throw this.createExtraByteError(this.pos);return I},g.prototype.decodeMulti=function(A){return pQ(this,function(I){switch(I.label){case 0:this.reinitializeState(),this.setBuffer(A),I.label=1;case 1:return this.hasRemaining(1)?[4,this.doDecodeSync()]:[3,3];case 2:return I.sent(),[3,1];case 3:return[2]}})},g.prototype.decodeAsync=function(A){var I,B,Q,i,w,e,k;return Ho(this,void 0,void 0,function(){var y,L,T,p,j,NA,_A,gA;return pQ(this,function(yA){switch(yA.label){case 0:y=!1,yA.label=1;case 1:yA.trys.push([1,6,7,12]),I=!0,B=LE(A),yA.label=2;case 2:return[4,B.next()];case 3:if(Q=yA.sent(),i=Q.done,!!i)return[3,5];k=Q.value,I=!1;try{if(T=k,y)throw this.createExtraByteError(this.totalPos);this.appendBuffer(T);try{L=this.doDecodeSync(),y=!0}catch(HI){if(!(HI instanceof uQ))throw HI}this.totalPos+=this.pos}finally{I=!0}yA.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return p=yA.sent(),w={error:p},[3,12];case 7:return yA.trys.push([7,,10,11]),!I&&!i&&(e=B.return)?[4,e.call(B)]:[3,9];case 8:yA.sent(),yA.label=9;case 9:return[3,11];case 10:if(w)throw w.error;return[7];case 11:return[7];case 12:if(y){if(this.hasRemaining(1))throw this.createExtraByteError(this.totalPos);return[2,L]}throw j=this,NA=j.headByte,_A=j.pos,gA=j.totalPos,new RangeError("Insufficient data in parsing ".concat(SC(NA)," at ").concat(gA," (").concat(_A," in the current buffer)"))}})})},g.prototype.decodeArrayStream=function(A){return this.decodeMultiAsync(A,!0)},g.prototype.decodeStream=function(A){return this.decodeMultiAsync(A,!1)},g.prototype.decodeMultiAsync=function(A,I){return Mo(this,arguments,function(){var Q,i,w,e,k,y,L,T,p,j,NA,_A;return pQ(this,function(gA){switch(gA.label){case 0:Q=I,i=-1,gA.label=1;case 1:gA.trys.push([1,15,16,21]),w=!0,e=LE(A),gA.label=2;case 2:return[4,vg(e.next())];case 3:if(k=gA.sent(),p=k.done,!!p)return[3,14];_A=k.value,w=!1,gA.label=4;case 4:if(gA.trys.push([4,,12,13]),y=_A,I&&i===0)throw this.createExtraByteError(this.totalPos);this.appendBuffer(y),Q&&(i=this.readArraySize(),Q=!1,this.complete()),gA.label=5;case 5:gA.trys.push([5,10,,11]),gA.label=6;case 6:return[4,vg(this.doDecodeSync())];case 7:return[4,gA.sent()];case 8:return gA.sent(),--i===0?[3,9]:[3,6];case 9:return[3,11];case 10:if(L=gA.sent(),!(L instanceof uQ))throw L;return[3,11];case 11:return this.totalPos+=this.pos,[3,13];case 12:return w=!0,[7];case 13:return[3,2];case 14:return[3,21];case 15:return T=gA.sent(),j={error:T},[3,21];case 16:return gA.trys.push([16,,19,20]),!w&&!p&&(NA=e.return)?[4,vg(NA.call(e))]:[3,18];case 17:gA.sent(),gA.label=18;case 18:return[3,20];case 19:if(j)throw j.error;return[7];case 20:return[7];case 21:return[2]}})})},g.prototype.doDecodeSync=function(){A:for(;;){var A=this.readHeadByte(),I=void 0;if(A>=224)I=A-256;else if(A<192)if(A<128)I=A;else if(A<144){var B=A-128;if(B!==0){this.pushMapState(B),this.complete();continue A}else I={}}else if(A<160){var B=A-144;if(B!==0){this.pushArrayState(B),this.complete();continue A}else I=[]}else{var Q=A-160;I=this.decodeUtf8String(Q,0)}else if(A===192)I=null;else if(A===194)I=!1;else if(A===195)I=!0;else if(A===202)I=this.readF32();else if(A===203)I=this.readF64();else if(A===204)I=this.readU8();else if(A===205)I=this.readU16();else if(A===206)I=this.readU32();else if(A===207)this.useBigInt64?I=this.readU64AsBigInt():I=this.readU64();else if(A===208)I=this.readI8();else if(A===209)I=this.readI16();else if(A===210)I=this.readI32();else if(A===211)this.useBigInt64?I=this.readI64AsBigInt():I=this.readI64();else if(A===217){var Q=this.lookU8();I=this.decodeUtf8String(Q,1)}else if(A===218){var Q=this.lookU16();I=this.decodeUtf8String(Q,2)}else if(A===219){var Q=this.lookU32();I=this.decodeUtf8String(Q,4)}else if(A===220){var B=this.readU16();if(B!==0){this.pushArrayState(B),this.complete();continue A}else I=[]}else if(A===221){var B=this.readU32();if(B!==0){this.pushArrayState(B),this.complete();continue A}else I=[]}else if(A===222){var B=this.readU16();if(B!==0){this.pushMapState(B),this.complete();continue A}else I={}}else if(A===223){var B=this.readU32();if(B!==0){this.pushMapState(B),this.complete();continue A}else I={}}else if(A===196){var B=this.lookU8();I=this.decodeBinary(B,1)}else if(A===197){var B=this.lookU16();I=this.decodeBinary(B,2)}else if(A===198){var B=this.lookU32();I=this.decodeBinary(B,4)}else if(A===212)I=this.decodeExtension(1,0);else if(A===213)I=this.decodeExtension(2,0);else if(A===214)I=this.decodeExtension(4,0);else if(A===215)I=this.decodeExtension(8,0);else if(A===216)I=this.decodeExtension(16,0);else if(A===199){var B=this.lookU8();I=this.decodeExtension(B,1)}else if(A===200){var B=this.lookU16();I=this.decodeExtension(B,2)}else if(A===201){var B=this.lookU32();I=this.decodeExtension(B,4)}else throw new zA("Unrecognized type byte: ".concat(SC(A)));this.complete();for(var i=this.stack;i.length>0;){var w=i[i.length-1];if(w.type===lE)if(w.array[w.position]=I,w.position++,w.position===w.size)i.pop(),I=w.array;else continue A;else if(w.type===tC){if(!Ko(I))throw new zA("The type of key must be string or number but "+typeof I);if(I==="__proto__")throw new zA("The key __proto__ is not allowed");w.key=I,w.type=qo;continue A}else if(w.map[w.key]=I,w.readCount++,w.readCount===w.size)i.pop(),I=w.map;else{w.key=null,w.type=tC;continue A}}return I}},g.prototype.readHeadByte=function(){return this.headByte===hB&&(this.headByte=this.readU8()),this.headByte},g.prototype.complete=function(){this.headByte=hB},g.prototype.readArraySize=function(){var A=this.readHeadByte();switch(A){case 220:return this.readU16();case 221:return this.readU32();default:{if(A<160)return A-144;throw new zA("Unrecognized array type byte: ".concat(SC(A)))}}},g.prototype.pushMapState=function(A){if(A>this.maxMapLength)throw new zA("Max length exceeded: map length (".concat(A,") > maxMapLengthLength (").concat(this.maxMapLength,")"));this.stack.push({type:tC,size:A,key:null,readCount:0,map:{}})},g.prototype.pushArrayState=function(A){if(A>this.maxArrayLength)throw new zA("Max length exceeded: array length (".concat(A,") > maxArrayLength (").concat(this.maxArrayLength,")"));this.stack.push({type:lE,size:A,array:new Array(A),position:0})},g.prototype.decodeUtf8String=function(A,I){var B;if(A>this.maxStrLength)throw new zA("Max length exceeded: UTF-8 byte length (".concat(A,") > maxStrLength (").concat(this.maxStrLength,")"));if(this.bytes.byteLength<this.pos+I+A)throw YE;var Q=this.pos+I,i;return this.stateIsMapKey()&&(!((B=this.keyDecoder)===null||B===void 0)&&B.canBeCached(A))?i=this.keyDecoder.decode(this.bytes,Q,A):i=NE(this.bytes,Q,A),this.pos+=I+A,i},g.prototype.stateIsMapKey=function(){if(this.stack.length>0){var A=this.stack[this.stack.length-1];return A.type===tC}return!1},g.prototype.decodeBinary=function(A,I){if(A>this.maxBinLength)throw new zA("Max length exceeded: bin length (".concat(A,") > maxBinLength (").concat(this.maxBinLength,")"));if(!this.hasRemaining(A+I))throw YE;var B=this.pos+I,Q=this.bytes.subarray(B,B+A);return this.pos+=I+A,Q},g.prototype.decodeExtension=function(A,I){if(A>this.maxExtLength)throw new zA("Max length exceeded: ext length (".concat(A,") > maxExtLength (").concat(this.maxExtLength,")"));var B=this.view.getInt8(this.pos+I),Q=this.decodeBinary(A,I+1);return this.extensionCodec.decode(Q,B,this.context)},g.prototype.lookU8=function(){return this.view.getUint8(this.pos)},g.prototype.lookU16=function(){return this.view.getUint16(this.pos)},g.prototype.lookU32=function(){return this.view.getUint32(this.pos)},g.prototype.readU8=function(){var A=this.view.getUint8(this.pos);return this.pos++,A},g.prototype.readI8=function(){var A=this.view.getInt8(this.pos);return this.pos++,A},g.prototype.readU16=function(){var A=this.view.getUint16(this.pos);return this.pos+=2,A},g.prototype.readI16=function(){var A=this.view.getInt16(this.pos);return this.pos+=2,A},g.prototype.readU32=function(){var A=this.view.getUint32(this.pos);return this.pos+=4,A},g.prototype.readI32=function(){var A=this.view.getInt32(this.pos);return this.pos+=4,A},g.prototype.readU64=function(){var A=HE(this.view,this.pos);return this.pos+=8,A},g.prototype.readI64=function(){var A=FC(this.view,this.pos);return this.pos+=8,A},g.prototype.readU64AsBigInt=function(){var A=this.view.getBigUint64(this.pos);return this.pos+=8,A},g.prototype.readI64AsBigInt=function(){var A=this.view.getBigInt64(this.pos);return this.pos+=8,A},g.prototype.readF32=function(){var A=this.view.getFloat32(this.pos);return this.pos+=4,A},g.prototype.readF64=function(){var A=this.view.getFloat64(this.pos);return this.pos+=8,A},g}();function mQ(g,A){var I=new fE(A);return I.decode(g)}function bE(g){return bQ(g)}function pE(g){return mQ(g)}var OQ=sE(WQ());function qA(g,A,I){return g.postMessage(A,I)}function hA(g,A,I){let B;switch(A){case"f32":B=g.HEAPF32;break;case"u32":B=g.HEAPU32;break;case"i32":B=g.HEAP32;break;case"u8":B=g.HEAPU8;break;default:throw new Error(`allocating ${A} is not supported`)}let Q=g._malloc(I*B.BYTES_PER_ELEMENT);if(Q===0||Q%B.BYTES_PER_ELEMENT!==0)throw new Error(`failed allocating a ${I} ${A} array`);let i=Q/B.BYTES_PER_ELEMENT;return B.subarray(i,i+I)}function hI(g,A){g._free(A.byteOffset)}function kC(g,A,I,B){return{headers:hA(g,"i32",I),samples:hA(g,"f32",I*mE({sampleRate:A,stereo:B})),length:I,sampleRate:A,stereo:B}}function cC(g,A){hI(g,A.headers),hI(g,A.samples)}function mE(g){return g.sampleRate*.02*(g.stereo?2:1)}function JC(g,A){let I=mE(g),B=I*A,Q=B+I;return g.samples.subarray(B,Q)}function vQ(g,A,I){g.headers[A]=I.id}function UC(g,A){return{values:hA(g,"f32",1+A*2),length:A}}function rC(g,A){hI(g,A.values)}function ZQ(g,A){g.values[0]=A}function PE(g,A){return g.values[1+A*2]}function NC(g,A,I){g.values[1+A*2]=I}function VQ(g,A,I){g.values[1+A*2+1]=I}function nC(g){return{values:hA(g,"f32",4)}}function HC(g,A){hI(g,A.values)}function WE(g){return g.values[0]!==0}function TQ(g){return g.values[1]}function XQ(g,A){return g.values[3]=A}var yI=class g{constructor(A,I,B,Q,i){this.mediaIds=A;this.sequenceNumber=I;this.timeStamp=B;this.isEndOfSpurt=Q;this.payload=i}static parse(A){let I;try{I=pE(A)}catch{return MA("not valid msgpack")}if(!Array.isArray(I))return MA("container must be an array");if(I.length<6)return MA("missing fields");if(I[0]!==1)return MA("unknown type");if(!Array.isArray(I[1]))return MA("media ids must be an array");if(!I[1].every(y=>typeof y=="number"))return MA("media ids must be numbers");if(typeof I[2]!="number")return MA("sequence number must be a number");if(typeof I[3]!="number")return MA("timestamp must be a number");if(typeof I[4]!="number")return MA("flags must be a number");let B=I[1],Q=I[2]>>>0,i=I[3]>>>0,e=(I[4]&1)!==0,k=I[I.length-1];return k instanceof Uint8Array?GB(new g(B,Q,i,e,k)):MA("payload must be bytes")}toBytes(){let A=Number(this.isEndOfSpurt);return new Uint8Array(bE([1,this.mediaIds,this.sequenceNumber>>>0,this.timeStamp>>>0,A,this.payload]))}};var MC=class{constructor(A,I){this.sampleRate=A;this.wasm=I;this.id=-1;this.sequenceNumber=Math.random()*Math.pow(2,32)>>0;this.timestamp=Math.random()*Math.pow(2,32)>>0;this.connections=[];this.active=!1;this.encoder=new I.Encoder(A,15,!0,3),this.samples=kC(this.wasm,A,8,!1),this.information=nC(this.wasm),this.outBuffer=hA(this.wasm,"u8",1270)}setVad(A){this.encoder.set_volume_gate(A.volumeGate!==void 0,A.volumeGate?.attackThreshold??0,A.volumeGate?.releaseThreshold??0),this.encoder.set_speech_detection(A.voiceActivity!==void 0,A.voiceActivity?.attackThreshold??0,A.voiceActivity?.releaseThreshold??0)}setMedias(A){this.connections=A.filter(({mediaIds:I})=>I.length>0)}close(){cC(this.wasm,this.samples),HC(this.wasm,this.information),hI(this.wasm,this.outBuffer),this.encoder.delete()}tick(){for(this.id+=1,this.encoder.push(JC(this.samples,this.id%this.samples.length).byteOffset,this.information.values.byteOffset);;){let A=this.encoder.pop(this.connections.length===0?0:this.outBuffer.byteOffset,this.outBuffer.length);if(A===0)break;if(A<0){console.error(`failed encoding packet: ${A}`);return}if(this.timestamp=this.timestamp+1800>>0,A===1)continue;this.sequenceNumber=this.sequenceNumber+1>>0;let I=this.active&&!this.encoder.active;this.active=this.encoder.active;for(let B of this.connections){let Q=new yI(B.mediaIds,this.sequenceNumber,this.timestamp,I,this.outBuffer.subarray(0,A));qA(globalThis,["sendPacket",{connectionId:B.id,packet:Q.toBytes()}])}}}};function vI(g){return g.connectionId*4294967296+g.mediaId}var qC=class{constructor(A){this.wasm=A;this.medias=new Map;this.largestIndex=-1;let I=5;this.sampleBuffer=kC(A,48e3,I,!0),this.sampleBuffer.samples.fill(0);let B=I-2;for(let Q=0;Q<B;Q++)vQ(this.sampleBuffer,Q,{id:Q});this.id=B,this.decoders=hA(this.wasm,"u32",512),this.information=UC(this.wasm,512)}close(){cC(this.wasm,this.sampleBuffer),rC(this.wasm,this.information);for(let{decoder:A}of this.medias.values())A.delete()}receivePacket(A,I){let B=yI.parse(I);if(B.type==="Failure"){console.error(`failed decoding audio packet; ${B.reason}`);return}for(let Q of B.value.mediaIds){let i=this.medias.get(vI({connectionId:A,mediaId:Q}));if(i===void 0)continue;let w=hA(this.wasm,"u8",B.value.payload.length);w.set(B.value.payload),i.decoder.push(B.value.sequenceNumber,B.value.timeStamp,B.value.isEndOfSpurt,w.byteOffset,w.length)}}insertMedia(A,I,B){let Q=vI({connectionId:I,mediaId:B}),i=new this.wasm.Decoder;this.medias.set(Q,{index:A,decoder:i}),this.decoders[A]=i.$$.ptr,this.largestIndex=Math.max(this.largestIndex,A)}removeMedia(A,I,B){let Q=vI({connectionId:I,mediaId:B}),i=this.medias.get(Q);if(!(i===void 0||i.index!==A)&&(this.medias.delete(Q),NC(this.information,A,0),this.decoders[A]=0,i.decoder.delete(),A===this.largestIndex)){for(A=A-1;A>=0&&this.decoders[A]===0;A--);this.largestIndex=A}}tick(){let A=this.id++,I=A%this.sampleBuffer.length;this.wasm.pop_many(this.decoders.byteOffset,this.information.values.byteOffset,this.largestIndex+1,JC(this.sampleBuffer,I).byteOffset)&&vQ(this.sampleBuffer,I,{id:A})}};var ZI,yg;function KC(g){uo(g.data)}function uo(g){let[A,I]=g;switch(A){case"playbackInit":ZI=new qC((0,OQ.default)()),I.workletPort.onmessage=B=>KC(B),qA(globalThis,["playbackReady",{informationBuffer:ZI.information,sampleBuffer:ZI.sampleBuffer}]);break;case"playbackReceivePacket":ZI?.receivePacket(I.connectionId,I.packet);break;case"playbackUpdateMedias":for(let{index:B,connectionId:Q,mediaId:i}of I.removed)ZI?.removeMedia(B,Q,i);for(let{index:B,connectionId:Q,mediaId:i}of I.added)ZI?.insertMedia(B,Q,i);break;case"playbackTick":ZI?.tick();break;case"captureInit":yg=new MC(I.sampleRate,(0,OQ.default)()),I.workletPort.onmessage=B=>KC(B),qA(globalThis,["captureReady",{sampleBuffer:yg.samples,informationBuffer:yg.information}]);break;case"captureSetVad":yg?.setVad(I);break;case"captureSetMedias":yg?.setMedias(I.connections);break;case"captureTick":yg?.tick();break;case"close":ZI?.close(),yg?.close(),self.close();break}}var jQ=sE(WQ());var LC=class{constructor(A,I){this.sampleRate=A;this.wasm=I;this.sequenceNumber=Math.random()*Math.pow(2,32)>>0;this.timestamp=Math.random()*Math.pow(2,32)>>0;this.connections=[];this.active=!1;this.encoder=new I.Encoder(A,15,!0,3),this.information=nC(this.wasm),this.inBuffer=hA(this.wasm,"f32",A*.02),this.outBuffer=hA(this.wasm,"u8",1270),XQ(this.information,1)}setVad(A){this.encoder.set_volume_gate(A.volumeGate!==void 0,A.volumeGate?.attackThreshold??0,A.volumeGate?.releaseThreshold??0),this.encoder.set_speech_detection(A.voiceActivity!==void 0,A.voiceActivity?.attackThreshold??0,A.voiceActivity?.releaseThreshold??0)}setMedias(A){this.connections=A.filter(({mediaIds:I})=>I.length>0)}setVolume(A){XQ(this.information,A)}close(){HC(this.wasm,this.information),hI(this.wasm,this.inBuffer),hI(this.wasm,this.outBuffer),this.encoder.delete()}tick(A){for(this.inBuffer.set(A,0),this.encoder.push(this.inBuffer.byteOffset,this.information.values.byteOffset);;){let I=this.encoder.pop(this.connections.length===0?0:this.outBuffer.byteOffset,this.outBuffer.length);if(I===0)break;if(I<0){console.error(`failed encoding packet: ${I}`);return}if(this.timestamp=this.timestamp+1800>>0,I===1)continue;this.sequenceNumber=this.sequenceNumber+1>>0;let B=this.active&&!this.encoder.active;this.active=this.encoder.active;for(let Q of this.connections){let i=new yI(Q.mediaIds,this.sequenceNumber,this.timestamp,B,this.outBuffer.subarray(0,I));qA(globalThis,["sendPacket",{connectionId:Q.id,packet:i.toBytes()}])}}}};var lC=class{constructor(A,I){this.wasm=A;this.workletPort=I;this.medias=new Map;this.largestIndex=-1;this.id=3,this.decoders=hA(this.wasm,"u32",512),this.information=UC(this.wasm,512),this.outBuffer=hA(this.wasm,"f32",48e3*.02*2),ZQ(this.information,1)}close(){rC(this.wasm,this.information);for(let{decoder:A}of this.medias.values())A.delete()}receivePacket(A,I){let B=yI.parse(I);if(B.type==="Failure"){console.error(`failed decoding audio packet; ${B.reason}`);return}for(let Q of B.value.mediaIds){let i=this.medias.get(vI({connectionId:A,mediaId:Q}));if(i===void 0)continue;let w=hA(this.wasm,"u8",B.value.payload.length);w.set(B.value.payload),i.decoder.push(B.value.sequenceNumber,B.value.timeStamp,B.value.isEndOfSpurt,w.byteOffset,w.length)}}insertMedia(A,I,B){let Q=vI({connectionId:I,mediaId:B}),i=new this.wasm.Decoder;this.medias.set(Q,{index:A,decoder:i}),this.decoders[A]=i.$$.ptr,this.largestIndex=Math.max(this.largestIndex,A),VQ(this.information,A,1)}removeMedia(A,I,B){let Q=vI({connectionId:I,mediaId:B}),i=this.medias.get(Q);if(!(i===void 0||i.index!==A)&&(this.medias.delete(Q),NC(this.information,A,0),this.decoders[A]=0,i.decoder.delete(),A===this.largestIndex)){for(A=A-1;A>=0&&this.decoders[A]===0;A--);this.largestIndex=A}}setVolume(A,I){A==="global"?ZQ(this.information,I):VQ(this.information,A,I)}tick(){let A=this.id++;if(this.wasm.pop_many(this.decoders.byteOffset,this.information.values.byteOffset,this.largestIndex+1,this.outBuffer.byteOffset)){let B=this.outBuffer.slice();qA(this.workletPort,["samples",{id:this.id,buffer:B}],[B.buffer])}}};var FI,vE,nI,ZE;function YC(g){mo(g.data)}function mo(g){let[A,I]=g;switch(A){case"playbackInit":FI=new lC((0,jQ.default)(),I.workletPort),vE=setInterval(()=>{let B=new Float32Array(FI.information.length*2);for(let Q=0;Q<=FI.largestIndex;Q++)B[Q]=PE(FI.information,Q);qA(globalThis,["playbackUpdate",{activities:B}],[B.buffer])},I.refreshRate),I.workletPort.onmessage=B=>YC(B),qA(globalThis,["playbackReady",void 0]);break;case"playbackReceivePacket":FI?.receivePacket(I.connectionId,I.packet);break;case"playbackUpdateMedias":for(let{index:B,connectionId:Q,mediaId:i}of I.removed)FI?.removeMedia(B,Q,i);for(let{index:B,connectionId:Q,mediaId:i}of I.added)FI?.insertMedia(B,Q,i);break;case"playbackSetVolume":FI?.setVolume(I.index,I.value);break;case"playbackTick":FI?.tick();break;case"captureInit":nI=new LC(I.sampleRate,(0,jQ.default)()),ZE=setInterval(()=>{qA(globalThis,["captureUpdate",{active:WE(nI.information),rmsDBFs:TQ(nI.information),speechProbability:TQ(nI.information)}])},I.refreshRate),I.workletPort.onmessage=B=>YC(B),qA(globalThis,["captureReady",void 0]);break;case"captureSetVad":nI?.setVad(I);break;case"captureSetMedias":nI?.setMedias(I.connections);break;case"captureSetVolume":nI?.setVolume(I.value);break;case"captureTick":nI?.tick(I.buffer);break;case"close":FI?.close(),clearInterval(vE),nI?.close(),clearInterval(ZE),self.close();break}}JE()?self.addEventListener("message",KC):self.addEventListener("message",YC);})();\n';
  var QI = '"use strict";(()=>{var x;(function(r){r.assertEqual=s=>s;function e(s){}r.assertIs=e;function t(s){throw new Error}r.assertNever=t,r.arrayToEnum=s=>{let a={};for(let i of s)a[i]=i;return a},r.getValidEnumValues=s=>{let a=r.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(let o of a)i[o]=s[o];return r.objectValues(i)},r.objectValues=s=>r.objectKeys(s).map(function(a){return s[a]}),r.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{let a=[];for(let i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},r.find=(s,a)=>{for(let i of s)if(a(i))return i},r.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&isFinite(s)&&Math.floor(s)===s;function n(s,a=" | "){return s.map(i=>typeof i=="string"?`\'${i}\'`:i).join(a)}r.joinValues=n,r.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(x||(x={}));var Ve;(function(r){r.mergeShapes=(e,t)=>({...e,...t})})(Ve||(Ve={}));var l=x.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),$=r=>{switch(typeof r){case"undefined":return l.undefined;case"string":return l.string;case"number":return isNaN(r)?l.nan:l.number;case"boolean":return l.boolean;case"function":return l.function;case"bigint":return l.bigint;case"symbol":return l.symbol;case"object":return Array.isArray(r)?l.array:r===null?l.null:r.then&&typeof r.then=="function"&&r.catch&&typeof r.catch=="function"?l.promise:typeof Map<"u"&&r instanceof Map?l.map:typeof Set<"u"&&r instanceof Set?l.set:typeof Date<"u"&&r instanceof Date?l.date:l.object;default:return l.unknown}},c=x.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),vt=r=>JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:"),A=class extends Error{constructor(e){super(),this.issues=[],this.addIssue=n=>{this.issues=[...this.issues,n]},this.addIssues=(n=[])=>{this.issues=[...this.issues,...n]};let t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){let t=e||function(a){return a.message},n={_errors:[]},s=a=>{for(let i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)n._errors.push(t(i));else{let o=n,p=0;for(;p<i.path.length;){let u=i.path[p];p===i.path.length-1?(o[u]=o[u]||{_errors:[]},o[u]._errors.push(t(i))):o[u]=o[u]||{_errors:[]},o=o[u],p++}}};return s(this),n}toString(){return this.message}get message(){return JSON.stringify(this.issues,x.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){let t={},n=[];for(let s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):n.push(e(s));return{formErrors:n,fieldErrors:t}}get formErrors(){return this.flatten()}};A.create=r=>new A(r);var xe=(r,e)=>{let t;switch(r.code){case c.invalid_type:r.received===l.undefined?t="Required":t=`Expected ${r.expected}, received ${r.received}`;break;case c.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(r.expected,x.jsonStringifyReplacer)}`;break;case c.unrecognized_keys:t=`Unrecognized key(s) in object: ${x.joinValues(r.keys,", ")}`;break;case c.invalid_union:t="Invalid input";break;case c.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${x.joinValues(r.options)}`;break;case c.invalid_enum_value:t=`Invalid enum value. Expected ${x.joinValues(r.options)}, received \'${r.received}\'`;break;case c.invalid_arguments:t="Invalid function arguments";break;case c.invalid_return_type:t="Invalid function return type";break;case c.invalid_date:t="Invalid date";break;case c.invalid_string:typeof r.validation=="object"?"includes"in r.validation?(t=`Invalid input: must include "${r.validation.includes}"`,typeof r.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${r.validation.position}`)):"startsWith"in r.validation?t=`Invalid input: must start with "${r.validation.startsWith}"`:"endsWith"in r.validation?t=`Invalid input: must end with "${r.validation.endsWith}"`:x.assertNever(r.validation):r.validation!=="regex"?t=`Invalid ${r.validation}`:t="Invalid";break;case c.too_small:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at least":"more than"} ${r.minimum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at least":"over"} ${r.minimum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${r.minimum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(r.minimum))}`:t="Invalid input";break;case c.too_big:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at most":"less than"} ${r.maximum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at most":"under"} ${r.maximum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="bigint"?t=`BigInt must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly":r.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(r.maximum))}`:t="Invalid input";break;case c.custom:t="Invalid input";break;case c.invalid_intersection_types:t="Intersection results could not be merged";break;case c.not_multiple_of:t=`Number must be a multiple of ${r.multipleOf}`;break;case c.not_finite:t="Number must be finite";break;default:t=e.defaultError,x.assertNever(r)}return{message:t}},st=xe;function _t(r){st=r}function Te(){return st}var Re=r=>{let{data:e,path:t,errorMaps:n,issueData:s}=r,a=[...t,...s.path||[]],i={...s,path:a},o="",p=n.filter(u=>!!u).slice().reverse();for(let u of p)o=u(i,{data:e,defaultError:o}).message;return{...s,path:a,message:s.message||o}},xt=[];function f(r,e){let t=Re({issueData:e,data:r.data,path:r.path,errorMaps:[r.common.contextualErrorMap,r.schemaErrorMap,Te(),xe].filter(n=>!!n)});r.common.issues.push(t)}var S=class r{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){let n=[];for(let s of t){if(s.status==="aborted")return y;s.status==="dirty"&&e.dirty(),n.push(s.value)}return{status:e.value,value:n}}static async mergeObjectAsync(e,t){let n=[];for(let s of t)n.push({key:await s.key,value:await s.value});return r.mergeObjectSync(e,n)}static mergeObjectSync(e,t){let n={};for(let s of t){let{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return y;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(n[a.value]=i.value)}return{status:e.value,value:n}}},y=Object.freeze({status:"aborted"}),at=r=>({status:"dirty",value:r}),R=r=>({status:"valid",value:r}),We=r=>r.status==="aborted",Le=r=>r.status==="dirty",be=r=>r.status==="valid",Ee=r=>typeof Promise<"u"&&r instanceof Promise,h;(function(r){r.errToObj=e=>typeof e=="string"?{message:e}:e||{},r.toString=e=>typeof e=="string"?e:e?.message})(h||(h={}));var j=class{constructor(e,t,n,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=n,this._key=s}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}},rt=(r,e)=>{if(be(e))return{success:!0,data:e.value};if(!r.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;let t=new A(r.common.issues);return this._error=t,this._error}}};function g(r){if(!r)return{};let{errorMap:e,invalid_type_error:t,required_error:n,description:s}=r;if(e&&(t||n))throw new Error(`Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>i.code!=="invalid_type"?{message:o.defaultError}:typeof o.data>"u"?{message:n??o.defaultError}:{message:t??o.defaultError},description:s}}var v=class{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return $(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:$(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new S,ctx:{common:e.parent.common,data:e.data,parsedType:$(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){let t=this._parse(e);if(Ee(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){let t=this._parse(e);return Promise.resolve(t)}parse(e,t){let n=this.safeParse(e,t);if(n.success)return n.data;throw n.error}safeParse(e,t){var n;let s={common:{issues:[],async:(n=t?.async)!==null&&n!==void 0?n:!1,contextualErrorMap:t?.errorMap},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:$(e)},a=this._parseSync({data:e,path:s.path,parent:s});return rt(s,a)}async parseAsync(e,t){let n=await this.safeParseAsync(e,t);if(n.success)return n.data;throw n.error}async safeParseAsync(e,t){let n={common:{issues:[],contextualErrorMap:t?.errorMap,async:!0},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:$(e)},s=this._parse({data:e,path:n.path,parent:n}),a=await(Ee(s)?s:Promise.resolve(s));return rt(n,a)}refine(e,t){let n=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{let i=e(s),o=()=>a.addIssue({code:c.custom,...n(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(p=>p?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((n,s)=>e(n)?!0:(s.addIssue(typeof t=="function"?t(n,s):t),!1))}_refinement(e){return new O({schema:this,typeName:m.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return P.create(this,this._def)}nullable(){return V.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return D.create(this,this._def)}promise(){return J.create(this,this._def)}or(e){return ee.create([this,e],this._def)}and(e){return te.create(this,e,this._def)}transform(e){return new O({...g(this._def),schema:this,typeName:m.ZodEffects,effect:{type:"transform",transform:e}})}default(e){let t=typeof e=="function"?e:()=>e;return new ie({...g(this._def),innerType:this,defaultValue:t,typeName:m.ZodDefault})}brand(){return new ze({typeName:m.ZodBranded,type:this,...g(this._def)})}catch(e){let t=typeof e=="function"?e:()=>e;return new pe({...g(this._def),innerType:this,catchValue:t,typeName:m.ZodCatch})}describe(e){let t=this.constructor;return new t({...this._def,description:e})}pipe(e){return ke.create(this,e)}readonly(){return me.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}},bt=/^c[^\\s-]{8,}$/i,kt=/^[a-z][a-z0-9]*$/,wt=/^[0-9A-HJKMNP-TV-Z]{26}$/,St=/^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i,Tt=/^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i,Rt="^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$",De,Et=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,At=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,Ot=r=>r.precision?r.offset?new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${r.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`):new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${r.precision}}Z$`):r.precision===0?r.offset?new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$"):new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$"):r.offset?new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$"):new RegExp("^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$");function Mt(r,e){return!!((e==="v4"||!e)&&Et.test(r)||(e==="v6"||!e)&&At.test(r))}var F=class r extends v{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==l.string){let a=this._getOrReturnCtx(e);return f(a,{code:c.invalid_type,expected:l.string,received:a.parsedType}),y}let n=new S,s;for(let a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),f(s,{code:c.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),n.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),f(s,{code:c.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),n.dirty());else if(a.kind==="length"){let i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?f(s,{code:c.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&f(s,{code:c.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),n.dirty())}else if(a.kind==="email")Tt.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"email",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="emoji")De||(De=new RegExp(Rt,"u")),De.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"emoji",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="uuid")St.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"uuid",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="cuid")bt.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"cuid",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="cuid2")kt.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"cuid2",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="ulid")wt.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"ulid",code:c.invalid_string,message:a.message}),n.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),f(s,{validation:"url",code:c.invalid_string,message:a.message}),n.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"regex",code:c.invalid_string,message:a.message}),n.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),f(s,{code:c.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),n.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),f(s,{code:c.invalid_string,validation:{startsWith:a.value},message:a.message}),n.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),f(s,{code:c.invalid_string,validation:{endsWith:a.value},message:a.message}),n.dirty()):a.kind==="datetime"?Ot(a).test(e.data)||(s=this._getOrReturnCtx(e,s),f(s,{code:c.invalid_string,validation:"datetime",message:a.message}),n.dirty()):a.kind==="ip"?Mt(e.data,a.version)||(s=this._getOrReturnCtx(e,s),f(s,{validation:"ip",code:c.invalid_string,message:a.message}),n.dirty()):x.assertNever(a);return{status:n.value,value:e.data}}_regex(e,t,n){return this.refinement(s=>e.test(s),{validation:t,code:c.invalid_string,...h.errToObj(n)})}_addCheck(e){return new r({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...h.errToObj(e)})}url(e){return this._addCheck({kind:"url",...h.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...h.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...h.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...h.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...h.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...h.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...h.errToObj(e)})}datetime(e){var t;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof e?.precision>"u"?null:e?.precision,offset:(t=e?.offset)!==null&&t!==void 0?t:!1,...h.errToObj(e?.message)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...h.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t?.position,...h.errToObj(t?.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...h.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...h.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...h.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...h.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...h.errToObj(t)})}nonempty(e){return this.min(1,h.errToObj(e))}trim(){return new r({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new r({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new r({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get minLength(){let e=null;for(let t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(let t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}};F.create=r=>{var e;return new F({checks:[],typeName:m.ZodString,coerce:(e=r?.coerce)!==null&&e!==void 0?e:!1,...g(r)})};function zt(r,e){let t=(r.toString().split(".")[1]||"").length,n=(e.toString().split(".")[1]||"").length,s=t>n?t:n,a=parseInt(r.toFixed(s).replace(".","")),i=parseInt(e.toFixed(s).replace(".",""));return a%i/Math.pow(10,s)}var H=class r extends v{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==l.number){let a=this._getOrReturnCtx(e);return f(a,{code:c.invalid_type,expected:l.number,received:a.parsedType}),y}let n,s=new S;for(let a of this._def.checks)a.kind==="int"?x.isInteger(e.data)||(n=this._getOrReturnCtx(e,n),f(n,{code:c.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?zt(e.data,a.value)!==0&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(n=this._getOrReturnCtx(e,n),f(n,{code:c.not_finite,message:a.message}),s.dirty()):x.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,h.toString(t))}gt(e,t){return this.setLimit("min",e,!1,h.toString(t))}lte(e,t){return this.setLimit("max",e,!0,h.toString(t))}lt(e,t){return this.setLimit("max",e,!1,h.toString(t))}setLimit(e,t,n,s){return new r({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:h.toString(s)}]})}_addCheck(e){return new r({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:h.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:h.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:h.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:h.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:h.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:h.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:h.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:h.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:h.toString(e)})}get minValue(){let e=null;for(let t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(let t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&x.isInteger(e.value))}get isFinite(){let e=null,t=null;for(let n of this._def.checks){if(n.kind==="finite"||n.kind==="int"||n.kind==="multipleOf")return!0;n.kind==="min"?(t===null||n.value>t)&&(t=n.value):n.kind==="max"&&(e===null||n.value<e)&&(e=n.value)}return Number.isFinite(t)&&Number.isFinite(e)}};H.create=r=>new H({checks:[],typeName:m.ZodNumber,coerce:r?.coerce||!1,...g(r)});var Y=class r extends v{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==l.bigint){let a=this._getOrReturnCtx(e);return f(a,{code:c.invalid_type,expected:l.bigint,received:a.parsedType}),y}let n,s=new S;for(let a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(n=this._getOrReturnCtx(e,n),f(n,{code:c.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):x.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,h.toString(t))}gt(e,t){return this.setLimit("min",e,!1,h.toString(t))}lte(e,t){return this.setLimit("max",e,!0,h.toString(t))}lt(e,t){return this.setLimit("max",e,!1,h.toString(t))}setLimit(e,t,n,s){return new r({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:h.toString(s)}]})}_addCheck(e){return new r({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:h.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:h.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:h.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:h.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:h.toString(t)})}get minValue(){let e=null;for(let t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(let t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}};Y.create=r=>{var e;return new Y({checks:[],typeName:m.ZodBigInt,coerce:(e=r?.coerce)!==null&&e!==void 0?e:!1,...g(r)})};var G=class extends v{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==l.boolean){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.boolean,received:n.parsedType}),y}return R(e.data)}};G.create=r=>new G({typeName:m.ZodBoolean,coerce:r?.coerce||!1,...g(r)});var Q=class r extends v{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==l.date){let a=this._getOrReturnCtx(e);return f(a,{code:c.invalid_type,expected:l.date,received:a.parsedType}),y}if(isNaN(e.data.getTime())){let a=this._getOrReturnCtx(e);return f(a,{code:c.invalid_date}),y}let n=new S,s;for(let a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),f(s,{code:c.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),n.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),f(s,{code:c.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),n.dirty()):x.assertNever(a);return{status:n.value,value:new Date(e.data.getTime())}}_addCheck(e){return new r({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:h.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:h.toString(t)})}get minDate(){let e=null;for(let t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(let t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}};Q.create=r=>new Q({checks:[],coerce:r?.coerce||!1,typeName:m.ZodDate,...g(r)});var de=class extends v{_parse(e){if(this._getType(e)!==l.symbol){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.symbol,received:n.parsedType}),y}return R(e.data)}};de.create=r=>new de({typeName:m.ZodSymbol,...g(r)});var X=class extends v{_parse(e){if(this._getType(e)!==l.undefined){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.undefined,received:n.parsedType}),y}return R(e.data)}};X.create=r=>new X({typeName:m.ZodUndefined,...g(r)});var K=class extends v{_parse(e){if(this._getType(e)!==l.null){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.null,received:n.parsedType}),y}return R(e.data)}};K.create=r=>new K({typeName:m.ZodNull,...g(r)});var q=class extends v{constructor(){super(...arguments),this._any=!0}_parse(e){return R(e.data)}};q.create=r=>new q({typeName:m.ZodAny,...g(r)});var U=class extends v{constructor(){super(...arguments),this._unknown=!0}_parse(e){return R(e.data)}};U.create=r=>new U({typeName:m.ZodUnknown,...g(r)});var Z=class extends v{_parse(e){let t=this._getOrReturnCtx(e);return f(t,{code:c.invalid_type,expected:l.never,received:t.parsedType}),y}};Z.create=r=>new Z({typeName:m.ZodNever,...g(r)});var ue=class extends v{_parse(e){if(this._getType(e)!==l.undefined){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.void,received:n.parsedType}),y}return R(e.data)}};ue.create=r=>new ue({typeName:m.ZodVoid,...g(r)});var D=class r extends v{_parse(e){let{ctx:t,status:n}=this._processInputParams(e),s=this._def;if(t.parsedType!==l.array)return f(t,{code:c.invalid_type,expected:l.array,received:t.parsedType}),y;if(s.exactLength!==null){let i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(f(t,{code:i?c.too_big:c.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),n.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(f(t,{code:c.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),n.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(f(t,{code:c.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),n.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new j(t,i,t.path,o)))).then(i=>S.mergeArray(n,i));let a=[...t.data].map((i,o)=>s.type._parseSync(new j(t,i,t.path,o)));return S.mergeArray(n,a)}get element(){return this._def.type}min(e,t){return new r({...this._def,minLength:{value:e,message:h.toString(t)}})}max(e,t){return new r({...this._def,maxLength:{value:e,message:h.toString(t)}})}length(e,t){return new r({...this._def,exactLength:{value:e,message:h.toString(t)}})}nonempty(e){return this.min(1,e)}};D.create=(r,e)=>new D({type:r,minLength:null,maxLength:null,exactLength:null,typeName:m.ZodArray,...g(e)});function ce(r){if(r instanceof E){let e={};for(let t in r.shape){let n=r.shape[t];e[t]=P.create(ce(n))}return new E({...r._def,shape:()=>e})}else return r instanceof D?new D({...r._def,type:ce(r.element)}):r instanceof P?P.create(ce(r.unwrap())):r instanceof V?V.create(ce(r.unwrap())):r instanceof B?B.create(r.items.map(e=>ce(e))):r}var E=class r extends v{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;let e=this._def.shape(),t=x.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==l.object){let u=this._getOrReturnCtx(e);return f(u,{code:c.invalid_type,expected:l.object,received:u.parsedType}),y}let{status:n,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof Z&&this._def.unknownKeys==="strip"))for(let u in s.data)i.includes(u)||o.push(u);let p=[];for(let u of i){let _=a[u],I=s.data[u];p.push({key:{status:"valid",value:u},value:_._parse(new j(s,I,s.path,u)),alwaysSet:u in s.data})}if(this._def.catchall instanceof Z){let u=this._def.unknownKeys;if(u==="passthrough")for(let _ of o)p.push({key:{status:"valid",value:_},value:{status:"valid",value:s.data[_]}});else if(u==="strict")o.length>0&&(f(s,{code:c.unrecognized_keys,keys:o}),n.dirty());else if(u!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{let u=this._def.catchall;for(let _ of o){let I=s.data[_];p.push({key:{status:"valid",value:_},value:u._parse(new j(s,I,s.path,_)),alwaysSet:_ in s.data})}}return s.common.async?Promise.resolve().then(async()=>{let u=[];for(let _ of p){let I=await _.key;u.push({key:I,value:await _.value,alwaysSet:_.alwaysSet})}return u}).then(u=>S.mergeObjectSync(n,u)):S.mergeObjectSync(n,p)}get shape(){return this._def.shape()}strict(e){return h.errToObj,new r({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,n)=>{var s,a,i,o;let p=(i=(a=(s=this._def).errorMap)===null||a===void 0?void 0:a.call(s,t,n).message)!==null&&i!==void 0?i:n.defaultError;return t.code==="unrecognized_keys"?{message:(o=h.errToObj(e).message)!==null&&o!==void 0?o:p}:{message:p}}}:{}})}strip(){return new r({...this._def,unknownKeys:"strip"})}passthrough(){return new r({...this._def,unknownKeys:"passthrough"})}extend(e){return new r({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new r({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:m.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new r({...this._def,catchall:e})}pick(e){let t={};return x.objectKeys(e).forEach(n=>{e[n]&&this.shape[n]&&(t[n]=this.shape[n])}),new r({...this._def,shape:()=>t})}omit(e){let t={};return x.objectKeys(this.shape).forEach(n=>{e[n]||(t[n]=this.shape[n])}),new r({...this._def,shape:()=>t})}deepPartial(){return ce(this)}partial(e){let t={};return x.objectKeys(this.shape).forEach(n=>{let s=this.shape[n];e&&!e[n]?t[n]=s:t[n]=s.optional()}),new r({...this._def,shape:()=>t})}required(e){let t={};return x.objectKeys(this.shape).forEach(n=>{if(e&&!e[n])t[n]=this.shape[n];else{let a=this.shape[n];for(;a instanceof P;)a=a._def.innerType;t[n]=a}}),new r({...this._def,shape:()=>t})}keyof(){return it(x.objectKeys(this.shape))}};E.create=(r,e)=>new E({shape:()=>r,unknownKeys:"strip",catchall:Z.create(),typeName:m.ZodObject,...g(e)});E.strictCreate=(r,e)=>new E({shape:()=>r,unknownKeys:"strict",catchall:Z.create(),typeName:m.ZodObject,...g(e)});E.lazycreate=(r,e)=>new E({shape:r,unknownKeys:"strip",catchall:Z.create(),typeName:m.ZodObject,...g(e)});var ee=class extends v{_parse(e){let{ctx:t}=this._processInputParams(e),n=this._def.options;function s(a){for(let o of a)if(o.result.status==="valid")return o.result;for(let o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;let i=a.map(o=>new A(o.ctx.common.issues));return f(t,{code:c.invalid_union,unionErrors:i}),y}if(t.common.async)return Promise.all(n.map(async a=>{let i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a,i=[];for(let p of n){let u={...t,common:{...t.common,issues:[]},parent:null},_=p._parseSync({data:t.data,path:t.path,parent:u});if(_.status==="valid")return _;_.status==="dirty"&&!a&&(a={result:_,ctx:u}),u.common.issues.length&&i.push(u.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;let o=i.map(p=>new A(p));return f(t,{code:c.invalid_union,unionErrors:o}),y}}get options(){return this._def.options}};ee.create=(r,e)=>new ee({options:r,typeName:m.ZodUnion,...g(e)});var Se=r=>r instanceof re?Se(r.schema):r instanceof O?Se(r.innerType()):r instanceof ne?[r.value]:r instanceof se?r.options:r instanceof ae?Object.keys(r.enum):r instanceof ie?Se(r._def.innerType):r instanceof X?[void 0]:r instanceof K?[null]:null,Ae=class r extends v{_parse(e){let{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.object)return f(t,{code:c.invalid_type,expected:l.object,received:t.parsedType}),y;let n=this.discriminator,s=t.data[n],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(f(t,{code:c.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[n]}),y)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,n){let s=new Map;for(let a of t){let i=Se(a.shape[e]);if(!i)throw new Error(`A discriminator value for key \\`${e}\\` could not be extracted from all schema options`);for(let o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new r({typeName:m.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...g(n)})}};function $e(r,e){let t=$(r),n=$(e);if(r===e)return{valid:!0,data:r};if(t===l.object&&n===l.object){let s=x.objectKeys(e),a=x.objectKeys(r).filter(o=>s.indexOf(o)!==-1),i={...r,...e};for(let o of a){let p=$e(r[o],e[o]);if(!p.valid)return{valid:!1};i[o]=p.data}return{valid:!0,data:i}}else if(t===l.array&&n===l.array){if(r.length!==e.length)return{valid:!1};let s=[];for(let a=0;a<r.length;a++){let i=r[a],o=e[a],p=$e(i,o);if(!p.valid)return{valid:!1};s.push(p.data)}return{valid:!0,data:s}}else return t===l.date&&n===l.date&&+r==+e?{valid:!0,data:r}:{valid:!1}}var te=class extends v{_parse(e){let{status:t,ctx:n}=this._processInputParams(e),s=(a,i)=>{if(We(a)||We(i))return y;let o=$e(a.value,i.value);return o.valid?((Le(a)||Le(i))&&t.dirty(),{status:t.value,value:o.data}):(f(n,{code:c.invalid_intersection_types}),y)};return n.common.async?Promise.all([this._def.left._parseAsync({data:n.data,path:n.path,parent:n}),this._def.right._parseAsync({data:n.data,path:n.path,parent:n})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:n.data,path:n.path,parent:n}),this._def.right._parseSync({data:n.data,path:n.path,parent:n}))}};te.create=(r,e,t)=>new te({left:r,right:e,typeName:m.ZodIntersection,...g(t)});var B=class r extends v{_parse(e){let{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==l.array)return f(n,{code:c.invalid_type,expected:l.array,received:n.parsedType}),y;if(n.data.length<this._def.items.length)return f(n,{code:c.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),y;!this._def.rest&&n.data.length>this._def.items.length&&(f(n,{code:c.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());let a=[...n.data].map((i,o)=>{let p=this._def.items[o]||this._def.rest;return p?p._parse(new j(n,i,n.path,o)):null}).filter(i=>!!i);return n.common.async?Promise.all(a).then(i=>S.mergeArray(t,i)):S.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new r({...this._def,rest:e})}};B.create=(r,e)=>{if(!Array.isArray(r))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new B({items:r,typeName:m.ZodTuple,rest:null,...g(e)})};var Oe=class r extends v{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){let{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==l.object)return f(n,{code:c.invalid_type,expected:l.object,received:n.parsedType}),y;let s=[],a=this._def.keyType,i=this._def.valueType;for(let o in n.data)s.push({key:a._parse(new j(n,o,n.path,o)),value:i._parse(new j(n,n.data[o],n.path,o))});return n.common.async?S.mergeObjectAsync(t,s):S.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,n){return t instanceof v?new r({keyType:e,valueType:t,typeName:m.ZodRecord,...g(n)}):new r({keyType:F.create(),valueType:e,typeName:m.ZodRecord,...g(t)})}},le=class extends v{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){let{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==l.map)return f(n,{code:c.invalid_type,expected:l.map,received:n.parsedType}),y;let s=this._def.keyType,a=this._def.valueType,i=[...n.data.entries()].map(([o,p],u)=>({key:s._parse(new j(n,o,n.path,[u,"key"])),value:a._parse(new j(n,p,n.path,[u,"value"]))}));if(n.common.async){let o=new Map;return Promise.resolve().then(async()=>{for(let p of i){let u=await p.key,_=await p.value;if(u.status==="aborted"||_.status==="aborted")return y;(u.status==="dirty"||_.status==="dirty")&&t.dirty(),o.set(u.value,_.value)}return{status:t.value,value:o}})}else{let o=new Map;for(let p of i){let u=p.key,_=p.value;if(u.status==="aborted"||_.status==="aborted")return y;(u.status==="dirty"||_.status==="dirty")&&t.dirty(),o.set(u.value,_.value)}return{status:t.value,value:o}}}};le.create=(r,e,t)=>new le({valueType:e,keyType:r,typeName:m.ZodMap,...g(t)});var fe=class r extends v{_parse(e){let{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==l.set)return f(n,{code:c.invalid_type,expected:l.set,received:n.parsedType}),y;let s=this._def;s.minSize!==null&&n.data.size<s.minSize.value&&(f(n,{code:c.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&n.data.size>s.maxSize.value&&(f(n,{code:c.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());let a=this._def.valueType;function i(p){let u=new Set;for(let _ of p){if(_.status==="aborted")return y;_.status==="dirty"&&t.dirty(),u.add(_.value)}return{status:t.value,value:u}}let o=[...n.data.values()].map((p,u)=>a._parse(new j(n,p,n.path,u)));return n.common.async?Promise.all(o).then(p=>i(p)):i(o)}min(e,t){return new r({...this._def,minSize:{value:e,message:h.toString(t)}})}max(e,t){return new r({...this._def,maxSize:{value:e,message:h.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}};fe.create=(r,e)=>new fe({valueType:r,minSize:null,maxSize:null,typeName:m.ZodSet,...g(e)});var Me=class r extends v{constructor(){super(...arguments),this.validate=this.implement}_parse(e){let{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.function)return f(t,{code:c.invalid_type,expected:l.function,received:t.parsedType}),y;function n(o,p){return Re({data:o,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,Te(),xe].filter(u=>!!u),issueData:{code:c.invalid_arguments,argumentsError:p}})}function s(o,p){return Re({data:o,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,Te(),xe].filter(u=>!!u),issueData:{code:c.invalid_return_type,returnTypeError:p}})}let a={errorMap:t.common.contextualErrorMap},i=t.data;if(this._def.returns instanceof J){let o=this;return R(async function(...p){let u=new A([]),_=await o._def.args.parseAsync(p,a).catch(Ue=>{throw u.addIssue(n(p,Ue)),u}),I=await Reflect.apply(i,this,_);return await o._def.returns._def.type.parseAsync(I,a).catch(Ue=>{throw u.addIssue(s(I,Ue)),u})})}else{let o=this;return R(function(...p){let u=o._def.args.safeParse(p,a);if(!u.success)throw new A([n(p,u.error)]);let _=Reflect.apply(i,this,u.data),I=o._def.returns.safeParse(_,a);if(!I.success)throw new A([s(_,I.error)]);return I.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new r({...this._def,args:B.create(e).rest(U.create())})}returns(e){return new r({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,n){return new r({args:e||B.create([]).rest(U.create()),returns:t||U.create(),typeName:m.ZodFunction,...g(n)})}},re=class extends v{get schema(){return this._def.getter()}_parse(e){let{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}};re.create=(r,e)=>new re({getter:r,typeName:m.ZodLazy,...g(e)});var ne=class extends v{_parse(e){if(e.data!==this._def.value){let t=this._getOrReturnCtx(e);return f(t,{received:t.data,code:c.invalid_literal,expected:this._def.value}),y}return{status:"valid",value:e.data}}get value(){return this._def.value}};ne.create=(r,e)=>new ne({value:r,typeName:m.ZodLiteral,...g(e)});function it(r,e){return new se({values:r,typeName:m.ZodEnum,...g(e)})}var se=class r extends v{_parse(e){if(typeof e.data!="string"){let t=this._getOrReturnCtx(e),n=this._def.values;return f(t,{expected:x.joinValues(n),received:t.parsedType,code:c.invalid_type}),y}if(this._def.values.indexOf(e.data)===-1){let t=this._getOrReturnCtx(e),n=this._def.values;return f(t,{received:t.data,code:c.invalid_enum_value,options:n}),y}return R(e.data)}get options(){return this._def.values}get enum(){let e={};for(let t of this._def.values)e[t]=t;return e}get Values(){let e={};for(let t of this._def.values)e[t]=t;return e}get Enum(){let e={};for(let t of this._def.values)e[t]=t;return e}extract(e){return r.create(e)}exclude(e){return r.create(this.options.filter(t=>!e.includes(t)))}};se.create=it;var ae=class extends v{_parse(e){let t=x.getValidEnumValues(this._def.values),n=this._getOrReturnCtx(e);if(n.parsedType!==l.string&&n.parsedType!==l.number){let s=x.objectValues(t);return f(n,{expected:x.joinValues(s),received:n.parsedType,code:c.invalid_type}),y}if(t.indexOf(e.data)===-1){let s=x.objectValues(t);return f(n,{received:n.data,code:c.invalid_enum_value,options:s}),y}return R(e.data)}get enum(){return this._def.values}};ae.create=(r,e)=>new ae({values:r,typeName:m.ZodNativeEnum,...g(e)});var J=class extends v{unwrap(){return this._def.type}_parse(e){let{ctx:t}=this._processInputParams(e);if(t.parsedType!==l.promise&&t.common.async===!1)return f(t,{code:c.invalid_type,expected:l.promise,received:t.parsedType}),y;let n=t.parsedType===l.promise?t.data:Promise.resolve(t.data);return R(n.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}};J.create=(r,e)=>new J({type:r,typeName:m.ZodPromise,...g(e)});var O=class extends v{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===m.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){let{status:t,ctx:n}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{f(n,i),i.fatal?t.abort():t.dirty()},get path(){return n.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){let i=s.transform(n.data,a);return n.common.issues.length?{status:"dirty",value:n.data}:n.common.async?Promise.resolve(i).then(o=>this._def.schema._parseAsync({data:o,path:n.path,parent:n})):this._def.schema._parseSync({data:i,path:n.path,parent:n})}if(s.type==="refinement"){let i=o=>{let p=s.refinement(o,a);if(n.common.async)return Promise.resolve(p);if(p instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(n.common.async===!1){let o=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});return o.status==="aborted"?y:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then(o=>o.status==="aborted"?y:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(n.common.async===!1){let i=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});if(!be(i))return i;let o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then(i=>be(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):i);x.assertNever(s)}};O.create=(r,e,t)=>new O({schema:r,typeName:m.ZodEffects,effect:e,...g(t)});O.createWithPreprocess=(r,e,t)=>new O({schema:e,effect:{type:"preprocess",transform:r},typeName:m.ZodEffects,...g(t)});var P=class extends v{_parse(e){return this._getType(e)===l.undefined?R(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}};P.create=(r,e)=>new P({innerType:r,typeName:m.ZodOptional,...g(e)});var V=class extends v{_parse(e){return this._getType(e)===l.null?R(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}};V.create=(r,e)=>new V({innerType:r,typeName:m.ZodNullable,...g(e)});var ie=class extends v{_parse(e){let{ctx:t}=this._processInputParams(e),n=t.data;return t.parsedType===l.undefined&&(n=this._def.defaultValue()),this._def.innerType._parse({data:n,path:t.path,parent:t})}removeDefault(){return this._def.innerType}};ie.create=(r,e)=>new ie({innerType:r,typeName:m.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...g(e)});var pe=class extends v{_parse(e){let{ctx:t}=this._processInputParams(e),n={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:n.data,path:n.path,parent:{...n}});return Ee(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new A(n.common.issues)},input:n.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new A(n.common.issues)},input:n.data})}}removeCatch(){return this._def.innerType}};pe.create=(r,e)=>new pe({innerType:r,typeName:m.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...g(e)});var he=class extends v{_parse(e){if(this._getType(e)!==l.nan){let n=this._getOrReturnCtx(e);return f(n,{code:c.invalid_type,expected:l.nan,received:n.parsedType}),y}return{status:"valid",value:e.data}}};he.create=r=>new he({typeName:m.ZodNaN,...g(r)});var It=Symbol("zod_brand"),ze=class extends v{_parse(e){let{ctx:t}=this._processInputParams(e),n=t.data;return this._def.type._parse({data:n,path:t.path,parent:t})}unwrap(){return this._def.type}},ke=class r extends v{_parse(e){let{status:t,ctx:n}=this._processInputParams(e);if(n.common.async)return(async()=>{let a=await this._def.in._parseAsync({data:n.data,path:n.path,parent:n});return a.status==="aborted"?y:a.status==="dirty"?(t.dirty(),at(a.value)):this._def.out._parseAsync({data:a.value,path:n.path,parent:n})})();{let s=this._def.in._parseSync({data:n.data,path:n.path,parent:n});return s.status==="aborted"?y:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:n.path,parent:n})}}static create(e,t){return new r({in:e,out:t,typeName:m.ZodPipeline})}},me=class extends v{_parse(e){let t=this._def.innerType._parse(e);return be(t)&&(t.value=Object.freeze(t.value)),t}};me.create=(r,e)=>new me({innerType:r,typeName:m.ZodReadonly,...g(e)});var ot=(r,e={},t)=>r?q.create().superRefine((n,s)=>{var a,i;if(!r(n)){let o=typeof e=="function"?e(n):typeof e=="string"?{message:e}:e,p=(i=(a=o.fatal)!==null&&a!==void 0?a:t)!==null&&i!==void 0?i:!0,u=typeof o=="string"?{message:o}:o;s.addIssue({code:"custom",...u,fatal:p})}}):q.create(),jt={object:E.lazycreate},m;(function(r){r.ZodString="ZodString",r.ZodNumber="ZodNumber",r.ZodNaN="ZodNaN",r.ZodBigInt="ZodBigInt",r.ZodBoolean="ZodBoolean",r.ZodDate="ZodDate",r.ZodSymbol="ZodSymbol",r.ZodUndefined="ZodUndefined",r.ZodNull="ZodNull",r.ZodAny="ZodAny",r.ZodUnknown="ZodUnknown",r.ZodNever="ZodNever",r.ZodVoid="ZodVoid",r.ZodArray="ZodArray",r.ZodObject="ZodObject",r.ZodUnion="ZodUnion",r.ZodDiscriminatedUnion="ZodDiscriminatedUnion",r.ZodIntersection="ZodIntersection",r.ZodTuple="ZodTuple",r.ZodRecord="ZodRecord",r.ZodMap="ZodMap",r.ZodSet="ZodSet",r.ZodFunction="ZodFunction",r.ZodLazy="ZodLazy",r.ZodLiteral="ZodLiteral",r.ZodEnum="ZodEnum",r.ZodEffects="ZodEffects",r.ZodNativeEnum="ZodNativeEnum",r.ZodOptional="ZodOptional",r.ZodNullable="ZodNullable",r.ZodDefault="ZodDefault",r.ZodCatch="ZodCatch",r.ZodPromise="ZodPromise",r.ZodBranded="ZodBranded",r.ZodPipeline="ZodPipeline",r.ZodReadonly="ZodReadonly"})(m||(m={}));var Ct=(r,e={message:`Input not instance of ${r.name}`})=>ot(t=>t instanceof r,e),w=F.create,M=H.create,Nt=he.create,Pt=Y.create,Ie=G.create,Zt=Q.create,Bt=de.create,Ut=X.create,Fe=K.create,Dt=q.create,Vt=U.create,Wt=Z.create,Lt=ue.create,W=D.create,b=E.create,$t=E.strictCreate,L=ee.create,oe=Ae.create,Ft=te.create,ye=B.create,qt=Oe.create,Jt=le.create,Ht=fe.create,Yt=Me.create,Gt=re.create,k=ne.create,ge=se.create,Qt=ae.create,Xt=J.create,nt=O.create,T=P.create,Kt=V.create,er=O.createWithPreprocess,tr=ke.create,rr=()=>w().optional(),nr=()=>M().optional(),sr=()=>Ie().optional(),ar={string:r=>F.create({...r,coerce:!0}),number:r=>H.create({...r,coerce:!0}),boolean:r=>G.create({...r,coerce:!0}),bigint:r=>Y.create({...r,coerce:!0}),date:r=>Q.create({...r,coerce:!0})},ir=y,d=Object.freeze({__proto__:null,defaultErrorMap:xe,setErrorMap:_t,getErrorMap:Te,makeIssue:Re,EMPTY_PATH:xt,addIssueToContext:f,ParseStatus:S,INVALID:y,DIRTY:at,OK:R,isAborted:We,isDirty:Le,isValid:be,isAsync:Ee,get util(){return x},get objectUtil(){return Ve},ZodParsedType:l,getParsedType:$,ZodType:v,ZodString:F,ZodNumber:H,ZodBigInt:Y,ZodBoolean:G,ZodDate:Q,ZodSymbol:de,ZodUndefined:X,ZodNull:K,ZodAny:q,ZodUnknown:U,ZodNever:Z,ZodVoid:ue,ZodArray:D,ZodObject:E,ZodUnion:ee,ZodDiscriminatedUnion:Ae,ZodIntersection:te,ZodTuple:B,ZodRecord:Oe,ZodMap:le,ZodSet:fe,ZodFunction:Me,ZodLazy:re,ZodLiteral:ne,ZodEnum:se,ZodNativeEnum:ae,ZodPromise:J,ZodEffects:O,ZodTransformer:O,ZodOptional:P,ZodNullable:V,ZodDefault:ie,ZodCatch:pe,ZodNaN:he,BRAND:It,ZodBranded:ze,ZodPipeline:ke,ZodReadonly:me,custom:ot,Schema:v,ZodSchema:v,late:jt,get ZodFirstPartyTypeKind(){return m},coerce:ar,any:Dt,array:W,bigint:Pt,boolean:Ie,date:Zt,discriminatedUnion:oe,effect:nt,enum:ge,function:Yt,instanceof:Ct,intersection:Ft,lazy:Gt,literal:k,map:Jt,nan:Nt,nativeEnum:Qt,never:Wt,null:Fe,nullable:Kt,number:M,object:b,oboolean:sr,onumber:nr,optional:T,ostring:rr,pipeline:tr,preprocess:er,promise:Xt,record:qt,set:Ht,strictObject:$t,string:w,symbol:Bt,transformer:nt,tuple:ye,undefined:Ut,union:L,unknown:Vt,void:Lt,NEVER:ir,ZodIssueCode:c,quotelessJson:vt,ZodError:A});var C=d.custom(r=>r instanceof Uint8Array),or=d.union([d.string(),d.number(),d.boolean(),d.null()]),ct=d.lazy(()=>d.union([or,d.array(ct),d.record(ct)])),vr=d.union([d.tuple([d.literal(0),d.number(),d.string(),d.unknown()]),d.tuple([d.literal(1),d.number(),d.nullable(d.string()),d.unknown()]),d.tuple([d.literal(2),d.string(),d.unknown()])]);var cr=d.enum(["sfu","gateway"]),dr=d.enum(["connect","roomclose","roomupdate","roombanclient","roomsendmessage"]),br=d.object({uid:d.string(),cid:d.optional(d.string()),rid:qe(d.string()),nsp:d.optional(d.string()),adr:d.optional(d.string()),aud:d.optional(qe(cr)),sub:d.optional(qe(dr)),exp:d.optional(d.number()),nbf:d.optional(d.number()),ups:d.optional(d.string()),internal:d.optional(d.object({server:d.optional(d.string())}))});function qe(r){return d.union([r,d.array(r)])}var N=M(),ur=b({kind:T(k("audio")),uid:T(w()),customType:T(w())}),lr=b({kind:T(k("video")),codec:T(w()),uid:T(w()),customType:T(w())}),Je=L([ur,lr]),He=b({id:N,properties:Je,paused:Ie()});var z=M(),Ye=L([ye([M(),M(),M()]),ye([M(),M()])]),Ge=b({id:z,user_id:w(),user_data:C,medias:W(He)}),dt=oe("kind",[b({kind:k("UserDataChanged"),peer_id:z,user_data:C}),b({kind:k("MediaStarted"),peer_id:z,media:He}),b({kind:k("MediaStopped"),peer_id:z,media_id:N})]);var Qe=w(),fr=b({id:Qe,customer:w(),user_data:C,peers:W(Ge)}),pr=oe("kind",[b({kind:k("Joined"),room:fr,media_ids:W(N),own_peer_id:z}),b({kind:k("Left"),reason:ge(["RoomClosing","ServerClosing","PeerKicked"])}),b({kind:k("UserDataChanged"),user_data:T(C)}),b({kind:k("PeerJoined"),peer:Ge}),b({kind:k("PeerLeft"),peer_id:z})]),ut=b({updates:W(pr)}),hr=ge(["Joining","Joined","Closed"]),lt=b({status:hr,message:T(w())});var ft=d.object({sender_peer_id:z,message:C});var je=oe("kind",[b({kind:k("Sdp"),type:ge(["Answer","Offer"]),sdp:w(),media_map:W(ye([N,w()]))}),b({kind:k("Trickle"),candidate:w(),spd_mid:T(w()),spd_mline_index:T(M()),username_fragment:T(L([w(),Fe()]))}),b({kind:k("TrickleFinished")})]);var Lr={JoinRoom:{request:d.object({token:d.string(),room_id:Qe,user_data:C,position:Ye}),response:d.object({peer_id:z,stream_id:d.optional(d.number()),token:d.optional(d.string())})},WebRtcUpdate:{request:je,response:d.null()},RequestReconnectToken:{request:d.object({peer_id:d.optional(z)}),response:d.string()},Ping:{request:d.object({}),response:d.null()}},$r={UpdatePeer:{request:d.object({user_data:C}),response:d.null()},StartMedia:{request:d.object({media_id:N,properties:Je}),response:d.null()},StopMedia:{request:d.object({media_id:N}),response:d.null()},PauseMedia:{request:d.object({media_id:N}),response:d.null()},ResumeMedia:{request:d.object({media_id:N}),response:d.null()},SetPeerPosition:{request:d.object({position:Ye}),response:d.null()},SendMessage:{request:d.object({target_peer_ids:d.optional(d.array(z)),message:C}),response:d.null()}};var Gr=b({name:k("WebRtcUpdate"),properties:je});var Qr=L([b({name:k("RoomStatusChanged"),properties:lt}),b({name:k("RoomUpdated"),properties:ut}),b({name:k("PeerUpdated"),properties:dt}),b({name:k("MessageReceived"),properties:ft})]);function mt(){return typeof SharedArrayBuffer<"u"}function mr(r){return r.sampleRate*.02*(r.stereo?2:1)}function Ce(r,e){let t=mr(r),n=t*e,s=n+t;return r.samples.subarray(n,s)}function yt(r,e){return{id:r.headers[e]}}function gt(r,e,t){r.headers[e]=t.id}function ve(r,e,t){return r.postMessage(e,t)}var Ne=class{constructor(e,t,n){this.samples=e;this.port=t;this.length=n;this.id=0,this.offset=0,this.entry=Ce(this.samples,0)}fill(e,t){let n=Math.min(t.length-e,this.length-this.offset);return this.entry.set(t.subarray(e,e+n),this.offset),this.offset+=n,e+n}flush(){ve(this.port,["captureTick",void 0]),this.id+=1;let e=this.id%this.samples.length;this.entry=Ce(this.samples,e),gt(this.samples,e,{id:this.id}),this.offset=0}},Pe=class{constructor(e,t,n){this.port=e;this.samples=t;this.length=n;this.id=-1,this.offset=0,this.entry=void 0,this.next()}fill(e,t,n){let s=Math.min(128-e,this.length-this.offset);return this.entry!==void 0&&(t.set(this.entry.subarray(this.offset,this.offset+s),e),n.set(this.entry.subarray(this.offset+this.length,this.offset+this.length+s),e)),this.offset+=s,e+s}next(){this.id+=1;let e=this.id%this.samples.length,{id:t}=yt(this.samples,e);this.entry=this.id===t?Ce(this.samples,e):void 0,this.offset=0,ve(this.port,["playbackTick",void 0])}};var Ze=class{constructor(e,t){this.port=e;this.length=t;this.offset=0,this.buffer=new Float32Array(t)}fill(e,t){let n=Math.min(t.length-e,this.length-this.offset);return this.buffer.set(t.subarray(e,e+n),this.offset),this.offset+=n,e+n}flush(){ve(this.port,["captureTick",{buffer:this.buffer}],[this.buffer.buffer]),this.offset=0,this.buffer=new Float32Array(this.length)}},Be=class{constructor(e,t){this.port=e;this.length=t;this.cache=[];this.id=-1,this.offset=0,this.buffer=void 0,this.next()}fill(e,t,n){let s=Math.min(128-e,this.length-this.offset);return this.buffer!==void 0&&(t.set(this.buffer.subarray(this.offset,this.offset+s),e),n.set(this.buffer.subarray(this.offset+this.length,this.offset+this.length+s),e)),this.offset+=s,e+s}add(e,t){this.cache.push({id:e,buffer:t})}next(){for(this.id+=1;this.cache[0]?.id<this.id;)this.cache.shift();this.cache[0]?.id===this.id?(this.buffer=this.cache[0].buffer,this.cache.shift()):this.buffer=void 0,this.offset=0,ve(this.port,["playbackTick",void 0])}};var Xe=class extends AudioWorkletProcessor{constructor(){super();this.alive=!0;this.port.onmessage=this.onMessage.bind(this)}async onMessage(t){let[n,s]=t.data;switch(n){case"init":this.state=new Ne(s.sampleBuffer,s.workerPort,sampleRate*.02);break;case"close":this.alive=!1;break}}process(t,n,s){if(this.state===void 0||t.length<1||t[0].length<1)return this.alive;let a=this.state.fill(0,t[0][0]);return this.state.offset===this.state.length&&(this.state.flush(),this.state.fill(a,t[0][0])),this.alive}},Ke=class extends AudioWorkletProcessor{constructor(){super();this.alive=!0;this.port.onmessage=this.onMessage.bind(this)}async onMessage(t){console.log(`worklet ${t.data[0]}`);let[n,s]=t.data;switch(n){case"close":this.alive=!1;break;case"init":this.state=new Pe(s.workerPort,s.sampleBuffer,sampleRate*.02);break}n==="close"&&(this.alive=!1)}process(t,n,s){if(this.state===void 0||n.length<1||n[0].length<2)return this.alive;let a=this.state.fill(0,n[0][0],n[0][1]);return a<128&&(this.state.next(),this.state.fill(a,n[0][0],n[0][1])),this.alive}},et=class extends AudioWorkletProcessor{constructor(){super();this.alive=!0;this.port.onmessage=this.onMessage.bind(this)}async onMessage(t){let[n,s]=t.data;switch(n){case"init":this.state=new Ze(s.workerPort,sampleRate*.02);break;case"close":this.alive=!1;break}}process(t,n,s){if(this.state===void 0||t.length<1||t[0].length<1)return this.alive;let a=this.state.fill(0,t[0][0]);return this.state.offset===this.state.length&&(this.state.flush(),this.state.fill(a,t[0][0])),this.alive}},tt=class extends AudioWorkletProcessor{constructor(){super();this.alive=!0;this.port.onmessage=this.onMessage.bind(this)}async onMessage(t){let[n,s]=t.data;switch(n){case"close":this.alive=!1;break;case"init":this.state=new Be(s.workerPort,sampleRate*.02),s.workerPort.onmessage=this.onMessage.bind(this);break;case"samples":this.state?.add(s.id,s.buffer);break}n==="close"&&(this.alive=!1)}process(t,n,s){if(this.state===void 0||n.length<1||n[0].length<2)return this.alive;let a=this.state.fill(0,n[0][0],n[0][1]);return a<128&&(this.state.next(),this.state.fill(a,n[0][0],n[0][1])),this.alive}};mt()?(registerProcessor("OdinCaptureProcessor",Xe),registerProcessor("OdinPlaybackProcessor",Ke)):(registerProcessor("OdinCaptureProcessor",et),registerProcessor("OdinPlaybackProcessor",tt));})();\n';
  var y;
  (function(g15) {
    g15.assertEqual = (C) => C;
    function A(C) {
    }
    g15.assertIs = A;
    function I(C) {
      throw new Error();
    }
    g15.assertNever = I, g15.arrayToEnum = (C) => {
      let Q = {};
      for (let E of C)
        Q[E] = E;
      return Q;
    }, g15.getValidEnumValues = (C) => {
      let Q = g15.objectKeys(C).filter((i) => typeof C[C[i]] != "number"), E = {};
      for (let i of Q)
        E[i] = C[i];
      return g15.objectValues(E);
    }, g15.objectValues = (C) => g15.objectKeys(C).map(function(Q) {
      return C[Q];
    }), g15.objectKeys = typeof Object.keys == "function" ? (C) => Object.keys(C) : (C) => {
      let Q = [];
      for (let E in C)
        Object.prototype.hasOwnProperty.call(C, E) && Q.push(E);
      return Q;
    }, g15.find = (C, Q) => {
      for (let E of C)
        if (Q(E))
          return E;
    }, g15.isInteger = typeof Number.isInteger == "function" ? (C) => Number.isInteger(C) : (C) => typeof C == "number" && isFinite(C) && Math.floor(C) === C;
    function B(C, Q = " | ") {
      return C.map((E) => typeof E == "string" ? `'${E}'` : E).join(Q);
    }
    g15.joinValues = B, g15.jsonStringifyReplacer = (C, Q) => typeof Q == "bigint" ? Q.toString() : Q;
  })(y || (y = {}));
  var xA;
  (function(g15) {
    g15.mergeShapes = (A, I) => ({ ...A, ...I });
  })(xA || (xA = {}));
  var s = y.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
  var T = (g15) => {
    switch (typeof g15) {
      case "undefined":
        return s.undefined;
      case "string":
        return s.string;
      case "number":
        return isNaN(g15) ? s.nan : s.number;
      case "boolean":
        return s.boolean;
      case "function":
        return s.function;
      case "bigint":
        return s.bigint;
      case "symbol":
        return s.symbol;
      case "object":
        return Array.isArray(g15) ? s.array : g15 === null ? s.null : g15.then && typeof g15.then == "function" && g15.catch && typeof g15.catch == "function" ? s.promise : typeof Map < "u" && g15 instanceof Map ? s.map : typeof Set < "u" && g15 instanceof Set ? s.set : typeof Date < "u" && g15 instanceof Date ? s.date : s.object;
      default:
        return s.unknown;
    }
  };
  var o = y.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
  var LI = (g15) => JSON.stringify(g15, null, 2).replace(/"([^"]+)":/g, "$1:");
  var l = class extends Error {
    constructor(A) {
      super(), this.issues = [], this.addIssue = (B) => {
        this.issues = [...this.issues, B];
      }, this.addIssues = (B = []) => {
        this.issues = [...this.issues, ...B];
      };
      let I = new.target.prototype;
      Object.setPrototypeOf ? Object.setPrototypeOf(this, I) : this.__proto__ = I, this.name = "ZodError", this.issues = A;
    }
    get errors() {
      return this.issues;
    }
    format(A) {
      let I = A || function(Q) {
        return Q.message;
      }, B = { _errors: [] }, C = (Q) => {
        for (let E of Q.issues)
          if (E.code === "invalid_union")
            E.unionErrors.map(C);
          else if (E.code === "invalid_return_type")
            C(E.returnTypeError);
          else if (E.code === "invalid_arguments")
            C(E.argumentsError);
          else if (E.path.length === 0)
            B._errors.push(I(E));
          else {
            let i = B, t = 0;
            for (; t < E.path.length; ) {
              let a = E.path[t];
              t === E.path.length - 1 ? (i[a] = i[a] || { _errors: [] }, i[a]._errors.push(I(E))) : i[a] = i[a] || { _errors: [] }, i = i[a], t++;
            }
          }
      };
      return C(this), B;
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, y.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(A = (I) => I.message) {
      let I = {}, B = [];
      for (let C of this.issues)
        C.path.length > 0 ? (I[C.path[0]] = I[C.path[0]] || [], I[C.path[0]].push(A(C))) : B.push(A(C));
      return { formErrors: B, fieldErrors: I };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  l.create = (g15) => new l(g15);
  var dA = (g15, A) => {
    let I;
    switch (g15.code) {
      case o.invalid_type:
        g15.received === s.undefined ? I = "Required" : I = `Expected ${g15.expected}, received ${g15.received}`;
        break;
      case o.invalid_literal:
        I = `Invalid literal value, expected ${JSON.stringify(g15.expected, y.jsonStringifyReplacer)}`;
        break;
      case o.unrecognized_keys:
        I = `Unrecognized key(s) in object: ${y.joinValues(g15.keys, ", ")}`;
        break;
      case o.invalid_union:
        I = "Invalid input";
        break;
      case o.invalid_union_discriminator:
        I = `Invalid discriminator value. Expected ${y.joinValues(g15.options)}`;
        break;
      case o.invalid_enum_value:
        I = `Invalid enum value. Expected ${y.joinValues(g15.options)}, received '${g15.received}'`;
        break;
      case o.invalid_arguments:
        I = "Invalid function arguments";
        break;
      case o.invalid_return_type:
        I = "Invalid function return type";
        break;
      case o.invalid_date:
        I = "Invalid date";
        break;
      case o.invalid_string:
        typeof g15.validation == "object" ? "includes" in g15.validation ? (I = `Invalid input: must include "${g15.validation.includes}"`, typeof g15.validation.position == "number" && (I = `${I} at one or more positions greater than or equal to ${g15.validation.position}`)) : "startsWith" in g15.validation ? I = `Invalid input: must start with "${g15.validation.startsWith}"` : "endsWith" in g15.validation ? I = `Invalid input: must end with "${g15.validation.endsWith}"` : y.assertNever(g15.validation) : g15.validation !== "regex" ? I = `Invalid ${g15.validation}` : I = "Invalid";
        break;
      case o.too_small:
        g15.type === "array" ? I = `Array must contain ${g15.exact ? "exactly" : g15.inclusive ? "at least" : "more than"} ${g15.minimum} element(s)` : g15.type === "string" ? I = `String must contain ${g15.exact ? "exactly" : g15.inclusive ? "at least" : "over"} ${g15.minimum} character(s)` : g15.type === "number" ? I = `Number must be ${g15.exact ? "exactly equal to " : g15.inclusive ? "greater than or equal to " : "greater than "}${g15.minimum}` : g15.type === "date" ? I = `Date must be ${g15.exact ? "exactly equal to " : g15.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(g15.minimum))}` : I = "Invalid input";
        break;
      case o.too_big:
        g15.type === "array" ? I = `Array must contain ${g15.exact ? "exactly" : g15.inclusive ? "at most" : "less than"} ${g15.maximum} element(s)` : g15.type === "string" ? I = `String must contain ${g15.exact ? "exactly" : g15.inclusive ? "at most" : "under"} ${g15.maximum} character(s)` : g15.type === "number" ? I = `Number must be ${g15.exact ? "exactly" : g15.inclusive ? "less than or equal to" : "less than"} ${g15.maximum}` : g15.type === "bigint" ? I = `BigInt must be ${g15.exact ? "exactly" : g15.inclusive ? "less than or equal to" : "less than"} ${g15.maximum}` : g15.type === "date" ? I = `Date must be ${g15.exact ? "exactly" : g15.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(g15.maximum))}` : I = "Invalid input";
        break;
      case o.custom:
        I = "Invalid input";
        break;
      case o.invalid_intersection_types:
        I = "Intersection results could not be merged";
        break;
      case o.not_multiple_of:
        I = `Number must be a multiple of ${g15.multipleOf}`;
        break;
      case o.not_finite:
        I = "Number must be finite";
        break;
      default:
        I = A.defaultError, y.assertNever(g15);
    }
    return { message: I };
  };
  var oI = dA;
  function pI(g15) {
    oI = g15;
  }
  function UA() {
    return oI;
  }
  var NA = (g15) => {
    let { data: A, path: I, errorMaps: B, issueData: C } = g15, Q = [...I, ...C.path || []], E = { ...C, path: Q }, i = "", t = B.filter((a) => !!a).slice().reverse();
    for (let a of t)
      i = a(E, { data: A, defaultError: i }).message;
    return { ...C, path: Q, message: C.message || i };
  };
  var uI = [];
  function D(g15, A) {
    let I = NA({ issueData: A, data: g15.data, path: g15.path, errorMaps: [g15.common.contextualErrorMap, g15.schemaErrorMap, UA(), dA].filter((B) => !!B) });
    g15.common.issues.push(I);
  }
  var J = class g {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      this.value === "valid" && (this.value = "dirty");
    }
    abort() {
      this.value !== "aborted" && (this.value = "aborted");
    }
    static mergeArray(A, I) {
      let B = [];
      for (let C of I) {
        if (C.status === "aborted")
          return G;
        C.status === "dirty" && A.dirty(), B.push(C.value);
      }
      return { status: A.value, value: B };
    }
    static async mergeObjectAsync(A, I) {
      let B = [];
      for (let C of I)
        B.push({ key: await C.key, value: await C.value });
      return g.mergeObjectSync(A, B);
    }
    static mergeObjectSync(A, I) {
      let B = {};
      for (let C of I) {
        let { key: Q, value: E } = C;
        if (Q.status === "aborted" || E.status === "aborted")
          return G;
        Q.status === "dirty" && A.dirty(), E.status === "dirty" && A.dirty(), Q.value !== "__proto__" && (typeof E.value < "u" || C.alwaysSet) && (B[Q.value] = E.value);
      }
      return { status: A.value, value: B };
    }
  };
  var G = Object.freeze({ status: "aborted" });
  var eI = (g15) => ({ status: "dirty", value: g15 });
  var N = (g15) => ({ status: "valid", value: g15 });
  var PA = (g15) => g15.status === "aborted";
  var vA = (g15) => g15.status === "dirty";
  var FA = (g15) => g15.status === "valid";
  var HA = (g15) => typeof Promise < "u" && g15 instanceof Promise;
  var h;
  (function(g15) {
    g15.errToObj = (A) => typeof A == "string" ? { message: A } : A || {}, g15.toString = (A) => typeof A == "string" ? A : A?.message;
  })(h || (h = {}));
  var L = class {
    constructor(A, I, B, C) {
      this._cachedPath = [], this.parent = A, this.data = I, this._path = B, this._key = C;
    }
    get path() {
      return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
    }
  };
  var EI = (g15, A) => {
    if (FA(A))
      return { success: true, data: A.value };
    if (!g15.common.issues.length)
      throw new Error("Validation failed but no issues detected.");
    return { success: false, get error() {
      if (this._error)
        return this._error;
      let I = new l(g15.common.issues);
      return this._error = I, this._error;
    } };
  };
  function n(g15) {
    if (!g15)
      return {};
    let { errorMap: A, invalid_type_error: I, required_error: B, description: C } = g15;
    if (A && (I || B))
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    return A ? { errorMap: A, description: C } : { errorMap: (E, i) => E.code !== "invalid_type" ? { message: i.defaultError } : typeof i.data > "u" ? { message: B ?? i.defaultError } : { message: I ?? i.defaultError }, description: C };
  }
  var c = class {
    constructor(A) {
      this.spa = this.safeParseAsync, this._def = A, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(A) {
      return T(A.data);
    }
    _getOrReturnCtx(A, I) {
      return I || { common: A.parent.common, data: A.data, parsedType: T(A.data), schemaErrorMap: this._def.errorMap, path: A.path, parent: A.parent };
    }
    _processInputParams(A) {
      return { status: new J(), ctx: { common: A.parent.common, data: A.data, parsedType: T(A.data), schemaErrorMap: this._def.errorMap, path: A.path, parent: A.parent } };
    }
    _parseSync(A) {
      let I = this._parse(A);
      if (HA(I))
        throw new Error("Synchronous parse encountered promise.");
      return I;
    }
    _parseAsync(A) {
      let I = this._parse(A);
      return Promise.resolve(I);
    }
    parse(A, I) {
      let B = this.safeParse(A, I);
      if (B.success)
        return B.data;
      throw B.error;
    }
    safeParse(A, I) {
      var B;
      let C = { common: { issues: [], async: (B = I?.async) !== null && B !== void 0 ? B : false, contextualErrorMap: I?.errorMap }, path: I?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: A, parsedType: T(A) }, Q = this._parseSync({ data: A, path: C.path, parent: C });
      return EI(C, Q);
    }
    async parseAsync(A, I) {
      let B = await this.safeParseAsync(A, I);
      if (B.success)
        return B.data;
      throw B.error;
    }
    async safeParseAsync(A, I) {
      let B = { common: { issues: [], contextualErrorMap: I?.errorMap, async: true }, path: I?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: A, parsedType: T(A) }, C = this._parse({ data: A, path: B.path, parent: B }), Q = await (HA(C) ? C : Promise.resolve(C));
      return EI(B, Q);
    }
    refine(A, I) {
      let B = (C) => typeof I == "string" || typeof I > "u" ? { message: I } : typeof I == "function" ? I(C) : I;
      return this._refinement((C, Q) => {
        let E = A(C), i = () => Q.addIssue({ code: o.custom, ...B(C) });
        return typeof Promise < "u" && E instanceof Promise ? E.then((t) => t ? true : (i(), false)) : E ? true : (i(), false);
      });
    }
    refinement(A, I) {
      return this._refinement((B, C) => A(B) ? true : (C.addIssue(typeof I == "function" ? I(B, C) : I), false));
    }
    _refinement(A) {
      return new M({ schema: this, typeName: w.ZodEffects, effect: { type: "refinement", refinement: A } });
    }
    superRefine(A) {
      return this._refinement(A);
    }
    optional() {
      return f.create(this, this._def);
    }
    nullable() {
      return v.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return P.create(this, this._def);
    }
    promise() {
      return X.create(this, this._def);
    }
    or(A) {
      return gA.create([this, A], this._def);
    }
    and(A) {
      return BA.create(this, A, this._def);
    }
    transform(A) {
      return new M({ ...n(this._def), schema: this, typeName: w.ZodEffects, effect: { type: "transform", transform: A } });
    }
    default(A) {
      let I = typeof A == "function" ? A : () => A;
      return new oA({ ...n(this._def), innerType: this, defaultValue: I, typeName: w.ZodDefault });
    }
    brand() {
      return new KA({ typeName: w.ZodBranded, type: this, ...n(this._def) });
    }
    catch(A) {
      let I = typeof A == "function" ? A : () => A;
      return new wA({ ...n(this._def), innerType: this, catchValue: I, typeName: w.ZodCatch });
    }
    describe(A) {
      let I = this.constructor;
      return new I({ ...this._def, description: A });
    }
    pipe(A) {
      return kA.create(this, A);
    }
    readonly() {
      return GA.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  var fI = /^c[^\s-]{8,}$/i;
  var YI = /^[a-z][a-z0-9]*$/;
  var bI = /^[0-9A-HJKMNP-TV-Z]{26}$/;
  var mI = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var xI = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var PI = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
  var mA;
  var vI = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
  var WI = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  var ZI = (g15) => g15.precision ? g15.offset ? new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${g15.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`) : new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${g15.precision}}Z$`) : g15.precision === 0 ? g15.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$") : g15.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");
  function TI(g15, A) {
    return !!((A === "v4" || !A) && vI.test(g15) || (A === "v6" || !A) && WI.test(g15));
  }
  var V = class g2 extends c {
    _parse(A) {
      if (this._def.coerce && (A.data = String(A.data)), this._getType(A) !== s.string) {
        let Q = this._getOrReturnCtx(A);
        return D(Q, { code: o.invalid_type, expected: s.string, received: Q.parsedType }), G;
      }
      let B = new J(), C;
      for (let Q of this._def.checks)
        if (Q.kind === "min")
          A.data.length < Q.value && (C = this._getOrReturnCtx(A, C), D(C, { code: o.too_small, minimum: Q.value, type: "string", inclusive: true, exact: false, message: Q.message }), B.dirty());
        else if (Q.kind === "max")
          A.data.length > Q.value && (C = this._getOrReturnCtx(A, C), D(C, { code: o.too_big, maximum: Q.value, type: "string", inclusive: true, exact: false, message: Q.message }), B.dirty());
        else if (Q.kind === "length") {
          let E = A.data.length > Q.value, i = A.data.length < Q.value;
          (E || i) && (C = this._getOrReturnCtx(A, C), E ? D(C, { code: o.too_big, maximum: Q.value, type: "string", inclusive: true, exact: true, message: Q.message }) : i && D(C, { code: o.too_small, minimum: Q.value, type: "string", inclusive: true, exact: true, message: Q.message }), B.dirty());
        } else if (Q.kind === "email")
          xI.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "email", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "emoji")
          mA || (mA = new RegExp(PI, "u")), mA.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "emoji", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "uuid")
          mI.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "uuid", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "cuid")
          fI.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "cuid", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "cuid2")
          YI.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "cuid2", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "ulid")
          bI.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "ulid", code: o.invalid_string, message: Q.message }), B.dirty());
        else if (Q.kind === "url")
          try {
            new URL(A.data);
          } catch {
            C = this._getOrReturnCtx(A, C), D(C, { validation: "url", code: o.invalid_string, message: Q.message }), B.dirty();
          }
        else
          Q.kind === "regex" ? (Q.regex.lastIndex = 0, Q.regex.test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "regex", code: o.invalid_string, message: Q.message }), B.dirty())) : Q.kind === "trim" ? A.data = A.data.trim() : Q.kind === "includes" ? A.data.includes(Q.value, Q.position) || (C = this._getOrReturnCtx(A, C), D(C, { code: o.invalid_string, validation: { includes: Q.value, position: Q.position }, message: Q.message }), B.dirty()) : Q.kind === "toLowerCase" ? A.data = A.data.toLowerCase() : Q.kind === "toUpperCase" ? A.data = A.data.toUpperCase() : Q.kind === "startsWith" ? A.data.startsWith(Q.value) || (C = this._getOrReturnCtx(A, C), D(C, { code: o.invalid_string, validation: { startsWith: Q.value }, message: Q.message }), B.dirty()) : Q.kind === "endsWith" ? A.data.endsWith(Q.value) || (C = this._getOrReturnCtx(A, C), D(C, { code: o.invalid_string, validation: { endsWith: Q.value }, message: Q.message }), B.dirty()) : Q.kind === "datetime" ? ZI(Q).test(A.data) || (C = this._getOrReturnCtx(A, C), D(C, { code: o.invalid_string, validation: "datetime", message: Q.message }), B.dirty()) : Q.kind === "ip" ? TI(A.data, Q.version) || (C = this._getOrReturnCtx(A, C), D(C, { validation: "ip", code: o.invalid_string, message: Q.message }), B.dirty()) : y.assertNever(Q);
      return { status: B.value, value: A.data };
    }
    _regex(A, I, B) {
      return this.refinement((C) => A.test(C), { validation: I, code: o.invalid_string, ...h.errToObj(B) });
    }
    _addCheck(A) {
      return new g2({ ...this._def, checks: [...this._def.checks, A] });
    }
    email(A) {
      return this._addCheck({ kind: "email", ...h.errToObj(A) });
    }
    url(A) {
      return this._addCheck({ kind: "url", ...h.errToObj(A) });
    }
    emoji(A) {
      return this._addCheck({ kind: "emoji", ...h.errToObj(A) });
    }
    uuid(A) {
      return this._addCheck({ kind: "uuid", ...h.errToObj(A) });
    }
    cuid(A) {
      return this._addCheck({ kind: "cuid", ...h.errToObj(A) });
    }
    cuid2(A) {
      return this._addCheck({ kind: "cuid2", ...h.errToObj(A) });
    }
    ulid(A) {
      return this._addCheck({ kind: "ulid", ...h.errToObj(A) });
    }
    ip(A) {
      return this._addCheck({ kind: "ip", ...h.errToObj(A) });
    }
    datetime(A) {
      var I;
      return typeof A == "string" ? this._addCheck({ kind: "datetime", precision: null, offset: false, message: A }) : this._addCheck({ kind: "datetime", precision: typeof A?.precision > "u" ? null : A?.precision, offset: (I = A?.offset) !== null && I !== void 0 ? I : false, ...h.errToObj(A?.message) });
    }
    regex(A, I) {
      return this._addCheck({ kind: "regex", regex: A, ...h.errToObj(I) });
    }
    includes(A, I) {
      return this._addCheck({ kind: "includes", value: A, position: I?.position, ...h.errToObj(I?.message) });
    }
    startsWith(A, I) {
      return this._addCheck({ kind: "startsWith", value: A, ...h.errToObj(I) });
    }
    endsWith(A, I) {
      return this._addCheck({ kind: "endsWith", value: A, ...h.errToObj(I) });
    }
    min(A, I) {
      return this._addCheck({ kind: "min", value: A, ...h.errToObj(I) });
    }
    max(A, I) {
      return this._addCheck({ kind: "max", value: A, ...h.errToObj(I) });
    }
    length(A, I) {
      return this._addCheck({ kind: "length", value: A, ...h.errToObj(I) });
    }
    nonempty(A) {
      return this.min(1, h.errToObj(A));
    }
    trim() {
      return new g2({ ...this._def, checks: [...this._def.checks, { kind: "trim" }] });
    }
    toLowerCase() {
      return new g2({ ...this._def, checks: [...this._def.checks, { kind: "toLowerCase" }] });
    }
    toUpperCase() {
      return new g2({ ...this._def, checks: [...this._def.checks, { kind: "toUpperCase" }] });
    }
    get isDatetime() {
      return !!this._def.checks.find((A) => A.kind === "datetime");
    }
    get isEmail() {
      return !!this._def.checks.find((A) => A.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((A) => A.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((A) => A.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((A) => A.kind === "uuid");
    }
    get isCUID() {
      return !!this._def.checks.find((A) => A.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((A) => A.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((A) => A.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((A) => A.kind === "ip");
    }
    get minLength() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "min" && (A === null || I.value > A) && (A = I.value);
      return A;
    }
    get maxLength() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "max" && (A === null || I.value < A) && (A = I.value);
      return A;
    }
  };
  V.create = (g15) => {
    var A;
    return new V({ checks: [], typeName: w.ZodString, coerce: (A = g15?.coerce) !== null && A !== void 0 ? A : false, ...n(g15) });
  };
  function VI(g15, A) {
    let I = (g15.toString().split(".")[1] || "").length, B = (A.toString().split(".")[1] || "").length, C = I > B ? I : B, Q = parseInt(g15.toFixed(C).replace(".", "")), E = parseInt(A.toFixed(C).replace(".", ""));
    return Q % E / Math.pow(10, C);
  }
  var j = class g3 extends c {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
    }
    _parse(A) {
      if (this._def.coerce && (A.data = Number(A.data)), this._getType(A) !== s.number) {
        let Q = this._getOrReturnCtx(A);
        return D(Q, { code: o.invalid_type, expected: s.number, received: Q.parsedType }), G;
      }
      let B, C = new J();
      for (let Q of this._def.checks)
        Q.kind === "int" ? y.isInteger(A.data) || (B = this._getOrReturnCtx(A, B), D(B, { code: o.invalid_type, expected: "integer", received: "float", message: Q.message }), C.dirty()) : Q.kind === "min" ? (Q.inclusive ? A.data < Q.value : A.data <= Q.value) && (B = this._getOrReturnCtx(A, B), D(B, { code: o.too_small, minimum: Q.value, type: "number", inclusive: Q.inclusive, exact: false, message: Q.message }), C.dirty()) : Q.kind === "max" ? (Q.inclusive ? A.data > Q.value : A.data >= Q.value) && (B = this._getOrReturnCtx(A, B), D(B, { code: o.too_big, maximum: Q.value, type: "number", inclusive: Q.inclusive, exact: false, message: Q.message }), C.dirty()) : Q.kind === "multipleOf" ? VI(A.data, Q.value) !== 0 && (B = this._getOrReturnCtx(A, B), D(B, { code: o.not_multiple_of, multipleOf: Q.value, message: Q.message }), C.dirty()) : Q.kind === "finite" ? Number.isFinite(A.data) || (B = this._getOrReturnCtx(A, B), D(B, { code: o.not_finite, message: Q.message }), C.dirty()) : y.assertNever(Q);
      return { status: C.value, value: A.data };
    }
    gte(A, I) {
      return this.setLimit("min", A, true, h.toString(I));
    }
    gt(A, I) {
      return this.setLimit("min", A, false, h.toString(I));
    }
    lte(A, I) {
      return this.setLimit("max", A, true, h.toString(I));
    }
    lt(A, I) {
      return this.setLimit("max", A, false, h.toString(I));
    }
    setLimit(A, I, B, C) {
      return new g3({ ...this._def, checks: [...this._def.checks, { kind: A, value: I, inclusive: B, message: h.toString(C) }] });
    }
    _addCheck(A) {
      return new g3({ ...this._def, checks: [...this._def.checks, A] });
    }
    int(A) {
      return this._addCheck({ kind: "int", message: h.toString(A) });
    }
    positive(A) {
      return this._addCheck({ kind: "min", value: 0, inclusive: false, message: h.toString(A) });
    }
    negative(A) {
      return this._addCheck({ kind: "max", value: 0, inclusive: false, message: h.toString(A) });
    }
    nonpositive(A) {
      return this._addCheck({ kind: "max", value: 0, inclusive: true, message: h.toString(A) });
    }
    nonnegative(A) {
      return this._addCheck({ kind: "min", value: 0, inclusive: true, message: h.toString(A) });
    }
    multipleOf(A, I) {
      return this._addCheck({ kind: "multipleOf", value: A, message: h.toString(I) });
    }
    finite(A) {
      return this._addCheck({ kind: "finite", message: h.toString(A) });
    }
    safe(A) {
      return this._addCheck({ kind: "min", inclusive: true, value: Number.MIN_SAFE_INTEGER, message: h.toString(A) })._addCheck({ kind: "max", inclusive: true, value: Number.MAX_SAFE_INTEGER, message: h.toString(A) });
    }
    get minValue() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "min" && (A === null || I.value > A) && (A = I.value);
      return A;
    }
    get maxValue() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "max" && (A === null || I.value < A) && (A = I.value);
      return A;
    }
    get isInt() {
      return !!this._def.checks.find((A) => A.kind === "int" || A.kind === "multipleOf" && y.isInteger(A.value));
    }
    get isFinite() {
      let A = null, I = null;
      for (let B of this._def.checks) {
        if (B.kind === "finite" || B.kind === "int" || B.kind === "multipleOf")
          return true;
        B.kind === "min" ? (I === null || B.value > I) && (I = B.value) : B.kind === "max" && (A === null || B.value < A) && (A = B.value);
      }
      return Number.isFinite(I) && Number.isFinite(A);
    }
  };
  j.create = (g15) => new j({ checks: [], typeName: w.ZodNumber, coerce: g15?.coerce || false, ...n(g15) });
  var z2 = class g4 extends c {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte;
    }
    _parse(A) {
      if (this._def.coerce && (A.data = BigInt(A.data)), this._getType(A) !== s.bigint) {
        let Q = this._getOrReturnCtx(A);
        return D(Q, { code: o.invalid_type, expected: s.bigint, received: Q.parsedType }), G;
      }
      let B, C = new J();
      for (let Q of this._def.checks)
        Q.kind === "min" ? (Q.inclusive ? A.data < Q.value : A.data <= Q.value) && (B = this._getOrReturnCtx(A, B), D(B, { code: o.too_small, type: "bigint", minimum: Q.value, inclusive: Q.inclusive, message: Q.message }), C.dirty()) : Q.kind === "max" ? (Q.inclusive ? A.data > Q.value : A.data >= Q.value) && (B = this._getOrReturnCtx(A, B), D(B, { code: o.too_big, type: "bigint", maximum: Q.value, inclusive: Q.inclusive, message: Q.message }), C.dirty()) : Q.kind === "multipleOf" ? A.data % Q.value !== BigInt(0) && (B = this._getOrReturnCtx(A, B), D(B, { code: o.not_multiple_of, multipleOf: Q.value, message: Q.message }), C.dirty()) : y.assertNever(Q);
      return { status: C.value, value: A.data };
    }
    gte(A, I) {
      return this.setLimit("min", A, true, h.toString(I));
    }
    gt(A, I) {
      return this.setLimit("min", A, false, h.toString(I));
    }
    lte(A, I) {
      return this.setLimit("max", A, true, h.toString(I));
    }
    lt(A, I) {
      return this.setLimit("max", A, false, h.toString(I));
    }
    setLimit(A, I, B, C) {
      return new g4({ ...this._def, checks: [...this._def.checks, { kind: A, value: I, inclusive: B, message: h.toString(C) }] });
    }
    _addCheck(A) {
      return new g4({ ...this._def, checks: [...this._def.checks, A] });
    }
    positive(A) {
      return this._addCheck({ kind: "min", value: BigInt(0), inclusive: false, message: h.toString(A) });
    }
    negative(A) {
      return this._addCheck({ kind: "max", value: BigInt(0), inclusive: false, message: h.toString(A) });
    }
    nonpositive(A) {
      return this._addCheck({ kind: "max", value: BigInt(0), inclusive: true, message: h.toString(A) });
    }
    nonnegative(A) {
      return this._addCheck({ kind: "min", value: BigInt(0), inclusive: true, message: h.toString(A) });
    }
    multipleOf(A, I) {
      return this._addCheck({ kind: "multipleOf", value: A, message: h.toString(I) });
    }
    get minValue() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "min" && (A === null || I.value > A) && (A = I.value);
      return A;
    }
    get maxValue() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "max" && (A === null || I.value < A) && (A = I.value);
      return A;
    }
  };
  z2.create = (g15) => {
    var A;
    return new z2({ checks: [], typeName: w.ZodBigInt, coerce: (A = g15?.coerce) !== null && A !== void 0 ? A : false, ...n(g15) });
  };
  var _ = class extends c {
    _parse(A) {
      if (this._def.coerce && (A.data = !!A.data), this._getType(A) !== s.boolean) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.boolean, received: B.parsedType }), G;
      }
      return N(A.data);
    }
  };
  _.create = (g15) => new _({ typeName: w.ZodBoolean, coerce: g15?.coerce || false, ...n(g15) });
  var $ = class g5 extends c {
    _parse(A) {
      if (this._def.coerce && (A.data = new Date(A.data)), this._getType(A) !== s.date) {
        let Q = this._getOrReturnCtx(A);
        return D(Q, { code: o.invalid_type, expected: s.date, received: Q.parsedType }), G;
      }
      if (isNaN(A.data.getTime())) {
        let Q = this._getOrReturnCtx(A);
        return D(Q, { code: o.invalid_date }), G;
      }
      let B = new J(), C;
      for (let Q of this._def.checks)
        Q.kind === "min" ? A.data.getTime() < Q.value && (C = this._getOrReturnCtx(A, C), D(C, { code: o.too_small, message: Q.message, inclusive: true, exact: false, minimum: Q.value, type: "date" }), B.dirty()) : Q.kind === "max" ? A.data.getTime() > Q.value && (C = this._getOrReturnCtx(A, C), D(C, { code: o.too_big, message: Q.message, inclusive: true, exact: false, maximum: Q.value, type: "date" }), B.dirty()) : y.assertNever(Q);
      return { status: B.value, value: new Date(A.data.getTime()) };
    }
    _addCheck(A) {
      return new g5({ ...this._def, checks: [...this._def.checks, A] });
    }
    min(A, I) {
      return this._addCheck({ kind: "min", value: A.getTime(), message: h.toString(I) });
    }
    max(A, I) {
      return this._addCheck({ kind: "max", value: A.getTime(), message: h.toString(I) });
    }
    get minDate() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "min" && (A === null || I.value > A) && (A = I.value);
      return A != null ? new Date(A) : null;
    }
    get maxDate() {
      let A = null;
      for (let I of this._def.checks)
        I.kind === "max" && (A === null || I.value < A) && (A = I.value);
      return A != null ? new Date(A) : null;
    }
  };
  $.create = (g15) => new $({ checks: [], coerce: g15?.coerce || false, typeName: w.ZodDate, ...n(g15) });
  var sA = class extends c {
    _parse(A) {
      if (this._getType(A) !== s.symbol) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.symbol, received: B.parsedType }), G;
      }
      return N(A.data);
    }
  };
  sA.create = (g15) => new sA({ typeName: w.ZodSymbol, ...n(g15) });
  var AA = class extends c {
    _parse(A) {
      if (this._getType(A) !== s.undefined) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.undefined, received: B.parsedType }), G;
      }
      return N(A.data);
    }
  };
  AA.create = (g15) => new AA({ typeName: w.ZodUndefined, ...n(g15) });
  var IA = class extends c {
    _parse(A) {
      if (this._getType(A) !== s.null) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.null, received: B.parsedType }), G;
      }
      return N(A.data);
    }
  };
  IA.create = (g15) => new IA({ typeName: w.ZodNull, ...n(g15) });
  var O = class extends c {
    constructor() {
      super(...arguments), this._any = true;
    }
    _parse(A) {
      return N(A.data);
    }
  };
  O.create = (g15) => new O({ typeName: w.ZodAny, ...n(g15) });
  var x = class extends c {
    constructor() {
      super(...arguments), this._unknown = true;
    }
    _parse(A) {
      return N(A.data);
    }
  };
  x.create = (g15) => new x({ typeName: w.ZodUnknown, ...n(g15) });
  var Y = class extends c {
    _parse(A) {
      let I = this._getOrReturnCtx(A);
      return D(I, { code: o.invalid_type, expected: s.never, received: I.parsedType }), G;
    }
  };
  Y.create = (g15) => new Y({ typeName: w.ZodNever, ...n(g15) });
  var tA = class extends c {
    _parse(A) {
      if (this._getType(A) !== s.undefined) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.void, received: B.parsedType }), G;
      }
      return N(A.data);
    }
  };
  tA.create = (g15) => new tA({ typeName: w.ZodVoid, ...n(g15) });
  var P = class g6 extends c {
    _parse(A) {
      let { ctx: I, status: B } = this._processInputParams(A), C = this._def;
      if (I.parsedType !== s.array)
        return D(I, { code: o.invalid_type, expected: s.array, received: I.parsedType }), G;
      if (C.exactLength !== null) {
        let E = I.data.length > C.exactLength.value, i = I.data.length < C.exactLength.value;
        (E || i) && (D(I, { code: E ? o.too_big : o.too_small, minimum: i ? C.exactLength.value : void 0, maximum: E ? C.exactLength.value : void 0, type: "array", inclusive: true, exact: true, message: C.exactLength.message }), B.dirty());
      }
      if (C.minLength !== null && I.data.length < C.minLength.value && (D(I, { code: o.too_small, minimum: C.minLength.value, type: "array", inclusive: true, exact: false, message: C.minLength.message }), B.dirty()), C.maxLength !== null && I.data.length > C.maxLength.value && (D(I, { code: o.too_big, maximum: C.maxLength.value, type: "array", inclusive: true, exact: false, message: C.maxLength.message }), B.dirty()), I.common.async)
        return Promise.all([...I.data].map((E, i) => C.type._parseAsync(new L(I, E, I.path, i)))).then((E) => J.mergeArray(B, E));
      let Q = [...I.data].map((E, i) => C.type._parseSync(new L(I, E, I.path, i)));
      return J.mergeArray(B, Q);
    }
    get element() {
      return this._def.type;
    }
    min(A, I) {
      return new g6({ ...this._def, minLength: { value: A, message: h.toString(I) } });
    }
    max(A, I) {
      return new g6({ ...this._def, maxLength: { value: A, message: h.toString(I) } });
    }
    length(A, I) {
      return new g6({ ...this._def, exactLength: { value: A, message: h.toString(I) } });
    }
    nonempty(A) {
      return this.min(1, A);
    }
  };
  P.create = (g15, A) => new P({ type: g15, minLength: null, maxLength: null, exactLength: null, typeName: w.ZodArray, ...n(A) });
  function aA(g15) {
    if (g15 instanceof H) {
      let A = {};
      for (let I in g15.shape) {
        let B = g15.shape[I];
        A[I] = f.create(aA(B));
      }
      return new H({ ...g15._def, shape: () => A });
    } else
      return g15 instanceof P ? new P({ ...g15._def, type: aA(g15.element) }) : g15 instanceof f ? f.create(aA(g15.unwrap())) : g15 instanceof v ? v.create(aA(g15.unwrap())) : g15 instanceof b ? b.create(g15.items.map((A) => aA(A))) : g15;
  }
  var H = class g7 extends c {
    constructor() {
      super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      let A = this._def.shape(), I = y.objectKeys(A);
      return this._cached = { shape: A, keys: I };
    }
    _parse(A) {
      if (this._getType(A) !== s.object) {
        let a = this._getOrReturnCtx(A);
        return D(a, { code: o.invalid_type, expected: s.object, received: a.parsedType }), G;
      }
      let { status: B, ctx: C } = this._processInputParams(A), { shape: Q, keys: E } = this._getCached(), i = [];
      if (!(this._def.catchall instanceof Y && this._def.unknownKeys === "strip"))
        for (let a in C.data)
          E.includes(a) || i.push(a);
      let t = [];
      for (let a of E) {
        let r = Q[a], S = C.data[a];
        t.push({ key: { status: "valid", value: a }, value: r._parse(new L(C, S, C.path, a)), alwaysSet: a in C.data });
      }
      if (this._def.catchall instanceof Y) {
        let a = this._def.unknownKeys;
        if (a === "passthrough")
          for (let r of i)
            t.push({ key: { status: "valid", value: r }, value: { status: "valid", value: C.data[r] } });
        else if (a === "strict")
          i.length > 0 && (D(C, { code: o.unrecognized_keys, keys: i }), B.dirty());
        else if (a !== "strip")
          throw new Error("Internal ZodObject error: invalid unknownKeys value.");
      } else {
        let a = this._def.catchall;
        for (let r of i) {
          let S = C.data[r];
          t.push({ key: { status: "valid", value: r }, value: a._parse(new L(C, S, C.path, r)), alwaysSet: r in C.data });
        }
      }
      return C.common.async ? Promise.resolve().then(async () => {
        let a = [];
        for (let r of t) {
          let S = await r.key;
          a.push({ key: S, value: await r.value, alwaysSet: r.alwaysSet });
        }
        return a;
      }).then((a) => J.mergeObjectSync(B, a)) : J.mergeObjectSync(B, t);
    }
    get shape() {
      return this._def.shape();
    }
    strict(A) {
      return h.errToObj, new g7({ ...this._def, unknownKeys: "strict", ...A !== void 0 ? { errorMap: (I, B) => {
        var C, Q, E, i;
        let t = (E = (Q = (C = this._def).errorMap) === null || Q === void 0 ? void 0 : Q.call(C, I, B).message) !== null && E !== void 0 ? E : B.defaultError;
        return I.code === "unrecognized_keys" ? { message: (i = h.errToObj(A).message) !== null && i !== void 0 ? i : t } : { message: t };
      } } : {} });
    }
    strip() {
      return new g7({ ...this._def, unknownKeys: "strip" });
    }
    passthrough() {
      return new g7({ ...this._def, unknownKeys: "passthrough" });
    }
    extend(A) {
      return new g7({ ...this._def, shape: () => ({ ...this._def.shape(), ...A }) });
    }
    merge(A) {
      return new g7({ unknownKeys: A._def.unknownKeys, catchall: A._def.catchall, shape: () => ({ ...this._def.shape(), ...A._def.shape() }), typeName: w.ZodObject });
    }
    setKey(A, I) {
      return this.augment({ [A]: I });
    }
    catchall(A) {
      return new g7({ ...this._def, catchall: A });
    }
    pick(A) {
      let I = {};
      return y.objectKeys(A).forEach((B) => {
        A[B] && this.shape[B] && (I[B] = this.shape[B]);
      }), new g7({ ...this._def, shape: () => I });
    }
    omit(A) {
      let I = {};
      return y.objectKeys(this.shape).forEach((B) => {
        A[B] || (I[B] = this.shape[B]);
      }), new g7({ ...this._def, shape: () => I });
    }
    deepPartial() {
      return aA(this);
    }
    partial(A) {
      let I = {};
      return y.objectKeys(this.shape).forEach((B) => {
        let C = this.shape[B];
        A && !A[B] ? I[B] = C : I[B] = C.optional();
      }), new g7({ ...this._def, shape: () => I });
    }
    required(A) {
      let I = {};
      return y.objectKeys(this.shape).forEach((B) => {
        if (A && !A[B])
          I[B] = this.shape[B];
        else {
          let Q = this.shape[B];
          for (; Q instanceof f; )
            Q = Q._def.innerType;
          I[B] = Q;
        }
      }), new g7({ ...this._def, shape: () => I });
    }
    keyof() {
      return aI(y.objectKeys(this.shape));
    }
  };
  H.create = (g15, A) => new H({ shape: () => g15, unknownKeys: "strip", catchall: Y.create(), typeName: w.ZodObject, ...n(A) });
  H.strictCreate = (g15, A) => new H({ shape: () => g15, unknownKeys: "strict", catchall: Y.create(), typeName: w.ZodObject, ...n(A) });
  H.lazycreate = (g15, A) => new H({ shape: g15, unknownKeys: "strip", catchall: Y.create(), typeName: w.ZodObject, ...n(A) });
  var gA = class extends c {
    _parse(A) {
      let { ctx: I } = this._processInputParams(A), B = this._def.options;
      function C(Q) {
        for (let i of Q)
          if (i.result.status === "valid")
            return i.result;
        for (let i of Q)
          if (i.result.status === "dirty")
            return I.common.issues.push(...i.ctx.common.issues), i.result;
        let E = Q.map((i) => new l(i.ctx.common.issues));
        return D(I, { code: o.invalid_union, unionErrors: E }), G;
      }
      if (I.common.async)
        return Promise.all(B.map(async (Q) => {
          let E = { ...I, common: { ...I.common, issues: [] }, parent: null };
          return { result: await Q._parseAsync({ data: I.data, path: I.path, parent: E }), ctx: E };
        })).then(C);
      {
        let Q, E = [];
        for (let t of B) {
          let a = { ...I, common: { ...I.common, issues: [] }, parent: null }, r = t._parseSync({ data: I.data, path: I.path, parent: a });
          if (r.status === "valid")
            return r;
          r.status === "dirty" && !Q && (Q = { result: r, ctx: a }), a.common.issues.length && E.push(a.common.issues);
        }
        if (Q)
          return I.common.issues.push(...Q.ctx.common.issues), Q.result;
        let i = E.map((t) => new l(t));
        return D(I, { code: o.invalid_union, unionErrors: i }), G;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  gA.create = (g15, A) => new gA({ options: g15, typeName: w.ZodUnion, ...n(A) });
  var JA = (g15) => g15 instanceof CA ? JA(g15.schema) : g15 instanceof M ? JA(g15.innerType()) : g15 instanceof QA ? [g15.value] : g15 instanceof EA ? g15.options : g15 instanceof iA ? Object.keys(g15.enum) : g15 instanceof oA ? JA(g15._def.innerType) : g15 instanceof AA ? [void 0] : g15 instanceof IA ? [null] : null;
  var lA = class g8 extends c {
    _parse(A) {
      let { ctx: I } = this._processInputParams(A);
      if (I.parsedType !== s.object)
        return D(I, { code: o.invalid_type, expected: s.object, received: I.parsedType }), G;
      let B = this.discriminator, C = I.data[B], Q = this.optionsMap.get(C);
      return Q ? I.common.async ? Q._parseAsync({ data: I.data, path: I.path, parent: I }) : Q._parseSync({ data: I.data, path: I.path, parent: I }) : (D(I, { code: o.invalid_union_discriminator, options: Array.from(this.optionsMap.keys()), path: [B] }), G);
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    static create(A, I, B) {
      let C = /* @__PURE__ */ new Map();
      for (let Q of I) {
        let E = JA(Q.shape[A]);
        if (!E)
          throw new Error(`A discriminator value for key \`${A}\` could not be extracted from all schema options`);
        for (let i of E) {
          if (C.has(i))
            throw new Error(`Discriminator property ${String(A)} has duplicate value ${String(i)}`);
          C.set(i, Q);
        }
      }
      return new g8({ typeName: w.ZodDiscriminatedUnion, discriminator: A, options: I, optionsMap: C, ...n(B) });
    }
  };
  function WA(g15, A) {
    let I = T(g15), B = T(A);
    if (g15 === A)
      return { valid: true, data: g15 };
    if (I === s.object && B === s.object) {
      let C = y.objectKeys(A), Q = y.objectKeys(g15).filter((i) => C.indexOf(i) !== -1), E = { ...g15, ...A };
      for (let i of Q) {
        let t = WA(g15[i], A[i]);
        if (!t.valid)
          return { valid: false };
        E[i] = t.data;
      }
      return { valid: true, data: E };
    } else if (I === s.array && B === s.array) {
      if (g15.length !== A.length)
        return { valid: false };
      let C = [];
      for (let Q = 0; Q < g15.length; Q++) {
        let E = g15[Q], i = A[Q], t = WA(E, i);
        if (!t.valid)
          return { valid: false };
        C.push(t.data);
      }
      return { valid: true, data: C };
    } else
      return I === s.date && B === s.date && +g15 == +A ? { valid: true, data: g15 } : { valid: false };
  }
  var BA = class extends c {
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A), C = (Q, E) => {
        if (PA(Q) || PA(E))
          return G;
        let i = WA(Q.value, E.value);
        return i.valid ? ((vA(Q) || vA(E)) && I.dirty(), { status: I.value, value: i.data }) : (D(B, { code: o.invalid_intersection_types }), G);
      };
      return B.common.async ? Promise.all([this._def.left._parseAsync({ data: B.data, path: B.path, parent: B }), this._def.right._parseAsync({ data: B.data, path: B.path, parent: B })]).then(([Q, E]) => C(Q, E)) : C(this._def.left._parseSync({ data: B.data, path: B.path, parent: B }), this._def.right._parseSync({ data: B.data, path: B.path, parent: B }));
    }
  };
  BA.create = (g15, A, I) => new BA({ left: g15, right: A, typeName: w.ZodIntersection, ...n(I) });
  var b = class g9 extends c {
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A);
      if (B.parsedType !== s.array)
        return D(B, { code: o.invalid_type, expected: s.array, received: B.parsedType }), G;
      if (B.data.length < this._def.items.length)
        return D(B, { code: o.too_small, minimum: this._def.items.length, inclusive: true, exact: false, type: "array" }), G;
      !this._def.rest && B.data.length > this._def.items.length && (D(B, { code: o.too_big, maximum: this._def.items.length, inclusive: true, exact: false, type: "array" }), I.dirty());
      let Q = [...B.data].map((E, i) => {
        let t = this._def.items[i] || this._def.rest;
        return t ? t._parse(new L(B, E, B.path, i)) : null;
      }).filter((E) => !!E);
      return B.common.async ? Promise.all(Q).then((E) => J.mergeArray(I, E)) : J.mergeArray(I, Q);
    }
    get items() {
      return this._def.items;
    }
    rest(A) {
      return new g9({ ...this._def, rest: A });
    }
  };
  b.create = (g15, A) => {
    if (!Array.isArray(g15))
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new b({ items: g15, typeName: w.ZodTuple, rest: null, ...n(A) });
  };
  var MA = class g10 extends c {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A);
      if (B.parsedType !== s.object)
        return D(B, { code: o.invalid_type, expected: s.object, received: B.parsedType }), G;
      let C = [], Q = this._def.keyType, E = this._def.valueType;
      for (let i in B.data)
        C.push({ key: Q._parse(new L(B, i, B.path, i)), value: E._parse(new L(B, B.data[i], B.path, i)) });
      return B.common.async ? J.mergeObjectAsync(I, C) : J.mergeObjectSync(I, C);
    }
    get element() {
      return this._def.valueType;
    }
    static create(A, I, B) {
      return I instanceof c ? new g10({ keyType: A, valueType: I, typeName: w.ZodRecord, ...n(B) }) : new g10({ keyType: V.create(), valueType: A, typeName: w.ZodRecord, ...n(I) });
    }
  };
  var DA = class extends c {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A);
      if (B.parsedType !== s.map)
        return D(B, { code: o.invalid_type, expected: s.map, received: B.parsedType }), G;
      let C = this._def.keyType, Q = this._def.valueType, E = [...B.data.entries()].map(([i, t], a) => ({ key: C._parse(new L(B, i, B.path, [a, "key"])), value: Q._parse(new L(B, t, B.path, [a, "value"])) }));
      if (B.common.async) {
        let i = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (let t of E) {
            let a = await t.key, r = await t.value;
            if (a.status === "aborted" || r.status === "aborted")
              return G;
            (a.status === "dirty" || r.status === "dirty") && I.dirty(), i.set(a.value, r.value);
          }
          return { status: I.value, value: i };
        });
      } else {
        let i = /* @__PURE__ */ new Map();
        for (let t of E) {
          let a = t.key, r = t.value;
          if (a.status === "aborted" || r.status === "aborted")
            return G;
          (a.status === "dirty" || r.status === "dirty") && I.dirty(), i.set(a.value, r.value);
        }
        return { status: I.value, value: i };
      }
    }
  };
  DA.create = (g15, A, I) => new DA({ valueType: A, keyType: g15, typeName: w.ZodMap, ...n(I) });
  var hA = class g11 extends c {
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A);
      if (B.parsedType !== s.set)
        return D(B, { code: o.invalid_type, expected: s.set, received: B.parsedType }), G;
      let C = this._def;
      C.minSize !== null && B.data.size < C.minSize.value && (D(B, { code: o.too_small, minimum: C.minSize.value, type: "set", inclusive: true, exact: false, message: C.minSize.message }), I.dirty()), C.maxSize !== null && B.data.size > C.maxSize.value && (D(B, { code: o.too_big, maximum: C.maxSize.value, type: "set", inclusive: true, exact: false, message: C.maxSize.message }), I.dirty());
      let Q = this._def.valueType;
      function E(t) {
        let a = /* @__PURE__ */ new Set();
        for (let r of t) {
          if (r.status === "aborted")
            return G;
          r.status === "dirty" && I.dirty(), a.add(r.value);
        }
        return { status: I.value, value: a };
      }
      let i = [...B.data.values()].map((t, a) => Q._parse(new L(B, t, B.path, a)));
      return B.common.async ? Promise.all(i).then((t) => E(t)) : E(i);
    }
    min(A, I) {
      return new g11({ ...this._def, minSize: { value: A, message: h.toString(I) } });
    }
    max(A, I) {
      return new g11({ ...this._def, maxSize: { value: A, message: h.toString(I) } });
    }
    size(A, I) {
      return this.min(A, I).max(A, I);
    }
    nonempty(A) {
      return this.min(1, A);
    }
  };
  hA.create = (g15, A) => new hA({ valueType: g15, minSize: null, maxSize: null, typeName: w.ZodSet, ...n(A) });
  var qA = class g12 extends c {
    constructor() {
      super(...arguments), this.validate = this.implement;
    }
    _parse(A) {
      let { ctx: I } = this._processInputParams(A);
      if (I.parsedType !== s.function)
        return D(I, { code: o.invalid_type, expected: s.function, received: I.parsedType }), G;
      function B(i, t) {
        return NA({ data: i, path: I.path, errorMaps: [I.common.contextualErrorMap, I.schemaErrorMap, UA(), dA].filter((a) => !!a), issueData: { code: o.invalid_arguments, argumentsError: t } });
      }
      function C(i, t) {
        return NA({ data: i, path: I.path, errorMaps: [I.common.contextualErrorMap, I.schemaErrorMap, UA(), dA].filter((a) => !!a), issueData: { code: o.invalid_return_type, returnTypeError: t } });
      }
      let Q = { errorMap: I.common.contextualErrorMap }, E = I.data;
      if (this._def.returns instanceof X) {
        let i = this;
        return N(async function(...t) {
          let a = new l([]), r = await i._def.args.parseAsync(t, Q).catch((bA) => {
            throw a.addIssue(B(t, bA)), a;
          }), S = await Reflect.apply(E, this, r);
          return await i._def.returns._def.type.parseAsync(S, Q).catch((bA) => {
            throw a.addIssue(C(S, bA)), a;
          });
        });
      } else {
        let i = this;
        return N(function(...t) {
          let a = i._def.args.safeParse(t, Q);
          if (!a.success)
            throw new l([B(t, a.error)]);
          let r = Reflect.apply(E, this, a.data), S = i._def.returns.safeParse(r, Q);
          if (!S.success)
            throw new l([C(r, S.error)]);
          return S.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...A) {
      return new g12({ ...this._def, args: b.create(A).rest(x.create()) });
    }
    returns(A) {
      return new g12({ ...this._def, returns: A });
    }
    implement(A) {
      return this.parse(A);
    }
    strictImplement(A) {
      return this.parse(A);
    }
    static create(A, I, B) {
      return new g12({ args: A || b.create([]).rest(x.create()), returns: I || x.create(), typeName: w.ZodFunction, ...n(B) });
    }
  };
  var CA = class extends c {
    get schema() {
      return this._def.getter();
    }
    _parse(A) {
      let { ctx: I } = this._processInputParams(A);
      return this._def.getter()._parse({ data: I.data, path: I.path, parent: I });
    }
  };
  CA.create = (g15, A) => new CA({ getter: g15, typeName: w.ZodLazy, ...n(A) });
  var QA = class extends c {
    _parse(A) {
      if (A.data !== this._def.value) {
        let I = this._getOrReturnCtx(A);
        return D(I, { received: I.data, code: o.invalid_literal, expected: this._def.value }), G;
      }
      return { status: "valid", value: A.data };
    }
    get value() {
      return this._def.value;
    }
  };
  QA.create = (g15, A) => new QA({ value: g15, typeName: w.ZodLiteral, ...n(A) });
  function aI(g15, A) {
    return new EA({ values: g15, typeName: w.ZodEnum, ...n(A) });
  }
  var EA = class g13 extends c {
    _parse(A) {
      if (typeof A.data != "string") {
        let I = this._getOrReturnCtx(A), B = this._def.values;
        return D(I, { expected: y.joinValues(B), received: I.parsedType, code: o.invalid_type }), G;
      }
      if (this._def.values.indexOf(A.data) === -1) {
        let I = this._getOrReturnCtx(A), B = this._def.values;
        return D(I, { received: I.data, code: o.invalid_enum_value, options: B }), G;
      }
      return N(A.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      let A = {};
      for (let I of this._def.values)
        A[I] = I;
      return A;
    }
    get Values() {
      let A = {};
      for (let I of this._def.values)
        A[I] = I;
      return A;
    }
    get Enum() {
      let A = {};
      for (let I of this._def.values)
        A[I] = I;
      return A;
    }
    extract(A) {
      return g13.create(A);
    }
    exclude(A) {
      return g13.create(this.options.filter((I) => !A.includes(I)));
    }
  };
  EA.create = aI;
  var iA = class extends c {
    _parse(A) {
      let I = y.getValidEnumValues(this._def.values), B = this._getOrReturnCtx(A);
      if (B.parsedType !== s.string && B.parsedType !== s.number) {
        let C = y.objectValues(I);
        return D(B, { expected: y.joinValues(C), received: B.parsedType, code: o.invalid_type }), G;
      }
      if (I.indexOf(A.data) === -1) {
        let C = y.objectValues(I);
        return D(B, { received: B.data, code: o.invalid_enum_value, options: C }), G;
      }
      return N(A.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  iA.create = (g15, A) => new iA({ values: g15, typeName: w.ZodNativeEnum, ...n(A) });
  var X = class extends c {
    unwrap() {
      return this._def.type;
    }
    _parse(A) {
      let { ctx: I } = this._processInputParams(A);
      if (I.parsedType !== s.promise && I.common.async === false)
        return D(I, { code: o.invalid_type, expected: s.promise, received: I.parsedType }), G;
      let B = I.parsedType === s.promise ? I.data : Promise.resolve(I.data);
      return N(B.then((C) => this._def.type.parseAsync(C, { path: I.path, errorMap: I.common.contextualErrorMap })));
    }
  };
  X.create = (g15, A) => new X({ type: g15, typeName: w.ZodPromise, ...n(A) });
  var M = class extends c {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === w.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A), C = this._def.effect || null, Q = { addIssue: (E) => {
        D(B, E), E.fatal ? I.abort() : I.dirty();
      }, get path() {
        return B.path;
      } };
      if (Q.addIssue = Q.addIssue.bind(Q), C.type === "preprocess") {
        let E = C.transform(B.data, Q);
        return B.common.issues.length ? { status: "dirty", value: B.data } : B.common.async ? Promise.resolve(E).then((i) => this._def.schema._parseAsync({ data: i, path: B.path, parent: B })) : this._def.schema._parseSync({ data: E, path: B.path, parent: B });
      }
      if (C.type === "refinement") {
        let E = (i) => {
          let t = C.refinement(i, Q);
          if (B.common.async)
            return Promise.resolve(t);
          if (t instanceof Promise)
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          return i;
        };
        if (B.common.async === false) {
          let i = this._def.schema._parseSync({ data: B.data, path: B.path, parent: B });
          return i.status === "aborted" ? G : (i.status === "dirty" && I.dirty(), E(i.value), { status: I.value, value: i.value });
        } else
          return this._def.schema._parseAsync({ data: B.data, path: B.path, parent: B }).then((i) => i.status === "aborted" ? G : (i.status === "dirty" && I.dirty(), E(i.value).then(() => ({ status: I.value, value: i.value }))));
      }
      if (C.type === "transform")
        if (B.common.async === false) {
          let E = this._def.schema._parseSync({ data: B.data, path: B.path, parent: B });
          if (!FA(E))
            return E;
          let i = C.transform(E.value, Q);
          if (i instanceof Promise)
            throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
          return { status: I.value, value: i };
        } else
          return this._def.schema._parseAsync({ data: B.data, path: B.path, parent: B }).then((E) => FA(E) ? Promise.resolve(C.transform(E.value, Q)).then((i) => ({ status: I.value, value: i })) : E);
      y.assertNever(C);
    }
  };
  M.create = (g15, A, I) => new M({ schema: g15, typeName: w.ZodEffects, effect: A, ...n(I) });
  M.createWithPreprocess = (g15, A, I) => new M({ schema: A, effect: { type: "preprocess", transform: g15 }, typeName: w.ZodEffects, ...n(I) });
  var f = class extends c {
    _parse(A) {
      return this._getType(A) === s.undefined ? N(void 0) : this._def.innerType._parse(A);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  f.create = (g15, A) => new f({ innerType: g15, typeName: w.ZodOptional, ...n(A) });
  var v = class extends c {
    _parse(A) {
      return this._getType(A) === s.null ? N(null) : this._def.innerType._parse(A);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  v.create = (g15, A) => new v({ innerType: g15, typeName: w.ZodNullable, ...n(A) });
  var oA = class extends c {
    _parse(A) {
      let { ctx: I } = this._processInputParams(A), B = I.data;
      return I.parsedType === s.undefined && (B = this._def.defaultValue()), this._def.innerType._parse({ data: B, path: I.path, parent: I });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  oA.create = (g15, A) => new oA({ innerType: g15, typeName: w.ZodDefault, defaultValue: typeof A.default == "function" ? A.default : () => A.default, ...n(A) });
  var wA = class extends c {
    _parse(A) {
      let { ctx: I } = this._processInputParams(A), B = { ...I, common: { ...I.common, issues: [] } }, C = this._def.innerType._parse({ data: B.data, path: B.path, parent: { ...B } });
      return HA(C) ? C.then((Q) => ({ status: "valid", value: Q.status === "valid" ? Q.value : this._def.catchValue({ get error() {
        return new l(B.common.issues);
      }, input: B.data }) })) : { status: "valid", value: C.status === "valid" ? C.value : this._def.catchValue({ get error() {
        return new l(B.common.issues);
      }, input: B.data }) };
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  wA.create = (g15, A) => new wA({ innerType: g15, typeName: w.ZodCatch, catchValue: typeof A.catch == "function" ? A.catch : () => A.catch, ...n(A) });
  var rA = class extends c {
    _parse(A) {
      if (this._getType(A) !== s.nan) {
        let B = this._getOrReturnCtx(A);
        return D(B, { code: o.invalid_type, expected: s.nan, received: B.parsedType }), G;
      }
      return { status: "valid", value: A.data };
    }
  };
  rA.create = (g15) => new rA({ typeName: w.ZodNaN, ...n(g15) });
  var OI = Symbol("zod_brand");
  var KA = class extends c {
    _parse(A) {
      let { ctx: I } = this._processInputParams(A), B = I.data;
      return this._def.type._parse({ data: B, path: I.path, parent: I });
    }
    unwrap() {
      return this._def.type;
    }
  };
  var kA = class g14 extends c {
    _parse(A) {
      let { status: I, ctx: B } = this._processInputParams(A);
      if (B.common.async)
        return (async () => {
          let Q = await this._def.in._parseAsync({ data: B.data, path: B.path, parent: B });
          return Q.status === "aborted" ? G : Q.status === "dirty" ? (I.dirty(), eI(Q.value)) : this._def.out._parseAsync({ data: Q.value, path: B.path, parent: B });
        })();
      {
        let C = this._def.in._parseSync({ data: B.data, path: B.path, parent: B });
        return C.status === "aborted" ? G : C.status === "dirty" ? (I.dirty(), { status: "dirty", value: C.value }) : this._def.out._parseSync({ data: C.value, path: B.path, parent: B });
      }
    }
    static create(A, I) {
      return new g14({ in: A, out: I, typeName: w.ZodPipeline });
    }
  };
  var GA = class extends c {
    _parse(A) {
      let I = this._def.innerType._parse(A);
      return FA(I) && (I.value = Object.freeze(I.value)), I;
    }
  };
  GA.create = (g15, A) => new GA({ innerType: g15, typeName: w.ZodReadonly, ...n(A) });
  var sI = (g15, A = {}, I) => g15 ? O.create().superRefine((B, C) => {
    var Q, E;
    if (!g15(B)) {
      let i = typeof A == "function" ? A(B) : typeof A == "string" ? { message: A } : A, t = (E = (Q = i.fatal) !== null && Q !== void 0 ? Q : I) !== null && E !== void 0 ? E : true, a = typeof i == "string" ? { message: i } : i;
      C.addIssue({ code: "custom", ...a, fatal: t });
    }
  }) : O.create();
  var XI = { object: H.lazycreate };
  var w;
  (function(g15) {
    g15.ZodString = "ZodString", g15.ZodNumber = "ZodNumber", g15.ZodNaN = "ZodNaN", g15.ZodBigInt = "ZodBigInt", g15.ZodBoolean = "ZodBoolean", g15.ZodDate = "ZodDate", g15.ZodSymbol = "ZodSymbol", g15.ZodUndefined = "ZodUndefined", g15.ZodNull = "ZodNull", g15.ZodAny = "ZodAny", g15.ZodUnknown = "ZodUnknown", g15.ZodNever = "ZodNever", g15.ZodVoid = "ZodVoid", g15.ZodArray = "ZodArray", g15.ZodObject = "ZodObject", g15.ZodUnion = "ZodUnion", g15.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", g15.ZodIntersection = "ZodIntersection", g15.ZodTuple = "ZodTuple", g15.ZodRecord = "ZodRecord", g15.ZodMap = "ZodMap", g15.ZodSet = "ZodSet", g15.ZodFunction = "ZodFunction", g15.ZodLazy = "ZodLazy", g15.ZodLiteral = "ZodLiteral", g15.ZodEnum = "ZodEnum", g15.ZodEffects = "ZodEffects", g15.ZodNativeEnum = "ZodNativeEnum", g15.ZodOptional = "ZodOptional", g15.ZodNullable = "ZodNullable", g15.ZodDefault = "ZodDefault", g15.ZodCatch = "ZodCatch", g15.ZodPromise = "ZodPromise", g15.ZodBranded = "ZodBranded", g15.ZodPipeline = "ZodPipeline", g15.ZodReadonly = "ZodReadonly";
  })(w || (w = {}));
  var jI = (g15, A = { message: `Input not instance of ${g15.name}` }) => sI((I) => I instanceof g15, A);
  var R = V.create;
  var q = j.create;
  var zI = rA.create;
  var _I = z2.create;
  var LA = _.create;
  var $I = $.create;
  var Ag = sA.create;
  var Ig = AA.create;
  var ZA = IA.create;
  var gg = O.create;
  var Bg = x.create;
  var Cg = Y.create;
  var Qg = tA.create;
  var W = P.create;
  var F = H.create;
  var Eg = H.strictCreate;
  var Z = gA.create;
  var eA = lA.create;
  var ig = BA.create;
  var nA = b.create;
  var og = MA.create;
  var eg = DA.create;
  var ag = hA.create;
  var sg = qA.create;
  var tg = CA.create;
  var k = QA.create;
  var cA = EA.create;
  var Dg = iA.create;
  var hg = X.create;
  var iI = M.create;
  var U = f.create;
  var wg = v.create;
  var rg = M.createWithPreprocess;
  var Gg = kA.create;
  var ng = () => R().optional();
  var cg = () => q().optional();
  var yg = () => LA().optional();
  var dg = { string: (g15) => V.create({ ...g15, coerce: true }), number: (g15) => j.create({ ...g15, coerce: true }), boolean: (g15) => _.create({ ...g15, coerce: true }), bigint: (g15) => z2.create({ ...g15, coerce: true }), date: (g15) => $.create({ ...g15, coerce: true }) };
  var Fg = G;
  var e = Object.freeze({ __proto__: null, defaultErrorMap: dA, setErrorMap: pI, getErrorMap: UA, makeIssue: NA, EMPTY_PATH: uI, addIssueToContext: D, ParseStatus: J, INVALID: G, DIRTY: eI, OK: N, isAborted: PA, isDirty: vA, isValid: FA, isAsync: HA, get util() {
    return y;
  }, get objectUtil() {
    return xA;
  }, ZodParsedType: s, getParsedType: T, ZodType: c, ZodString: V, ZodNumber: j, ZodBigInt: z2, ZodBoolean: _, ZodDate: $, ZodSymbol: sA, ZodUndefined: AA, ZodNull: IA, ZodAny: O, ZodUnknown: x, ZodNever: Y, ZodVoid: tA, ZodArray: P, ZodObject: H, ZodUnion: gA, ZodDiscriminatedUnion: lA, ZodIntersection: BA, ZodTuple: b, ZodRecord: MA, ZodMap: DA, ZodSet: hA, ZodFunction: qA, ZodLazy: CA, ZodLiteral: QA, ZodEnum: EA, ZodNativeEnum: iA, ZodPromise: X, ZodEffects: M, ZodTransformer: M, ZodOptional: f, ZodNullable: v, ZodDefault: oA, ZodCatch: wA, ZodNaN: rA, BRAND: OI, ZodBranded: KA, ZodPipeline: kA, ZodReadonly: GA, custom: sI, Schema: c, ZodSchema: c, late: XI, get ZodFirstPartyTypeKind() {
    return w;
  }, coerce: dg, any: gg, array: W, bigint: _I, boolean: LA, date: $I, discriminatedUnion: eA, effect: iI, enum: cA, function: sg, instanceof: jI, intersection: ig, lazy: tg, literal: k, map: eg, nan: zI, nativeEnum: Dg, never: Cg, null: ZA, nullable: wg, number: q, object: F, oboolean: yg, onumber: cg, optional: U, ostring: ng, pipeline: Gg, preprocess: rg, promise: hg, record: og, set: ag, strictObject: Eg, string: R, symbol: Ag, transformer: iI, tuple: nA, undefined: Ig, union: Z, unknown: Bg, void: Qg, NEVER: Fg, ZodIssueCode: o, quotelessJson: LI, ZodError: l });
  var p = e.custom((g15) => g15 instanceof Uint8Array);
  var kg = e.union([e.string(), e.number(), e.boolean(), e.null()]);
  var tI = e.lazy(() => e.union([kg, e.array(tI), e.record(tI)]));
  var fg = e.union([e.tuple([e.literal(0), e.number(), e.string(), e.unknown()]), e.tuple([e.literal(1), e.number(), e.nullable(e.string()), e.unknown()]), e.tuple([e.literal(2), e.string(), e.unknown()])]);
  var Rg = e.enum(["sfu", "gateway"]);
  var Sg = e.enum(["connect", "roomclose", "roomupdate", "roombanclient", "roomsendmessage"]);
  var mg = e.object({ uid: e.string(), cid: e.optional(e.string()), rid: TA(e.string()), nsp: e.optional(e.string()), adr: e.optional(e.string()), aud: e.optional(TA(Rg)), sub: e.optional(TA(Sg)), exp: e.optional(e.number()), nbf: e.optional(e.number()), ups: e.optional(e.string()), internal: e.optional(e.object({ server: e.optional(e.string()) })) });
  function TA(g15) {
    return e.union([g15, e.array(g15)]);
  }
  var u = q();
  var Jg = F({ kind: U(k("audio")), uid: U(R()), customType: U(R()) });
  var Ug = F({ kind: U(k("video")), codec: U(R()), uid: U(R()), customType: U(R()) });
  var VA = Z([Jg, Ug]);
  var OA = F({ id: u, properties: VA, paused: LA() });
  var K = q();
  var XA = Z([nA([q(), q(), q()]), nA([q(), q()])]);
  var jA = F({ id: K, user_id: R(), user_data: p, medias: W(OA) });
  var DI = eA("kind", [F({ kind: k("UserDataChanged"), peer_id: K, user_data: p }), F({ kind: k("MediaStarted"), peer_id: K, media: OA }), F({ kind: k("MediaStopped"), peer_id: K, media_id: u })]);
  var zA = R();
  var Ng = F({ id: zA, customer: R(), user_data: p, peers: W(jA) });
  var Hg = eA("kind", [F({ kind: k("Joined"), room: Ng, media_ids: W(u), own_peer_id: K }), F({ kind: k("Left"), reason: cA(["RoomClosing", "ServerClosing", "PeerKicked"]) }), F({ kind: k("UserDataChanged"), user_data: U(p) }), F({ kind: k("PeerJoined"), peer: jA }), F({ kind: k("PeerLeft"), peer_id: K })]);
  var hI = F({ updates: W(Hg) });
  var lg = cA(["Joining", "Joined", "Closed"]);
  var wI = F({ status: lg, message: U(R()) });
  var rI = e.object({ sender_peer_id: K, message: p });
  var pA = eA("kind", [F({ kind: k("Sdp"), type: cA(["Answer", "Offer"]), sdp: R(), media_map: W(nA([u, R()])) }), F({ kind: k("Trickle"), candidate: R(), spd_mid: U(R()), spd_mline_index: U(q()), username_fragment: U(Z([R(), ZA()])) }), F({ kind: k("TrickleFinished") })]);
  var oB = { JoinRoom: { request: e.object({ token: e.string(), room_id: zA, user_data: p, position: XA }), response: e.object({ peer_id: K, stream_id: e.optional(e.number()), token: e.optional(e.string()) }) }, WebRtcUpdate: { request: pA, response: e.null() }, RequestReconnectToken: { request: e.object({ peer_id: e.optional(K) }), response: e.string() }, Ping: { request: e.object({}), response: e.null() } };
  var eB = { UpdatePeer: { request: e.object({ user_data: p }), response: e.null() }, StartMedia: { request: e.object({ media_id: u, properties: VA }), response: e.null() }, StopMedia: { request: e.object({ media_id: u }), response: e.null() }, PauseMedia: { request: e.object({ media_id: u }), response: e.null() }, ResumeMedia: { request: e.object({ media_id: u }), response: e.null() }, SetPeerPosition: { request: e.object({ position: XA }), response: e.null() }, SendMessage: { request: e.object({ target_peer_ids: e.optional(e.array(K)), message: p }), response: e.null() } };
  var wB = F({ name: k("WebRtcUpdate"), properties: pA });
  var rB = Z([F({ name: k("RoomStatusChanged"), properties: wI }), F({ name: k("RoomUpdated"), properties: hI }), F({ name: k("PeerUpdated"), properties: DI }), F({ name: k("MessageReceived"), properties: rI })]);
  function _A() {
    return typeof SharedArrayBuffer < "u";
  }
  var cI = function(g15, A, I, B) {
    function C(Q) {
      return Q instanceof I ? Q : new I(function(E) {
        E(Q);
      });
    }
    return new (I || (I = Promise))(function(Q, E) {
      function i(r) {
        try {
          a(B.next(r));
        } catch (S) {
          E(S);
        }
      }
      function t(r) {
        try {
          a(B.throw(r));
        } catch (S) {
          E(S);
        }
      }
      function a(r) {
        r.done ? Q(r.value) : C(r.value).then(i, t);
      }
      a((B = B.apply(g15, A || [])).next());
    });
  };
  var uA = class {
    constructor() {
      this._Tasks = [], this._Running = false;
    }
    enqueue(A) {
      return new Promise((I, B) => {
        let C = () => cI(this, void 0, void 0, function* () {
          try {
            let Q = yield A();
            I(Q);
          } catch (Q) {
            B(Q);
          }
        });
        this._Tasks.push(C), this._Running || this.execute();
      });
    }
    execute() {
      return cI(this, void 0, void 0, function* () {
        for (this._Running = true; ; ) {
          let A = this._Tasks.shift();
          if (A === void 0)
            break;
          yield A();
        }
        this._Running = false;
      });
    }
  };
  function $A(g15, A) {
    g15.values[0] = A;
  }
  function yI(g15, A) {
    return g15.values[1 + A * 2];
  }
  function dI(g15, A, I) {
    g15.values[1 + A * 2 + 1] = I;
  }
  function FI(g15) {
    return g15.values[0] !== 0;
  }
  function kI(g15) {
    return g15.values[1];
  }
  function RI(g15) {
    return g15.values[2];
  }
  function SI(g15, A) {
    return g15.values[3] = A;
  }
  var SA = { isSilent: true, rmsDBFS: -758.596 };
  function m(g15) {
    return g15.connectionId * 4294967296 + g15.mediaId;
  }
  function d(g15, A, I) {
    return g15.postMessage(A, I);
  }
  function yA(g15, A) {
    return new Promise((I) => {
      let B = (C) => {
        let [Q, E] = C.data;
        Q === A && (I(C.data[1]), g15.removeEventListener("message", B));
      };
      g15.addEventListener("message", B);
    });
  }
  var AI = class {
    constructor(A, I, B, C) {
      this.worklet = A;
      this.worker = I;
      this.information = B;
      this.sink = C;
      I.addEventListener("message", this.onMessages.bind(this));
    }
    get context() {
      return this.worklet.context;
    }
    get activity() {
      return { isSilent: !FI(this.information), rmsDBFS: RI(this.information) };
    }
    get speechProbability() {
      return kI(this.information);
    }
    setMedias(A) {
      d(this.worker, ["captureSetMedias", { connections: A }]);
    }
    setVad(A) {
      d(this.worker, ["captureSetVad", A]);
    }
    setVolume(A) {
      SI(this.information, A);
    }
    close() {
      d(this.worklet.port, ["close", void 0]), d(this.worker, ["close", void 0]);
    }
    onMessages(A) {
      let [I, B] = A.data;
      switch (I) {
        case "sendPacket":
          this.sink(B.connectionId, B.packet);
          break;
      }
    }
  };
  async function JI(g15, A, I, B) {
    let { port1: C, port2: Q } = new MessageChannel(), [E, i] = await Promise.all([I, B]);
    d(E, ["captureInit", { sampleRate: g15.sampleRate, workletPort: C }], [C]);
    let { sampleBuffer: t, informationBuffer: a } = await yA(E, "captureReady");
    return d(i.port, ["init", { workerPort: Q, sampleBuffer: t }], [Q]), new AI(i, E, a, A);
  }
  var II = class {
    constructor(A, I, B, C) {
      this.audioContext = A;
      this.worklet = I;
      this.worker = B;
      this.information = C;
      this.availableIndexes = [];
      this.medias = /* @__PURE__ */ new Map();
    }
    receivePacket(A, I) {
      d(this.worker, ["playbackReceivePacket", { connectionId: A, packet: I }], [I.buffer]);
    }
    addMedias(A, I) {
      console.log("addMedias", A, I);
      let B = [];
      for (let C of I) {
        let Q = this._GetFreeIndex();
        Q !== void 0 && (this.medias.set(m({ connectionId: A, mediaId: C }), { index: Q }), B.push({ connectionId: A, mediaId: C, index: Q }));
      }
      d(this.worker, ["playbackUpdateMedias", { added: B, removed: [] }]);
    }
    removeMedias(A, I) {
      let B = [];
      for (let C of I) {
        let Q = m({ connectionId: A, mediaId: C }), E = this.medias.get(Q);
        E !== void 0 && (this.medias.delete(Q), this.availableIndexes.push(E.index), B.push({ connectionId: A, mediaId: C, index: E.index }));
      }
      d(this.worker, ["playbackUpdateMedias", { added: [], removed: B }]);
    }
    getActivity(A) {
      let I = this.medias.get(m(A));
      if (I === void 0)
        return;
      let B = yI(this.information, I.index);
      return B === 0 ? SA : { isSilent: false, rmsDBFS: B };
    }
    setGlobalVolume(A) {
      $A(this.information, A);
    }
    setVolume(A, I) {
      let B = this.medias.get(m(A));
      B !== void 0 && dI(this.information, B.index, I);
    }
    close() {
      d(this.worker, ["close", void 0]), d(this.worklet.port, ["close", void 0]);
    }
    _GetFreeIndex() {
      let A = this.availableIndexes.pop();
      if (A !== void 0)
        return A;
      if (this.information.length > this.medias.size)
        return this.medias.size;
    }
  };
  async function UI(g15, A, I) {
    let { port1: B, port2: C } = new MessageChannel(), [Q, E] = await Promise.all([A, I]);
    d(Q, ["playbackInit", { workletPort: B }], [B]);
    let { informationBuffer: i, sampleBuffer: t } = await yA(Q, "playbackReady");
    return $A(i, 1), d(E.port, ["init", { sampleBuffer: t, workerPort: C }], [C]), E.connect(g15.destination), new II(g15, E, Q, i);
  }
  var gI = class {
    constructor(A, I, B) {
      this.worklet = A;
      this.worker = I;
      this.sink = B;
      this._Activity = SA;
      this._SpeechProbability = 0;
      I.addEventListener("message", this._OnMessages.bind(this));
    }
    get context() {
      return this.worklet.context;
    }
    get activity() {
      return this._Activity;
    }
    get speechProbability() {
      return this._SpeechProbability;
    }
    setMedias(A) {
      d(this.worker, ["captureSetMedias", { connections: A }]);
    }
    setVad(A) {
      d(this.worker, ["captureSetVad", A]);
    }
    setVolume(A) {
      d(this.worker, ["captureSetVolume", { value: A }]);
    }
    close() {
      d(this.worklet.port, ["close", void 0]), d(this.worker, ["close", void 0]);
    }
    _OnMessages(A) {
      let [I, B] = A.data;
      switch (I) {
        case "sendPacket":
          this.sink(B.connectionId, B.packet);
          break;
        case "captureUpdate":
          this._Activity = { isSilent: !B.active, rmsDBFS: B.rmsDBFs }, this._SpeechProbability = B.speechProbability;
      }
    }
  };
  async function NI(g15, A, I, B, C) {
    let { port1: Q, port2: E } = new MessageChannel(), [i, t] = await Promise.all([B, C]);
    return d(i, ["captureInit", { sampleRate: g15.sampleRate, refreshRate: I, workletPort: Q }], [Q]), await yA(i, "captureReady"), d(t.port, ["init", { workerPort: E }], [E]), new gI(t, i, A);
  }
  var BI = class {
    constructor(A, I, B) {
      this.audioContext = A;
      this.worklet = I;
      this.worker = B;
      this.availableIndexes = [];
      this.medias = /* @__PURE__ */ new Map();
      this.activities = new Float32Array();
      B.addEventListener("message", this._OnMessages.bind(this));
    }
    receivePacket(A, I) {
      d(this.worker, ["playbackReceivePacket", { connectionId: A, packet: I }], [I.buffer]);
    }
    addMedias(A, I) {
      console.log("addMedias", A, I);
      let B = [];
      for (let C of I) {
        let Q = this._GetFreeIndex();
        Q !== void 0 && (this.medias.set(m({ connectionId: A, mediaId: C }), { index: Q }), B.push({ connectionId: A, mediaId: C, index: Q }));
      }
      d(this.worker, ["playbackUpdateMedias", { added: B, removed: [] }]);
    }
    removeMedias(A, I) {
      let B = [];
      for (let C of I) {
        let Q = m({ connectionId: A, mediaId: C }), E = this.medias.get(Q);
        E !== void 0 && (this.medias.delete(Q), this.availableIndexes.push(E.index), B.push({ connectionId: A, mediaId: C, index: E.index }));
      }
      d(this.worker, ["playbackUpdateMedias", { added: [], removed: B }]);
    }
    getActivity(A) {
      let I = this.medias.get(m(A));
      if (I === void 0)
        return;
      let B = this.activities.at(I.index);
      if (B !== void 0)
        return B === 0 ? SA : { isSilent: false, rmsDBFS: B };
    }
    setGlobalVolume(A) {
      d(this.worker, ["playbackSetVolume", { index: "global", value: A }]);
    }
    setVolume(A, I) {
      let B = this.medias.get(m(A));
      B !== void 0 && d(this.worker, ["playbackSetVolume", { index: B.index, value: I }]);
    }
    close() {
      d(this.worker, ["close", void 0]), d(this.worklet.port, ["close", void 0]);
    }
    _GetFreeIndex() {
      let A = this.availableIndexes.pop();
      if (A !== void 0)
        return A;
      if (this.medias.size < 512)
        return this.medias.size;
    }
    _OnMessages(A) {
      let [I, B] = A.data;
      switch (I) {
        case "playbackUpdate":
          this.activities = B.activities;
          break;
      }
    }
  };
  async function HI(g15, A, I, B) {
    let { port1: C, port2: Q } = new MessageChannel(), [E, i] = await Promise.all([I, B]);
    return d(E, ["playbackInit", { workletPort: C, refreshRate: A }], [C]), await yA(E, "playbackReady"), d(i.port, ["init", { workerPort: Q }], [Q]), i.connect(g15.destination), new BI(g15, i, E);
  }
  var lI = new uA();
  function ZC(g15, A, I = 250) {
    return _A() ? lI.enqueue(async () => JI(g15, A, fA(), YA(g15, "OdinCaptureProcessor", { channelCount: 1, numberOfInputs: 1, numberOfOutputs: 0 }))) : (console.warn("SharedArrayBuffer is not available; creating ODIN CaptureWorker in fallback mode"), lI.enqueue(async () => NI(g15, A, I, fA(), YA(g15, "OdinCaptureProcessor", { channelCount: 1, numberOfInputs: 1, numberOfOutputs: 0 }))));
  }
  async function TC(g15, A = 250) {
    if (g15.sampleRate !== 48e3)
      throw new Error("playback sample rate must be 48kHz ");
    return _A() ? UI(g15, fA(), YA(g15, "OdinPlaybackProcessor", { numberOfInputs: 0, numberOfOutputs: 1, outputChannelCount: [2] })) : (console.warn("SharedArrayBuffer is not available; creating ODIN PlaybackWorker in fallback mode"), HI(g15, A, fA(), YA(g15, "OdinPlaybackProcessor", { numberOfInputs: 0, numberOfOutputs: 1, outputChannelCount: [2] })));
  }
  async function fA() {
    let g15 = URL.createObjectURL(new Blob([CI], { type: "text/javascript" }));
    return new Worker(g15);
  }
  async function YA(g15, A, I) {
    try {
      return new AudioWorkletNode(g15, A, I);
    } catch {
    }
    let B = URL.createObjectURL(new Blob([QI], { type: "text/javascript" }));
    return await g15.audioWorklet.addModule(B), new AudioWorkletNode(g15, A, I);
  }

  // lib/worker/config.js
  var MinDBFs = -758.596;

  // lib/worker/common.js
  var Silence = { isSilent: true, rmsDBFS: MinDBFs };

  // lib/plugin/deviceManager.js
  var __awaiter4 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var hasAudioPermissions = false;
  function openCaptureDevice(controller, parameters, apm) {
    return __awaiter4(this, void 0, void 0, function* () {
      const deviceId = parameters.device ? { exact: parameters.device.device.deviceId } : void 0;
      let stream;
      try {
        const result = yield Promise.race([
          navigator.mediaDevices.getUserMedia({
            audio: {
              echoCancellation: apm.echoCanceller,
              noiseSuppression: apm.noiseSuppression !== "None",
              autoGainControl: apm.gainController,
              // @ts-ignore chrome fix
              echoCancellationType: "system",
              // sampleRate: 48000,
              deviceId
            }
          }),
          sleep(3e4, "timeout")
        ]);
        if (result === "timeout")
          return failure("getUserMedia; timeout");
        hasAudioPermissions = true;
        stream = result;
      } catch (reason) {
        return failure(`getUserMedia; ${reason}`);
      }
      const sampleRate = stream.getAudioTracks()[0].getSettings().sampleRate;
      const context = yield controller.audioContexts.acquire(sampleRate);
      return success(context.createMediaStreamSource(stream));
    });
  }
  function stopMediaStream(ms) {
    ms.getTracks().forEach((track) => {
      track.stop();
      ms.removeTrack(track);
    });
  }
  function enumerateDevices() {
    return __awaiter4(this, void 0, void 0, function* () {
      hasAudioPermissions = yield requestMediaPermissions();
      const mediaDeviceInfos = yield navigator.mediaDevices.enumerateDevices();
      const devices = [];
      let outputDeviceIndex = 0;
      let inputDeviceIndex = 0;
      for (const mediaDeviceInfo of mediaDeviceInfos) {
        if (mediaDeviceInfo.kind === "audioinput") {
          if (inputDeviceIndex === 0) {
            devices.push(new Device(mediaDeviceInfo, true));
          } else {
            devices.push(new Device(mediaDeviceInfo, false));
          }
          inputDeviceIndex++;
        }
        if (mediaDeviceInfo.kind === "audiooutput") {
          if (outputDeviceIndex === 0) {
            devices.push(new Device(mediaDeviceInfo, true));
          } else {
            devices.push(new Device(mediaDeviceInfo, false));
          }
          outputDeviceIndex++;
        }
      }
      return devices;
    });
  }
  function requestMediaPermissions() {
    return __awaiter4(this, void 0, void 0, function* () {
      if (hasAudioPermissions)
        return true;
      const constraints = {};
      constraints.audio = {
        sampleRate: void 0,
        deviceId: "",
        autoGainControl: false,
        noiseSuppression: false,
        advanced: void 0,
        aspectRatio: void 0,
        echoCancellation: false,
        channelCount: 0,
        facingMode: void 0,
        frameRate: 0
      };
      console.log("Plugin _requestMediaPermissions: ", constraints);
      try {
        const ms = yield navigator.mediaDevices.getUserMedia(constraints);
        ms === null || ms === void 0 ? void 0 : ms.getTracks().forEach((track) => {
          track.stop();
          ms.removeTrack(track);
        });
      } catch (e2) {
        console.error(`Requesting permissions for ${"audio"} failed.`);
        console.error(e2);
        return false;
      }
      return true;
    });
  }

  // lib/plugin/medias/audio-capture.js
  var __awaiter5 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var defaultVad = {
    voiceActivity: {
      attackThreshold: 0.9,
      releaseThreshold: 0.8
    },
    volumeGate: {
      attackThreshold: -30,
      releaseThreshold: -40
    }
  };
  var defaultApm = {
    echoCanceller: false,
    highPassFilter: false,
    preAmplifier: false,
    captureLevelAdjustment: false,
    noiseSuppression: "None",
    transientSuppressor: false,
    gainController: false
  };
  var AudioCapture = class {
    get vad() {
      return this._Vad;
    }
    get apm() {
      return this._Apm;
    }
    get volume() {
      return this._Volume;
    }
    get activity() {
      var _a, _b;
      return (_b = (_a = this._Capture) === null || _a === void 0 ? void 0 : _a.worker.activity) !== null && _b !== void 0 ? _b : Silence;
    }
    get speechProbability() {
      var _a, _b;
      return (_b = (_a = this._Capture) === null || _a === void 0 ? void 0 : _a.worker.speechProbability) !== null && _b !== void 0 ? _b : 0;
    }
    get deviceId() {
      var _a, _b;
      return (_b = (_a = this._DeviceParameters) === null || _a === void 0 ? void 0 : _a.device) === null || _b === void 0 ? void 0 : _b.device.deviceId;
    }
    constructor(controller, parameters) {
      this.controller = controller;
      this._Medias = /* @__PURE__ */ new Map();
      this._Vad = defaultVad;
      this._Apm = defaultApm;
      this._Volume = 1;
      this._DeviceCb = () => __awaiter5(this, void 0, void 0, function* () {
        var _a, _b;
        const devices = yield enumerateDevices();
        const isListed = devices.some((device) => {
          var _a2, _b2;
          return device.device.deviceId === ((_b2 = (_a2 = this._DeviceParameters) === null || _a2 === void 0 ? void 0 : _a2.device) === null || _b2 === void 0 ? void 0 : _b2.device.deviceId);
        });
        if (!isListed) {
          (_b = (_a = this._DeviceParameters) === null || _a === void 0 ? void 0 : _a.onStatusChanged) === null || _b === void 0 ? void 0 : _b.call(_a, "stopped");
          navigator.mediaDevices.removeEventListener("devicechange", this._DeviceCb);
        }
      });
      console.log("Eyvor AudioCapture constructor");
      if (parameters.apm) {
        this.setApm(parameters.apm);
      }
      if (parameters.vad) {
        this.setVad(parameters.vad);
      }
      if (parameters.volume) {
        this.setVolume(parameters.volume);
      }
    }
    start(room, media, uid) {
      var _a;
      let entry = this._Medias.get(media.connectionId);
      if (entry === void 0) {
        this._Medias.set(media.connectionId, entry = /* @__PURE__ */ new Set());
      }
      if (entry.has(media.mediaId))
        return;
      entry.add(media.mediaId);
      if (((_a = room.mainConnection) === null || _a === void 0 ? void 0 : _a.id) === media.connectionId) {
        room.typedRequest("StartMedia", {
          media_id: media.mediaId,
          properties: { kind: "audio", uid }
        }).catch((reason) => console.error(`StartMedia got rejected; ${reason}`));
      }
      this._UpdateMedias();
    }
    stop(room, media) {
      var _a;
      const entry = this._Medias.get(media.connectionId);
      if (!(entry === null || entry === void 0 ? void 0 : entry.delete(media.mediaId)))
        return;
      if (((_a = room.mainConnection) === null || _a === void 0 ? void 0 : _a.id) === media.connectionId) {
        room.typedRequest("StopMedia", { media_id: media.mediaId }).catch((reason) => console.error(`StopMedia got rejected; ${reason}`));
      }
      this._UpdateMedias();
    }
    setVad(value) {
      this._Vad = value;
      if (this._Capture) {
        this._Capture.worker.setVad(value);
      }
    }
    setApm(config) {
      return __awaiter5(this, void 0, void 0, function* () {
        this._Apm = config;
        if (this._DeviceParameters) {
          yield this.setDevice(this._DeviceParameters);
        }
      });
    }
    setDevice(parameters) {
      return __awaiter5(this, void 0, void 0, function* () {
        var _a;
        console.log("Eyvor AudioCapture setDevice() parameters: ", parameters);
        const rollbackParams = this._DeviceParameters;
        this._DeviceParameters = parameters;
        if (this._Volume === "muted") {
          return;
        }
        const device = yield openCaptureDevice(this.controller, parameters, this._Apm);
        if (device.type !== "Success") {
          console.error(`unable to open capture device; ${device.reason}`);
          this._DeviceParameters = rollbackParams;
          return;
        }
        if (this._DeviceParameters.onStatusChanged) {
          navigator.mediaDevices.addEventListener("devicechange", this._DeviceCb);
        }
        if (this._Capture !== void 0) {
          stopMediaStream(this._Capture.source.mediaStream);
          this._Capture.source.disconnect(this._Capture.worker.worklet);
        }
        if (this._Capture === void 0 || this._Capture.worker.worklet.context !== device.value.context) {
          (_a = this._Capture) === null || _a === void 0 ? void 0 : _a.worker.close();
          this._Capture = {
            worker: yield ZC(device.value.context, this.controller.sink),
            source: device.value
          };
          yield this._UpdateMedias();
          this.setVolume(this.volume);
          this.setVad(this.vad);
        } else {
          this._Capture.source = device.value;
        }
        this._Capture.source.connect(this._Capture.worker.worklet);
        return success();
      });
    }
    setVolume(value) {
      var _a;
      this._Volume = value;
      if (value === "muted") {
        this.close();
      } else {
        if (!this._Capture && this._DeviceParameters) {
          this.setDevice(this._DeviceParameters);
        }
        (_a = this._Capture) === null || _a === void 0 ? void 0 : _a.worker.setVolume(value);
      }
    }
    close() {
      if (this._Capture !== void 0) {
        this._Capture.worker.close();
        stopMediaStream(this._Capture.source.mediaStream);
        this._Capture.source.disconnect(this._Capture.worker.worklet);
        this.controller.audioContexts.release(this._Capture.source.context);
      }
      navigator.mediaDevices.removeEventListener("devicechange", this._DeviceCb);
      this._Capture = void 0;
    }
    _UpdateMedias() {
      return __awaiter5(this, void 0, void 0, function* () {
        if (this._Capture !== void 0) {
          const connections = Array.from(this._Medias).map(([key, value]) => {
            return { id: key, mediaIds: Array.from(value) };
          });
          this._Capture.worker.setMedias(connections);
        }
      });
    }
  };

  // lib/plugin/medias/video-capture.js
  var __awaiter6 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var VideoCapture = class {
    constructor(controller, customType) {
      this.controller = controller;
      this.customType = customType;
      this._Medias = /* @__PURE__ */ new Map();
    }
    get mediaStream() {
      return this._mediaStream;
    }
    setDevice(ms) {
      return __awaiter6(this, void 0, void 0, function* () {
        this._mediaStream = ms;
      });
    }
    start(room, media, uid) {
      var _a;
      console.log("Eyvor VideoCapture start()");
      let entry = this._Medias.get(media.connectionId);
      if (entry === void 0) {
        this._Medias.set(media.connectionId, entry = /* @__PURE__ */ new Set());
      }
      if (entry.has(media.mediaId))
        return;
      entry.add(media.mediaId);
      if (((_a = room.mainConnection) === null || _a === void 0 ? void 0 : _a.id) === media.connectionId) {
        const properties = {
          kind: "video",
          codec: "VP8",
          uid
        };
        if (this.customType) {
          properties.customType = this.customType;
        }
        room.typedRequest("StartMedia", {
          media_id: media.mediaId,
          properties
        }).catch((reason) => console.error(`StartMedia got rejected; ${reason}`));
      }
    }
    stop(room, media) {
      var _a;
      if (this._mediaStream) {
        stopMediaStream(this._mediaStream);
      }
      const entry = this._Medias.get(media.connectionId);
      if (!(entry === null || entry === void 0 ? void 0 : entry.delete(media.mediaId)))
        return;
      if (((_a = room.mainConnection) === null || _a === void 0 ? void 0 : _a.id) === media.connectionId) {
        room.typedRequest("StopMedia", { media_id: media.mediaId }).catch((reason) => console.error(`StopMedia got rejected; ${reason}`));
      }
    }
    close() {
      throw new Error("Method not implemented.");
    }
  };

  // lib/plugin/medias/audio-playback.js
  var AudioPlayback = class {
    get volume() {
      return this.controller.playbackGetVolume(this.uid);
    }
    get activity() {
      return this.controller.playbackGetActivity(this.uid);
    }
    constructor(controller, uid) {
      this.controller = controller;
      this.uid = uid;
    }
    start(id) {
      this.controller.playbackStart(this.uid, id);
    }
    stop(id) {
      this.controller.playbackStop(this.uid, id);
    }
    setVolume(value) {
      this.controller.playbackSetVolume(this.uid, value);
    }
    close() {
      this.controller.closePlayback(this.uid);
    }
  };

  // lib/plugin/mediaController.js
  var __awaiter7 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var AudioContextCollection = class {
    constructor(audioContextFactory) {
      this.audioContextFactory = audioContextFactory;
      this.entries = [];
    }
    acquire(sampleRate) {
      return __awaiter7(this, void 0, void 0, function* () {
        for (const entry2 of this.entries) {
          if (entry2.sampleRate === sampleRate) {
            entry2.references += 1;
            return entry2.audioContext;
          } else if (entry2.sampleRate === void 0) {
            const audioContext = entry2.audioContext;
            if (audioContext.sampleRate === sampleRate) {
              entry2.references += 1;
              return entry2.audioContext;
            }
          }
        }
        console.log("MediaController aquire() new entry()");
        const entry = {
          sampleRate,
          audioContext: yield this.audioContextFactory(sampleRate),
          references: 1
        };
        this.entries.push(entry);
        return entry.audioContext;
      });
    }
    release(audioContext) {
      return __awaiter7(this, void 0, void 0, function* () {
        const index = this.entries.findIndex((entry) => entry.audioContext === audioContext);
        if (index < 0)
          return;
        this.entries[index].references -= 1;
        if (this.entries[index].references <= 0) {
          const context = this.entries[index].audioContext;
          this.entries.splice(index, 1);
          console.log("MediaController release() context.close()");
          yield context.close();
        }
      });
    }
    close() {
      for (const entry of this.entries) {
        entry.audioContext.close();
      }
    }
  };
  var MediaController = class _MediaController {
    create(audioContexts, sink) {
      return __awaiter7(this, void 0, void 0, function* () {
        return new _MediaController(audioContexts, sink);
      });
    }
    constructor(audioContexts, sink) {
      this.audioContexts = audioContexts;
      this.sink = sink;
      this.globalVolume = 1;
      this.playbacks = /* @__PURE__ */ new Map();
      this.setPlaybackStrand = new Strand();
    }
    receivePacket(connectionId, packet) {
      var _a;
      (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.receivePacket(connectionId, packet);
    }
    createAudioPlayback(parameters) {
      return __awaiter7(this, void 0, void 0, function* () {
        let entry = this.playbacks.get(parameters.uid);
        let volume = parameters.volume;
        if (entry === void 0) {
          volume = volume !== null && volume !== void 0 ? volume : 1;
          const playback = new AudioPlayback(this, parameters.uid);
          entry = { id: void 0, volume, playback };
          this.playbacks.set(parameters.uid, entry);
        }
        if (volume !== void 0) {
          entry.playback.setVolume(volume);
        }
        return entry.playback;
      });
    }
    createAudioCapture(parameters) {
      return __awaiter7(this, void 0, void 0, function* () {
        const capture = new AudioCapture(this, parameters);
        yield capture.setDevice(parameters);
        return capture;
      });
    }
    createVideoCapture(ms, customType) {
      return __awaiter7(this, void 0, void 0, function* () {
        const videoCapture = new VideoCapture(this, customType);
        yield videoCapture.setDevice(ms);
        return videoCapture;
      });
    }
    playbackSetDevice(device) {
      return this.setPlaybackStrand.enqueue(() => __awaiter7(this, void 0, void 0, function* () {
        var _a;
        let deviceId = (_a = device === null || device === void 0 ? void 0 : device.device.deviceId) !== null && _a !== void 0 ? _a : "";
        if (deviceId === "default") {
          deviceId = "";
        }
        let audioContext;
        if (this.playbackWorker === void 0) {
          audioContext = yield this.audioContexts.acquire(48e3);
          console.log("playbackSetDevice: this.audioContexts.acquire(48000)");
          this.playbackWorker = yield TC(audioContext);
          this.playbackWorker.setGlobalVolume(this.globalVolume);
        } else {
          console.log("this.playbackWorker.audioContext");
          audioContext = this.playbackWorker.audioContext;
        }
        console.log("playbackSetDevice audioContext: ", audioContext);
        if ((audioContext === null || audioContext === void 0 ? void 0 : audioContext.setSinkId) !== void 0 && device && (audioContext === null || audioContext === void 0 ? void 0 : audioContext.state) === "running") {
          console.log("Browser audioContext.setSinkId");
          yield audioContext.setSinkId(deviceId);
        }
      }));
    }
    playbackSetGlobalVolume(value) {
      var _a;
      this.globalVolume = value === "muted" ? 0 : value;
      (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.setGlobalVolume(this.globalVolume);
    }
    playbackStart(uid, id) {
      var _a;
      const entry = this.playbacks.get(uid);
      if (entry === void 0)
        return;
      if (entry.id !== void 0) {
        this.playbackStop(uid, entry.id);
      }
      entry.id = id;
      (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.addMedias(id.connectionId, [id.mediaId]);
      this.playbackSetVolume(uid, entry.volume);
    }
    playbackStop(uid, id) {
      var _a;
      const entry = this.playbacks.get(uid);
      if (entry === void 0)
        return;
      if (entry.id !== id)
        console.error("playback mediaId out of sync!");
      entry.id = void 0;
      (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.removeMedias(id.connectionId, [id.mediaId]);
    }
    playbackGetActivity(uid) {
      var _a, _b;
      const entry = this.playbacks.get(uid);
      if ((entry === null || entry === void 0 ? void 0 : entry.id) === void 0)
        return Silence;
      return (_b = (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.getActivity(entry.id)) !== null && _b !== void 0 ? _b : Silence;
    }
    playbackSetVolume(uid, volume) {
      var _a;
      const entry = this.playbacks.get(uid);
      if (entry === void 0)
        return;
      entry.volume = volume === "muted" ? 0 : volume;
      if (entry.id !== void 0) {
        (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.setVolume(entry.id, entry.volume);
      }
    }
    playbackGetVolume(uid) {
      var _a;
      const entry = this.playbacks.get(uid);
      return (_a = entry === null || entry === void 0 ? void 0 : entry.volume) !== null && _a !== void 0 ? _a : 1;
    }
    closePlayback(uid) {
      const entry = this.playbacks.get(uid);
      if (entry === void 0)
        return;
      if (entry.id !== void 0)
        this.playbackStop(uid, entry.id);
      this.playbacks.delete(uid);
    }
    close() {
      var _a;
      (_a = this.playbackWorker) === null || _a === void 0 ? void 0 : _a.close();
      this.audioContexts.close();
    }
  };
  var Device = class {
    constructor(device, isDefault = false) {
      this.device = device;
      this.isDefault = isDefault;
    }
    get type() {
      switch (this.device.kind) {
        case "audioinput":
          return "AudioCapture";
        case "audiooutput":
          return "AudioPlayback";
        default:
          assert(false, "not supported device");
      }
    }
    get name() {
      return this.device.label;
    }
  };

  // lib/plugin/config.js
  var HealthCheckTimeout = 1e3;
  var ClockJumpCheckInterval = 1e3;
  var ClockJumpThreshold = 1e4;
  var WebRTCIceTimeout = 3e3;
  var WebRTCTimeout = 1e4;
  var ConnectTimeout = 5e3;
  var MinTokenLifetime = 6e4;
  var MinTokenRefreshInterval = 5e3;
  var ConnectInterval = [0, 100, 200, 200, 500, 1e3, 2e3];

  // lib/plugin/token.js
  var Token = class _Token {
    static parse(token) {
      const segments = token.split(".");
      if (segments.length !== 3)
        return failure("expected three segments");
      const body = fromBase64Url(segments[1]);
      if (body.type === "Failure") {
        return failure(`invalid token; ${body.reason}`);
      }
      let json;
      try {
        json = JSON.parse(body.value);
      } catch (reason) {
        return failure(`invalid token; ${reason}`);
      }
      const parsed = TokenClaimsSchema.safeParse(json);
      if (parsed.success === false) {
        return failure(`invalid token; ${parsed.error}`);
      }
      return success(new _Token(token, parsed.data));
    }
    constructor(text, claims) {
      this.text = text;
      this.claims = claims;
      if (claims.adr !== void 0) {
        try {
          this._Address = new URL(`wss://${claims.adr}`);
        } catch (error) {
          console.error(`address in token(${claims.adr}) can not be parsed; ${error}`);
        }
      }
      if (claims.ups !== void 0) {
        const upstream = _Token.parse(claims.ups);
        if (upstream.type === "Success") {
          this._Upstream = upstream.value;
        } else {
          console.error(`upstream in token can not be parsed; ${upstream.reason}`);
        }
      }
    }
    get timeLeft() {
      if (this.claims.exp === void 0)
        return Infinity;
      return this.claims.exp * 1e3 - Date.now();
    }
    get address() {
      return this._Address;
    }
    get upstream() {
      return this._Upstream;
    }
    get defaultRoomId() {
      if (Array.isArray(this.claims.rid)) {
        return this.claims.rid.length === 1 ? this.claims.rid[0] : void 0;
      } else {
        return this.claims.rid;
      }
    }
    hasAudience(audience) {
      if (this.claims.aud === void 0)
        return true;
      if (Array.isArray(this.claims.aud)) {
        return this.claims.aud.includes(audience);
      } else {
        return this.claims.aud === audience;
      }
    }
    toString() {
      return this.text;
    }
  };

  // lib/plugin/rpcConnection.js
  var __awaiter8 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var RpcConnection = class {
    get closed() {
      return this._Close.signal.aborted;
    }
    get closeSignal() {
      return this._Close.signal;
    }
    constructor(webSocket) {
      this.webSocket = webSocket;
      this._SendQueue = [];
      this._RecvQueue = [];
      this._Requests = /* @__PURE__ */ new Map();
      this._Close = new AbortController();
      this._NextId = 1;
      this.webSocket.addEventListener("open", this._OnWebSocketOpen.bind(this));
      this.webSocket.addEventListener("close", this.close.bind(this));
      this.webSocket.addEventListener("message", this._OnWebSocketMessage.bind(this));
      this.webSocket.binaryType = "arraybuffer";
      this._Close.signal.addEventListener("abort", this._Cleanup.bind(this), {
        once: true
      });
    }
    request(name, properties, timeout) {
      return __awaiter8(this, void 0, void 0, function* () {
        if (this.closed) {
          return Promise.resolve("closed");
        }
        const id = this._NextId;
        const timeoutId = timeout === void 0 ? void 0 : setTimeout(() => this._TimeoutRequest(id), timeout);
        this._Send([0, id, name, properties]);
        return new Promise((accept) => {
          this._Requests.set(id, { accept, timeoutId });
          this._NextId += 1;
        });
      });
    }
    notify(name, properties) {
      if (!this.closed) {
        this._Send([2, name, properties]);
      }
    }
    recv() {
      if (!this.closed) {
        return new Promise((accept) => this._RecvQueue.push(accept));
      } else {
        return Promise.resolve("closed");
      }
    }
    close() {
      console.log("Eyvor RpcConnection.close() url:", this.webSocket.url);
      this._Close.abort();
    }
    _TimeoutRequest(requestId) {
      const request = this._Requests.get(requestId);
      if (request === void 0)
        return;
      this._Requests.delete(requestId);
      clearTimeout(request.timeoutId);
      request.accept("timeout");
    }
    _Send(message) {
      this.webSocket.send(msgpackEncode(message));
    }
    _OnWebSocketOpen(ev) {
      console.log("Eyvor RpcConnection._OnWebSocketOpen url: ", this.webSocket.url);
      for (const data in this._SendQueue) {
        this.webSocket.send(data);
      }
      this._SendQueue.length = 0;
    }
    _OnWebSocketMessage(ev) {
      const rpc = parseRpc(ev.data);
      if (rpc.type !== "Success") {
        console.log("Eyvor RpcConnection._OnWebSocketMessage() rpc: ", rpc);
        this.webSocket.close();
        return;
      }
      switch (rpc.value[0]) {
        case 0:
          this._Send([1, rpc.value[1], "not supported", void 0]);
          break;
        case 1:
          this._OnResponse(rpc.value[1], rpc.value[2], rpc.value[3]);
          break;
        case 2:
          this._OnEvent(rpc.value[1], rpc.value[2]);
          break;
      }
    }
    _OnResponse(id, error, result) {
      const request = this._Requests.get(id);
      if (request === void 0)
        return;
      clearTimeout(request.timeoutId);
      request.accept(error === null ? success(result) : failure(error));
    }
    _OnEvent(name, properties) {
      console.log("event", name, properties);
      const receiver = this._RecvQueue.shift();
      if (receiver !== void 0) {
        receiver({ name, properties });
      }
    }
    _Cleanup() {
      console.log(`Eyvor RpcConnection._Cleanup(): ${this.webSocket.url}`);
      for (const request of this._Requests.values()) {
        clearTimeout(request.timeoutId);
        request.accept("closed");
      }
      this._Requests.clear();
      for (const accept of this._RecvQueue) {
        accept("closed");
      }
      this._RecvQueue.length = 0;
      this._SendQueue.length = 0;
      this.webSocket.close();
    }
  };
  var TypedRpcConnection = class extends RpcConnection {
    constructor(webSocket, _Commands, _Events) {
      super(webSocket);
      this._Commands = _Commands;
      this._Events = _Events;
    }
    request(name, properties, timeout) {
      const _super = Object.create(null, {
        request: { get: () => super.request }
      });
      return __awaiter8(this, void 0, void 0, function* () {
        properties = this._Commands[name].request.parse(properties);
        const response = yield timeout !== void 0 ? _super.request.call(this, name, properties, timeout) : _super.request.call(this, name, properties);
        if (response === "closed" || response === "timeout" || response.type === "Failure") {
          return response;
        }
        const parsed = this._Commands[name].response.safeParse(response.value);
        if (parsed.success) {
          response.value = parsed.data;
          return response;
        } else {
          return failure(`response schema failed validation: ${parsed.error}`);
        }
      });
    }
    notify(name, properties) {
      properties = this._Commands[name].request.parse(properties);
      super.notify(name, properties);
    }
    recv() {
      const _super = Object.create(null, {
        recv: { get: () => super.recv }
      });
      return __awaiter8(this, void 0, void 0, function* () {
        const event = yield _super.recv.call(this);
        if (event === "closed")
          return event;
        const parsed = parseRpcMessage(this._Events, event);
        if (parsed !== void 0) {
          return parsed;
        }
        if (!isKnownRpcMessage(this._Events, event.name)) {
          console.warn(`dropping unknown event ${event.name}`);
        } else {
          console.error(`schema validation for ${event.name} failed; closing connection`);
          this.close();
        }
        return "closed";
      });
    }
  };
  function parseRpc(buffer) {
    try {
      return success(MessagePackRpcSchema.parse(msgpackDecode(buffer)));
    } catch (error) {
      return failure(String(error));
    }
  }
  function parseRpcMessage(events, rpc) {
    if (!isKnownRpcMessage(events, rpc.name))
      return void 0;
    const parsed = events[rpc.name].safeParse(rpc.properties);
    if (!parsed.success) {
      return void 0;
    }
    return {
      name: rpc.name,
      properties: parsed.data
    };
  }
  function isKnownRpcMessage(events, name) {
    return name in events;
  }

  // lib/plugin/websocket.js
  var __awaiter9 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function connect(url, signal) {
    return __awaiter9(this, void 0, void 0, function* () {
      const start = performance.now();
      let connection = failure("no connection was attempted");
      for (let failures = 0; failures < ConnectInterval.length && !signal.aborted; failures++) {
        const nextReconnectAt = start + whenToConnect(failures);
        if ((yield abortableSleep(nextReconnectAt - performance.now(), signal)) === "aborted") {
          return failure("aborted");
        }
        connection = yield connectOnce(url, signal);
        if (connection.type === "Success") {
          return connection;
        }
      }
      return connection;
    });
  }
  function connectOnce(url, signal) {
    return __awaiter9(this, void 0, void 0, function* () {
      let webSocket;
      try {
        webSocket = new WebSocket(url);
      } catch (reason) {
        return failure(`unable to create websocket; ${reason}`);
      }
      const abort = new AbortController();
      const onOpen = new Promise((accept) => webSocket.addEventListener("open", () => accept(success(webSocket)), {
        signal: abort.signal
      }));
      const onClose = new Promise((accept) => webSocket.addEventListener("close", (event) => accept(failure(event.reason)), { signal: abort.signal }));
      const onAbort = new Promise((accept) => signal.addEventListener("abort", () => () => {
        console.log("Eyvor connectOnce onAbort: ", url);
        accept(failure("aborted"));
      }, {
        signal: abort.signal
      }));
      const result = yield Promise.race([onOpen, onClose, onAbort]);
      abort.abort();
      return result;
    });
  }
  function whenToConnect(failures) {
    const past_connects = ConnectInterval.slice(0, failures).reduce((a, b2) => a + b2, 0);
    const interval = ConnectInterval[failures] * Math.random();
    return past_connects + interval;
  }

  // lib/plugin/mainConnection.js
  var __awaiter10 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var MainConnection = class _MainConnection {
    static create(id, url, onDatagram, signal) {
      return __awaiter10(this, void 0, void 0, function* () {
        if (signal.aborted)
          return failure("aborted");
        const webSocketUrl = extendUrl(url, "main");
        if (webSocketUrl.type !== "Success")
          return webSocketUrl;
        const webSocket = yield connect(webSocketUrl.value, signal);
        if (webSocket.type !== "Success")
          return webSocket;
        const connection = new TypedRpcConnection(webSocket.value, MainCommandsRpc, MainNotificationsRpc);
        try {
          return success(new _MainConnection(id, url, onDatagram, connection, new RTCPeerConnection()));
        } catch (reason) {
          connection.close();
          return failure(`unable to create webrtc connection; ${reason}`);
        }
      });
    }
    get closePromise() {
      return this._ClosePromise;
    }
    get closeSignal() {
      return this.connection.closeSignal;
    }
    get closed() {
      return this.connection.closed;
    }
    webRtcReady() {
      return __awaiter10(this, void 0, void 0, function* () {
        const isReady = () => {
          switch (this.webRtc.connectionState) {
            case "connected":
              return true;
            case "failed":
            case "closed":
              return false;
            default:
              return void 0;
          }
        };
        const result = isReady();
        if (result !== void 0)
          return result;
        return new Promise((resolve) => {
          const onConnectionStateChanged = () => {
            const result2 = isReady();
            if (result2 !== void 0) {
              this.webRtc.removeEventListener("connectionstatechange", onConnectionStateChanged);
              resolve(result2);
            }
          };
          this.webRtc.addEventListener("connectionstatechange", onConnectionStateChanged);
        });
      });
    }
    constructor(id, url, onDatagram, connection, webRtc) {
      this.id = id;
      this.url = url;
      this.onDatagram = onDatagram;
      this.connection = connection;
      this.webRtc = webRtc;
      this._PeerIdMap = /* @__PURE__ */ new WeakMap();
      this._LocalVideos = /* @__PURE__ */ new Map();
      this._RemoteVideos = /* @__PURE__ */ new Map();
      this._Negotiation = { requested: false, running: false };
      this._awaitingRemoteTracks = /* @__PURE__ */ new Map();
      this.closeSignal.addEventListener("abort", () => this._CleanUp(), {
        once: true
      });
      this._ClosePromise = new Promise((accept) => {
        this.closeSignal.addEventListener("abort", () => {
          console.log("Eyvor MainConnection _ClosePromise aborted");
          accept("closed");
        }, {
          once: true
        });
      });
      this._AudioChannel = this.webRtc.createDataChannel("audio", {
        id: 2,
        negotiated: true,
        ordered: false,
        maxRetransmits: 0
      });
      this._AudioChannel.binaryType = "arraybuffer";
      this._AudioChannel.onmessage = (event) => onDatagram(this.id, new Uint8Array(event.data));
      this.webRtc.onicecandidate = this._OnIceCandidate.bind(this);
      this.webRtc.onconnectionstatechange = () => this._OnWebRtcStatusChanged();
      this.webRtc.ontrack = this.onTrack.bind(this);
      this._SendOffer();
      this._readWebRtcUpdate();
    }
    close() {
      console.trace("MainConnection close(): ", this._PeerIdMap);
      this.connection.close();
    }
    joinRoom(token, roomId, userData, position) {
      return __awaiter10(this, void 0, void 0, function* () {
        console.log("Eyvor MainConnection.joinRoom()");
        const response = yield this.connection.request("JoinRoom", {
          token: String(token),
          room_id: roomId,
          user_data: userData,
          position
        });
        if (response === "closed" || response.type === "Failure")
          return response;
        const responseValue = response.value;
        if (!("token" in responseValue)) {
          return failure("JoinRoom responded without token");
        }
        const url = extendUrl(this.url, `room?token=${responseValue.token}`);
        if (url.type === "Failure")
          return url;
        const webSocket = yield connect(url.value, this.closeSignal);
        if (webSocket.type === "Success") {
          this._PeerIdMap.set(webSocket.value, responseValue.peer_id);
        }
        return webSocket;
      });
    }
    getReconnectToken(webSocket) {
      return __awaiter10(this, void 0, void 0, function* () {
        const peerId = this._PeerIdMap.get(webSocket);
        if (peerId === void 0) {
          return failure("the webSocket is not part of this connection");
        }
        const response = yield this._Request("RequestReconnectToken", {
          peer_id: peerId
        });
        if (response.type === "Failure")
          return response;
        return Token.parse(response.value);
      });
    }
    sendDatagram(datagram) {
      if (this._AudioChannel.readyState === "open") {
        this._AudioChannel.send(datagram);
      }
    }
    healthCheck() {
      return __awaiter10(this, void 0, void 0, function* () {
        const response = yield this._Request("Ping", {}, HealthCheckTimeout);
        const success2 = response !== "timeout" && response.type === "Success";
        console.log("Eyvor healthCheck() success:", success2);
        if (!success2)
          this.close();
        return success2;
      });
    }
    _Request(name, properties, timeout) {
      return __awaiter10(this, void 0, void 0, function* () {
        const result = yield timeout === void 0 ? this.connection.request(name, properties) : this.connection.request(name, properties, timeout);
        if (result === "closed")
          return failure("connection lost");
        return result;
      });
    }
    _readWebRtcUpdate() {
      return __awaiter10(this, void 0, void 0, function* () {
        while (true) {
          console.log("Eyvor _readWebRtcUpdate()");
          const event = yield this.connection.recv();
          if (event === "closed")
            break;
          if (event.name === "WebRtcUpdate") {
            this._OnWebRtcUpdate(event.properties);
          }
        }
        this.close();
      });
    }
    _SendOffer() {
      return __awaiter10(this, void 0, void 0, function* () {
        var _a;
        this.ensureTransceivers();
        try {
          const offer = yield this.webRtc.createOffer();
          assert(offer.type === "offer" && offer.sdp, "generated broken webrtc offer");
          yield this.webRtc.setLocalDescription(offer);
          const sdp = (_a = offer.sdp) !== null && _a !== void 0 ? _a : "";
          const media_map = [];
          for (const [media_id, { transceiver }] of this._LocalVideos) {
            media_map.push([media_id, transceiver.mid]);
          }
          console.log("Eyvor sendOffer() media_map: ", media_map);
          yield this._Request("WebRtcUpdate", {
            kind: "Sdp",
            type: "Offer",
            sdp,
            media_map
          });
        } catch (_b) {
          console.error("RTCPeerConnection failed creating an offer");
        }
      });
    }
    _OnWebRtcStatusChanged() {
      console.log(`webrtc ${this.webRtc.connectionState}`);
      switch (this.webRtc.connectionState) {
        case "closed":
          console.log("Eyvor MainConnection._OnWebRtcStatusChanged() closed");
        case "failed":
          console.log("Eyvor MainConnection._OnWebRtcStatusChanged() failed");
          this.close();
          break;
        case "connected":
          console.log("Eyvor MainConnection._OnWebRtcStatusChanged() connected");
          clearTimeout(this._WebRtcIceTimeout);
          this._WebRtcIceTimeout = void 0;
          clearTimeout(this._WebRtcTimeout);
          this._WebRtcTimeout = void 0;
          break;
        case "disconnected":
          console.log("'Eyvor MainConnection._OnWebRtcStatusChanged() disconnected");
        default:
          if (this._WebRtcIceTimeout === void 0) {
            this._WebRtcIceTimeout = setTimeout(() => {
              console.log("Eyvor MainConnection._OnWebRtcStatusChanged() _WebRtcIceTimeout  was reached");
              this.webRtc.restartIce();
              this._WebRtcIceTimeout = void 0;
            }, WebRTCIceTimeout);
          }
          if (this._WebRtcTimeout === void 0) {
            this._WebRtcTimeout = setTimeout(() => {
              console.log("Eyvor MainConnection._OnWebRtcStatusChanged() _WebRtcTimeout was reached");
              this.close();
            }, WebRTCTimeout);
          }
          break;
      }
    }
    _OnWebRtcUpdate(update) {
      switch (update.kind) {
        case "Sdp":
          this._UpdateRemoteSdp(update);
          break;
        case "Trickle":
          this._AddIceCandidate(update);
          break;
        case "TrickleFinished":
          this.webRtc.addIceCandidate(void 0);
          break;
      }
    }
    _UpdateRemoteSdp(update) {
      return __awaiter10(this, void 0, void 0, function* () {
        var _a;
        console.log("Eyvor _UpdateRemoteSdp update.media_map: ", update.media_map);
        console.log("Eyvor _UpdateRemoteSdp _RemoteVideos: ", this._RemoteVideos);
        let remoteChanged = false;
        for (const [media_id, mid] of update.media_map) {
          const entry = this._RemoteVideos.get(media_id);
          if ((entry === null || entry === void 0 ? void 0 : entry.state) === "Requested") {
            remoteChanged = true;
            this._RemoteVideos.set(media_id, {
              state: "Mapped",
              mid,
              promise: entry.promise
            });
          }
        }
        const type = update.type === "Answer" ? "answer" : "offer";
        console.log("Eyvor _UpdateRemoteSdp remoteChanged: ", remoteChanged);
        (_a = this._ResolveOffer) === null || _a === void 0 ? void 0 : _a.call(this, true);
        yield this.webRtc.setRemoteDescription({ type, sdp: update.sdp });
      });
    }
    _AddIceCandidate(candidate) {
      var _a, _b, _c;
      const candidateInit = {
        candidate: candidate.candidate,
        sdpMid: (_a = candidate.spd_mid) !== null && _a !== void 0 ? _a : void 0,
        sdpMLineIndex: (_b = candidate.spd_mline_index) !== null && _b !== void 0 ? _b : void 0,
        usernameFragment: (_c = candidate.username_fragment) !== null && _c !== void 0 ? _c : void 0
      };
      if (candidateInit.sdpMid === void 0 && candidateInit.sdpMLineIndex === void 0) {
        candidateInit.sdpMid = "0";
      }
      this.webRtc.addIceCandidate(candidateInit);
    }
    _OnIceCandidate(event) {
      return __awaiter10(this, void 0, void 0, function* () {
        if (event.candidate) {
          const { candidate, sdpMid, sdpMLineIndex, usernameFragment } = event.candidate;
          this._Request("WebRtcUpdate", {
            kind: "Trickle",
            candidate,
            spd_mid: sdpMid !== null && sdpMid !== void 0 ? sdpMid : void 0,
            spd_mline_index: sdpMLineIndex !== null && sdpMLineIndex !== void 0 ? sdpMLineIndex : void 0,
            username_fragment: usernameFragment !== null && usernameFragment !== void 0 ? usernameFragment : void 0
          });
        } else {
          this._Request("WebRtcUpdate", { kind: "TrickleFinished" });
        }
      });
    }
    ensureTransceivers() {
      const needed = this._LocalVideos.size + this._RemoteVideos.size;
      const available = this.webRtc.getTransceivers().length;
      for (let i = available; i < needed; i++) {
        this.webRtc.addTransceiver("video");
      }
    }
    startLocalVideo(mediaId, track) {
      return __awaiter10(this, void 0, void 0, function* () {
        assert(!this._LocalVideos.has(mediaId), `No LocalVideo with mediaID ${mediaId}`);
        console.log("Eyvor startLocalVideo(): ", mediaId);
        let transceiver = this.webRtc.getTransceivers().find((transceiver2) => transceiver2.sender.track === track);
        if (transceiver) {
          console.log("There is already a transceiver");
          yield transceiver.sender.replaceTrack(track);
        } else {
          const sender = this.webRtc.addTrack(track);
          transceiver = this.webRtc.getTransceivers().find((transceiver2) => transceiver2.sender === sender);
          assert(transceiver, "");
        }
        this._LocalVideos.set(mediaId, { transceiver });
        this.requestNegotiation(false);
      });
    }
    stopLocalVideo(mediaId) {
      const localVideo = this._LocalVideos.get(mediaId);
      if (!localVideo)
        return;
      localVideo.transceiver.sender.track.enabled = false;
      this._LocalVideos.delete(mediaId);
      this.requestNegotiation(false);
    }
    startRemoteVideo(mediaId) {
      console.log("Eyvor startRemoteVideo() mediaId: ", mediaId);
      this.requestNegotiation(true);
      return new Promise((resolve, reject) => {
        this._RemoteVideos.set(mediaId, {
          state: "Requested",
          promise: { resolve, reject }
        });
      });
    }
    stopRemoteVideo(mediaId) {
      const video = this._RemoteVideos.get(mediaId);
      if (!video)
        return;
      this._RemoteVideos.delete(mediaId);
      if (video.state !== "Active") {
        video.promise.reject(new Error("video stopped"));
      }
      this.requestNegotiation(false);
    }
    onTrack(event) {
      console.log("Eyvor onTrack() _RemoteVideos: ", this._RemoteVideos);
      const entry = Array.from(this._RemoteVideos).find((video2) => {
        return video2[1].state === "Mapped" && video2[1].mid === event.transceiver.mid;
      });
      console.log("Eyvor onTrack entry: ", entry);
      if (entry === void 0) {
        console.warn(`unexpected track(mid: ${event.transceiver.mid})`);
        return;
      }
      const [media_id, video] = entry;
      assert(video.state === "Mapped", "");
      this._RemoteVideos.set(media_id, {
        state: "Active",
        transceiver: event.transceiver
      });
      event.track.onended = () => console.log(`track ended ${event.transceiver.mid}`);
      video.promise.resolve(event.track);
    }
    requestNegotiation(waitForAnswer) {
      console.log("Eyvor requestNegotiation()");
      this._Negotiation.requested = true;
      if (this._Negotiation.running)
        return;
      this._Negotiation.running = true;
      setTimeout(() => __awaiter10(this, void 0, void 0, function* () {
        this._Negotiation.requested = false;
        try {
          console.log("Eyvor requestNegotiation() sendOffer()");
          yield this._SendOffer();
          if (waitForAnswer) {
            yield new Promise((resolve) => {
              this._ResolveOffer = resolve;
            });
          }
        } finally {
          console.log("Eyvor requestNegotiation() finally");
          this._Negotiation.running = false;
          const retry = Array.from(this._RemoteVideos).find((video) => {
            return video[1].state === "Requested";
          });
          console.log("Eyvor requestNegotiation() retry: ", retry);
          if (this._Negotiation.requested) {
            this.requestNegotiation(waitForAnswer);
          }
        }
      }));
    }
    _CleanUp() {
      console.debug(`${this.url} closed`);
      this.connection.close();
      this.webRtc.close();
      clearInterval(this._PeriodicHealthCheck);
      clearTimeout(this._WebRtcIceTimeout);
      clearTimeout(this._WebRtcTimeout);
    }
  };

  // lib/plugin/connectionPool.js
  var __awaiter11 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var ConnectionPool = class {
    get closed() {
      return this._Close.signal.aborted;
    }
    constructor(onDatagram) {
      this.onDatagram = onDatagram;
      this._LastConnectionId = 0;
      this._ConnectionsByUrl = /* @__PURE__ */ new Map();
      this._ConnectionsById = /* @__PURE__ */ new Map();
      this._Close = new AbortController();
      let lastCheckAt = Date.now();
      const clockJumpDetector = setInterval(() => {
        const elapsed = Math.abs(Date.now() - lastCheckAt);
        if (elapsed > ClockJumpThreshold) {
          console.log("ConnectionPool clockJumpDetector healthcheck()");
          this.checkHealth();
        }
        lastCheckAt = Date.now();
      }, ClockJumpCheckInterval);
      addEventListener("offline", () => this.checkHealth(), {
        signal: this._Close.signal
      });
      this._Close.signal.addEventListener("abort", () => {
        clearInterval(clockJumpDetector);
        for (const entry of this._ConnectionsById.values()) {
          if (entry.status === "ready") {
            entry.connection.close();
          }
        }
        this._ConnectionsById.clear();
        this._ConnectionsByUrl.clear();
      }, { once: true });
    }
    sendDatagram(connectionId, packet) {
      const connection = this._ConnectionsById.get(connectionId);
      if (connection !== void 0 && connection.status === "ready") {
        connection.connection.sendDatagram(packet);
      }
    }
    acquireConnection(url, signal) {
      return __awaiter11(this, void 0, void 0, function* () {
        console.log("Eyvor ConnectionPool.acquireConnection() url: ", url);
        yield nextTick();
        if (this.closed)
          return "closed";
        let entry = this._ConnectionsByUrl.get(url);
        if (entry === void 0 || entry.status === "ready" && entry.connection.closed) {
          const id = this._LastConnectionId++;
          console.log("Eyvor ConnectionPool.acquireConnection() create new connection with id: ", id);
          const promise = MainConnection.create(id, url, this.onDatagram, signal);
          entry = { status: "init", id, promise, references: 1 };
          this._ConnectionsByUrl.set(url, entry);
          this._ConnectionsById.set(id, entry);
          const connection = yield promise;
          console.log("Eyvor ConnectionPool.acquireConnection() connection resolved: ", connection);
          if (connection.type !== "Success") {
            this._ConnectionsByUrl.delete(url);
            this._ConnectionsById.delete(id);
            return connection;
          }
          entry = {
            status: "ready",
            connection: connection.value,
            references: entry.references
          };
          this._ConnectionsByUrl.set(url, entry);
          this._ConnectionsById.set(id, entry);
          return success(entry.connection);
        } else if (entry.status === "init") {
          entry.references += 1;
          const onAbort = new Promise((accept) => signal.addEventListener("abort", () => accept(), { once: true }));
          const result = yield Promise.race([entry.promise, onAbort]);
          console.log("Eyvor ConnectionPool.acquireConnection() had connection but was init result", result);
          if (result === void 0)
            return failure("aborted");
          return result;
        } else {
          console.log("Eyvor ConnectionPool.acquireConnection() had connection and return it", entry);
          entry.references += 1;
          return success(entry.connection);
        }
      });
    }
    releaseConnection(connection) {
      const entry = this._ConnectionsById.get(connection.id);
      if (entry === void 0)
        return;
      if (entry.status === "init") {
        console.error("released connection before it was acquired!");
        return;
      }
      entry.references -= 1;
      if (entry.references === 0) {
        entry.connection.close();
        this._ConnectionsByUrl.delete(connection.url);
        this._ConnectionsById.delete(connection.id);
      }
    }
    checkHealth() {
      return __awaiter11(this, void 0, void 0, function* () {
        yield Promise.all(Array.from(this._ConnectionsById.values()).map((entry) => entry.status === "ready" ? entry.connection.healthCheck() : void 0));
      });
    }
    close() {
      this._Close.abort();
    }
  };

  // lib/plugin/roomConnection.js
  var __awaiter12 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var RoomConnection = class {
    get token() {
      return this._Token;
    }
    get userData() {
      return this._UserData;
    }
    get position() {
      return this._Position;
    }
    get closed() {
      return this._Close.signal.aborted;
    }
    get mainConnection() {
      return this._MainConnection;
    }
    constructor(connectionPool, onEvent, gateway, token, roomId, userData, position) {
      this.connectionPool = connectionPool;
      this.onEvent = onEvent;
      this.gateway = gateway;
      this.roomId = roomId;
      this._Close = new AbortController();
      this._ConnectionFailures = 0;
      this._FailureLimit = 5;
      this._LastTokenRenew = performance.now();
      this._Closed = new Promise((accept) => this._Close.signal.addEventListener("abort", () => accept("closed"), {
        once: true
      }));
      this._Token = token;
      this._UserData = userData;
      this._Position = position;
      this._Main().then(({ reason }) => console.debug(`room closed; ${reason}`));
    }
    request(name, properties) {
      return __awaiter12(this, void 0, void 0, function* () {
        if (this._RoomConnection === void 0) {
          return failure("currently not connected");
        }
        const response = yield this._RoomConnection.request(name, properties);
        if (response !== "closed" && response.type === "Success") {
          this._HandleRequests(name, properties, response.value);
        }
        return response;
      });
    }
    typedRequest(name, properties) {
      return __awaiter12(this, void 0, void 0, function* () {
        const schema = RoomCommandsRpc[name];
        const response = yield this.request(name, properties);
        if (response === "closed" || response.type === "Failure")
          return response;
        const parsed = schema.response.safeParse(response.value);
        if (parsed.success)
          return success(parsed.data);
        else {
          return failure(`received invalid response from ${name}; ${parsed.error}`);
        }
      });
    }
    close() {
      this._Close.abort();
    }
    get renewTokenIn() {
      const earliest = this._LastTokenRenew - performance.now() + MinTokenRefreshInterval;
      const latest = this._Token.timeLeft - MinTokenLifetime;
      return Math.max(earliest, latest);
    }
    _Main() {
      return __awaiter12(this, void 0, void 0, function* () {
        var _a;
        let closeReason = "unable to establish connection";
        while (this._Close.signal.aborted === false) {
          console.log("Eyvor RoomConnection _Main loop");
          const result = yield this._ConnectToServer();
          if (result.type === "Failure") {
            closeReason = result.reason;
            break;
          }
          (_a = this._RoomConnection) === null || _a === void 0 ? void 0 : _a.close();
          this._RoomConnection = void 0;
          this._MainConnection = void 0;
          if (this.gateway !== void 0 && this._Token.hasAudience("gateway")) {
            this._ChangeStatus("Joining", `requesting new token from ${this.gateway}`);
            const newToken = yield contactGateway(this.gateway, this._Token, this._Close.signal);
            if (newToken.type === "Success") {
              if (newToken.value !== "rejected") {
                this._Token = newToken.value;
                continue;
              } else {
                closeReason = "invalid or expired token";
                break;
              }
            }
          }
          if (this._Token.timeLeft <= 0) {
            closeReason = "unable to use expired token";
            break;
          }
          yield sleep(1e3);
        }
        this._ChangeStatus("Closed", this._Close.signal.aborted ? "user requested" : closeReason);
        this.close();
        return failure(closeReason);
      });
    }
    _ConnectToServer() {
      return __awaiter12(this, void 0, void 0, function* () {
        let token = this._Token;
        while (token.upstream !== void 0) {
          token = token.upstream;
        }
        if (!token.hasAudience("sfu") || token.address === void 0) {
          return success("continue");
        }
        this._ChangeStatus("Joining", `connecting to ${token.address}`);
        if (this._MainConnection === void 0 || this._MainConnection.closed || this._MainConnection.url !== token.address) {
          if (this._MainConnection) {
            this.connectionPool.releaseConnection(this._MainConnection);
          }
          const mainConnection = yield this.connectionPool.acquireConnection(token.address, this._Close.signal);
          if (mainConnection === "closed")
            return failure("connection pool closed");
          if (mainConnection.type === "Failure") {
            if (this._ConnectionFailures < this._FailureLimit) {
              this._ConnectionFailures++;
              return failure(`Connection failed; ${mainConnection.reason}`);
            }
            this._ChangeStatus("Joining", `connection failed; ${mainConnection.reason}`);
            return success("continue");
          }
          this._MainConnection = mainConnection.value;
        }
        const result = yield Promise.race([
          Promise.all([
            this._MainConnection.joinRoom(token, this.roomId, this.userData, this.position)
          ]),
          sleep(ConnectTimeout, "timeout"),
          this._Closed
        ]);
        if (result === "closed")
          return failure("room connection closed");
        if (result !== "timeout") {
          const [websocket] = result;
          if (websocket === "closed")
            return success("continue");
          if (websocket.type === "Failure") {
            return failure(`unable to join room; ${websocket.reason}`);
          }
          this._RoomConnection = new RpcConnection(websocket.value);
          this._ChangeStatus("Joined", `joined room ${this.roomId} on ${websocket.value.url}`);
          this._MainConnection.webRtcReady();
          yield this._HandleConnection(this._MainConnection, websocket.value);
        }
        return success("continue");
      });
    }
    _ChangeStatus(status, message) {
      const properties = {
        status,
        message
      };
      this.onEvent("RoomStatusChanged", properties);
    }
    _HandleConnection(main, webSocket) {
      return __awaiter12(this, void 0, void 0, function* () {
        if (this._RoomConnection === void 0)
          return;
        const selector = new Selector([
          () => sleep(this.renewTokenIn, "renewToken"),
          () => sleep(500, "tick"),
          () => __awaiter12(this, void 0, void 0, function* () {
            var _a;
            return yield (_a = this._RoomConnection) === null || _a === void 0 ? void 0 : _a.recv();
          }),
          () => this._Closed,
          () => main.closePromise
        ]);
        while (true) {
          const value = yield selector.next();
          switch (value) {
            case void 0:
            case "closed":
              console.log("Eyvor RoomConnection _HandleConnection closed");
              webSocket.close();
              return;
            case "renewToken":
              this._RenewToken(main, webSocket);
              break;
            case "tick":
              break;
            default:
              this._HandleEvent(value);
              break;
          }
        }
      });
    }
    _HandleEvent(event) {
      this.onEvent(event.name, event.properties);
    }
    _HandleRequests(name, properties, response) {
      switch (name) {
        case "SetPeerPosition": {
          const setPeerPosition = RoomCommandsRpc.SetPeerPosition.request.safeParse(properties);
          if (setPeerPosition.success) {
            const value = setPeerPosition.data.position;
            this._Position = value.length === 2 ? [value[0], value[1], 0] : value;
          } else {
            console.warn("unable to process SetPeerPosition command");
          }
          break;
        }
        case "UpdatePeer": {
          const updatePeer = RoomCommandsRpc.UpdatePeer.request.safeParse(properties);
          if (updatePeer.success) {
            this._UserData = updatePeer.data.user_data;
          } else {
            console.warn("unable to process UpdatePeer command");
          }
          break;
        }
      }
    }
    _RenewToken(main, webSocket) {
      return __awaiter12(this, void 0, void 0, function* () {
        this._LastTokenRenew = performance.now();
        if (this.token.timeLeft > MinTokenLifetime)
          return;
        const response = yield main.getReconnectToken(webSocket);
        if (response.type === "Success") {
          if (response.value.timeLeft > this._Token.timeLeft) {
            this._Token = response.value;
          }
        } else {
          console.warn(`${main.url} rejected reconnect token request; ${response.reason}`);
        }
      });
    }
  };
  function contactGateway(gateway, token, signal) {
    return __awaiter12(this, void 0, void 0, function* () {
      var _a, _b;
      try {
        const response = yield fetch(gateway, {
          body: '{"jsonrpc":"2.0","id":1,"method":"Connect","params":{}}',
          method: "POST",
          headers: {
            "content-type": "application/json",
            authorization: `Bearer ${token}`
          },
          signal
        });
        const body = yield response.json();
        if ("result" in body) {
          return Token.parse(body.result.token);
        } else {
          console.error(`gateway rejected token; ${(_b = (_a = body.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : "malformed response"}`);
          return success("rejected");
        }
      } catch (error) {
        return failure(String(error));
      }
    });
  }

  // lib/plugin/medias/video-playback.js
  var VideoPlayback = class {
    constructor(uid, customType) {
      this.uid = uid;
      this.customType = customType;
    }
    /**
     * Sets the MediaStream once.
     */
    setMediaStream(ms) {
      if (this._mediaStream)
        return;
      this._mediaStream = ms;
    }
    get mediaStream() {
      return this._mediaStream;
    }
    close() {
      throw new Error("Method not implemented.");
    }
  };

  // lib/plugin/index.js
  var __awaiter13 = function(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var WebPlugin = class _WebPlugin {
    get playbackVolume() {
      return this._PlaybackVolume;
    }
    static create(audioContextFactory) {
      return __awaiter13(this, void 0, void 0, function* () {
        let audioController;
        const pool = new ConnectionPool((connectionId, packet) => audioController.receivePacket(connectionId, packet));
        const audioContexts = new AudioContextCollection(audioContextFactory);
        audioController = new MediaController(audioContexts, pool.sendDatagram.bind(pool));
        return new _WebPlugin(pool, audioController);
      });
    }
    constructor(connectionPool, audioController) {
      this.version = "1";
      this._NextRoomId = 0;
      this._PlaybackVolume = 1;
      this._ConnectionPool = connectionPool;
      this._MediaController = audioController;
    }
    joinRoom(parameters) {
      return new Room(this._NextRoomId++, this._ConnectionPool, parameters);
    }
    createAudioPlayback(parameters) {
      return __awaiter13(this, void 0, void 0, function* () {
        return this._MediaController.createAudioPlayback(parameters);
      });
    }
    createAudioCapture(parameters) {
      return __awaiter13(this, void 0, void 0, function* () {
        return this._MediaController.createAudioCapture(parameters);
      });
    }
    createVideoCapture(ms, customType) {
      return __awaiter13(this, void 0, void 0, function* () {
        return this._MediaController.createVideoCapture(ms, customType);
      });
    }
    createVideoPlayback(parameters) {
      return __awaiter13(this, void 0, void 0, function* () {
        return new VideoPlayback(parameters.uid, parameters.customType);
      });
    }
    enumerateDevices() {
      return enumerateDevices();
    }
    setOutputVolume(volume) {
      this._MediaController.playbackSetGlobalVolume(volume);
    }
    setOutputDevice(device) {
      return __awaiter13(this, void 0, void 0, function* () {
        yield this._MediaController.playbackSetDevice(device.device);
      });
    }
    close() {
      this._MediaController.close();
      this._ConnectionPool.close();
    }
  };
  var Room = class {
    get mainConnection() {
      return this._Connection.mainConnection;
    }
    constructor(id, connectionPool, parameters) {
      var _a, _b, _c;
      this._Captures = /* @__PURE__ */ new Map();
      this._Playbacks = /* @__PURE__ */ new Map();
      this._Peers = /* @__PURE__ */ new Map();
      this._AvailableMediaIds = [];
      const { gateway, onEvent } = parameters;
      const token = unwrap(Token.parse(parameters.token));
      const roomId = (_a = parameters.roomId) !== null && _a !== void 0 ? _a : token.defaultRoomId;
      const userData = (_b = parameters.userData) !== null && _b !== void 0 ? _b : new Uint8Array(0);
      const position = (_c = parameters.position) !== null && _c !== void 0 ? _c : [0, 0, 0];
      assert(roomId !== void 0, "room id required for multi-room-tokens");
      this._Id = id;
      this._OnEvent = onEvent;
      this._Connection = new RoomConnection(connectionPool, this._HandleEvent.bind(this), gateway ? new URL(gateway) : void 0, token, roomId, userData, position);
    }
    get token() {
      return this._Connection.token;
    }
    request(method, properties) {
      return this._Connection.request(method, properties);
    }
    link(media) {
      return __awaiter13(this, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        if (media instanceof AudioPlayback) {
          const entry = (_a = this._Playbacks.get(media.uid)) !== null && _a !== void 0 ? _a : {
            media: void 0,
            playback: void 0
          };
          if (entry.playback !== void 0) {
            this.unlink(entry.playback);
          }
          if (entry.media !== void 0) {
            media.start(entry.media);
          }
          entry.playback = media;
          this._Playbacks.set(media.uid, entry);
        } else if (media instanceof AudioCapture) {
          let entry = this._Captures.get(media);
          if (entry) {
            this.unlink(media);
          }
          const mediaId = this.mainConnection !== void 0 && this._AvailableMediaIds.shift();
          entry = {
            media: mediaId ? {
              connectionId: this.mainConnection.id,
              mediaId
            } : void 0,
            uid: generateUUID()
          };
          this._Captures.set(media, entry);
          if (entry.media !== void 0) {
            media.start(this._Connection, entry.media, entry.uid);
          }
        } else if (media instanceof VideoCapture) {
          console.log("Eyvor room.link() VideoCapture");
          let mediaEntry = this._Captures.get(media);
          if (mediaEntry) {
            this.unlink(media);
          }
          if (media.mediaStream) {
            const mediaId = this.mainConnection !== void 0 && this._AvailableMediaIds.shift();
            mediaEntry = {
              media: mediaId ? {
                connectionId: this.mainConnection.id,
                mediaId
              } : void 0,
              uid: generateUUID()
            };
            this._Captures.set(media, mediaEntry);
            if (mediaEntry.media !== void 0) {
              console.log("Eyvor room.link() statLocalVideo()");
              console.log("Eyvor room.link() statLocalVideo() tracks: ", media.mediaStream.getTracks());
              (_b = this.mainConnection) === null || _b === void 0 ? void 0 : _b.startLocalVideo(mediaEntry.media.mediaId, media.mediaStream.getTracks()[0]);
              media.start(this._Connection, mediaEntry.media, mediaEntry.uid);
            }
          }
        } else if (media instanceof VideoPlayback) {
          console.log("Eyvor room.link() VideoPlayback");
          const entry = (_c = this._Playbacks.get(media.uid)) !== null && _c !== void 0 ? _c : {
            media: void 0,
            playback: void 0
          };
          console.log("Eyvor room.link() entry: ", entry);
          if (entry.playback !== void 0) {
            this.unlink(entry.playback);
          }
          if (entry.media !== void 0) {
            const track = yield (_d = this.mainConnection) === null || _d === void 0 ? void 0 : _d.startRemoteVideo(entry.media.mediaId);
            console.log("Eyvor room.link() track;", track);
            if (track) {
              media.setMediaStream(new MediaStream([track]));
            }
          }
          entry.playback = media;
          this._Playbacks.set(media.uid, entry);
        } else {
          throw new Error("invalid media");
        }
      });
    }
    unlink(media) {
      var _a, _b;
      if (media instanceof AudioPlayback || media instanceof VideoPlayback) {
        const entry = this._Playbacks.get(media.uid);
        if ((entry === null || entry === void 0 ? void 0 : entry.playback) !== media)
          return;
        entry.playback = void 0;
        if (entry.media !== void 0) {
          if (media instanceof AudioPlayback) {
            media.stop(entry.media);
          } else {
            (_a = this.mainConnection) === null || _a === void 0 ? void 0 : _a.stopRemoteVideo(entry.media.mediaId);
            media.setMediaStream(void 0);
          }
        }
        this._Playbacks.set(media.uid, entry);
      } else if (media instanceof AudioCapture || media instanceof VideoCapture) {
        const entry = this._Captures.get(media);
        if (entry === void 0)
          return;
        if (entry.media !== void 0) {
          media.stop(this._Connection, entry.media);
          this._AvailableMediaIds.push(entry.media.mediaId);
          if (media instanceof VideoCapture) {
            (_b = this.mainConnection) === null || _b === void 0 ? void 0 : _b.stopLocalVideo(entry.media.mediaId);
          }
        }
        this._Captures.delete(media);
      } else {
        throw new Error("invalid media");
      }
    }
    close() {
      console.trace("Room.close()");
      this._Connection.close();
    }
    _HandleEvent(method, properties) {
      const rpc = parseRpcMessage(RoomNotificationsRpc, {
        name: method,
        properties
      });
      if (rpc !== void 0) {
        this._HandleKnownEvent(rpc);
        properties = rpc.properties;
      }
      console.log(`handle event ${method} ${this._OnEvent !== void 0}`);
      this._OnEvent(method, properties);
    }
    _HandleKnownEvent(event) {
      switch (event.name) {
        case "RoomStatusChanged":
          if (event.properties.status !== "Joined") {
            this._HandleConnectionLost();
          }
          break;
        case "RoomUpdated":
          for (const update of event.properties.updates) {
            this._HandleRoomUpdate(update);
          }
          break;
        case "PeerUpdated":
          this._HandlePeerUpdate(event.properties);
          break;
      }
    }
    _HandleConnectionLost() {
      for (const peerId of this._Peers.keys()) {
        this._HandlePeerLeft(peerId);
      }
      for (const [capture, entry] of this._Captures) {
        if (entry.media === void 0)
          continue;
        if (capture instanceof VideoCapture) {
          console.log("Eyvor _HandleConnectionLost() VideoCapture");
        }
        if (capture instanceof AudioCapture) {
          capture.stop(this._Connection, entry.media);
          entry.media = void 0;
        }
      }
      this._AvailableMediaIds.length = 0;
    }
    _HandleRoomUpdate(update) {
      if (update.kind === "Joined") {
        assert(this._AvailableMediaIds.length === 0, "left over media ids");
        this._AvailableMediaIds.push(...update.media_ids);
        this._HandleRoomJoined();
        for (const peer of update.room.peers) {
          this._HandlePeerJoined(peer);
        }
      } else if (update.kind === "PeerJoined") {
        this._HandlePeerJoined(update.peer);
      } else if (update.kind === "PeerLeft") {
        this._HandlePeerLeft(update.peer_id);
      }
    }
    _HandleRoomJoined() {
      for (const [capture, entry] of this._Captures) {
        if (this._AvailableMediaIds.length === 0 || this.mainConnection === void 0) {
          continue;
        }
        entry.media = {
          connectionId: this.mainConnection.id,
          mediaId: this._AvailableMediaIds.shift()
        };
        if (capture instanceof AudioCapture) {
          capture.start(this._Connection, entry.media, entry.uid);
        }
        if (capture instanceof VideoCapture) {
          console.log("Eyvor _HandleRoomJoined() VideoCapture");
        }
      }
    }
    _HandlePeerUpdate(update) {
      if (update.kind === "MediaStarted") {
        this._HandleMediaStart(update.peer_id, update.media);
      } else if (update.kind === "MediaStopped") {
        this._HandleMediaStopped(update.peer_id, update.media_id);
      }
    }
    _HandlePeerJoined(peer) {
      if (!this._Peers.has(peer.id)) {
        this._Peers.set(peer.id, { mediaIds: /* @__PURE__ */ new Map() });
      }
      for (const media of peer.medias) {
        this._HandleMediaStart(peer.id, media);
      }
    }
    _HandlePeerLeft(peerId) {
      const entry = this._Peers.get(peerId);
      if (entry === void 0)
        return;
      for (const mediaId of entry.mediaIds.keys()) {
        this._HandleMediaStopped(peerId, mediaId);
      }
      this._Peers.delete(peerId);
    }
    _HandleMediaStart(peerId, media) {
      var _a, _b;
      if (this.mainConnection === void 0)
        return;
      const peer = this._Peers.get(peerId);
      if (peer === void 0 || media.properties.kind !== "audio" && media.properties.kind !== "video") {
        console.log("Eyvor _HandleMediaStart() return");
        return;
      }
      console.log("Eyvor _HandleMediaStart()");
      const uid = String((_a = media.properties.uid) !== null && _a !== void 0 ? _a : generateUUID());
      console.log(`uuid ${media.properties.uid} ${uid}`);
      media.properties.uid = uid;
      const entry = (_b = this._Playbacks.get(uid)) !== null && _b !== void 0 ? _b : {
        media: void 0,
        playback: void 0
      };
      this._Playbacks.set(uid, entry);
      peer.mediaIds.set(media.id, uid);
      entry.media = {
        connectionId: this.mainConnection.id,
        mediaId: media.id
      };
      if (entry.playback !== void 0) {
        if (entry.playback instanceof AudioPlayback) {
          entry.playback.start(entry.media);
        }
        if (entry.playback instanceof VideoPlayback) {
          console.log("Eyvor _HandleMediaStart() VideoPlayback");
          this.mainConnection.startRemoteVideo(entry.media.mediaId).then();
        }
      }
    }
    _HandleMediaStopped(peerId, mediaId) {
      var _a;
      const peer = this._Peers.get(peerId);
      if (peer === void 0)
        return;
      const uid = peer === null || peer === void 0 ? void 0 : peer.mediaIds.get(mediaId);
      if (uid === void 0)
        return;
      const entry = this._Playbacks.get(uid);
      if (entry === void 0)
        return;
      if (entry.media !== void 0 && entry.playback !== void 0) {
        if (entry.playback instanceof AudioPlayback) {
          entry.playback.stop(entry.media);
        }
        if (entry.playback instanceof VideoPlayback) {
          console.log("Eyvor _HandleMediaStopped() VideoPlayback");
          (_a = this.mainConnection) === null || _a === void 0 ? void 0 : _a.stopRemoteVideo(entry.media.mediaId);
        }
      }
      entry.media = void 0;
      peer.mediaIds.delete(mediaId);
    }
  };
